<!DOCTYPE html>
<html lang="de">
<head>
<meta name="description" content="Erfahren Sie, wie man mit AutoHotkey Tastendrücke oder Texte sendet." />
<meta name="ahk:equiv-v1" content="Tutorial.htm#s3" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<title>Wie man Tastendrücke sendet | AutoHotkey v2</title>
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>
<h1>Wie man Tastendrücke sendet</h1>
<pre>Send "Hallo, Welt{!}{Left}^+{Left}"</pre>
<p>Das Senden von Tastendrücken (oder kurz Tasten) ist die gängigste Methode, um Programme zu automatisieren, da sie am häufigsten funktioniert. Direktere Methoden funktionieren in der Regel nur für bestimmte Applikationen.</p>
<p>Grundsätzlich gibt es zwei Dinge, die man lernen muss, um Tasten zu senden:</p>
<ol>
  <li>Wie man den Code schreibt, damit das Programm weiß, welche Tasten es senden soll.</li>
  <li>Wie man die verfügbaren Modi und Optionen verwendet, um das gewünschte Ergebnis zu erzielen.</li>
</ol>
<p>Sie sollten sich darüber im Klaren sein, dass das Senden einer Taste den Vorgang des physischen Tastendrückens nicht perfekt nachahmt, selbst wenn Sie ihn auf menschliche Geschwindigkeit verlangsamen. Aber bevor wir darauf eingehen, werden wir einige Grundlagen besprechen.</p>

<h2 id="Trying_the_examples">Die Beispiele ausprobieren</h2>
<p>Wenn Sie ein Beispiel wie <code>SendText "Hi!"</code> ausführen, wird der Text sofort an das aktive (fokussierte) Fenster gesendet, was kontraproduktiv sein kann, je nachdem, wie Sie das Beispiel ausführen. In der Regel ist es besser, einen Hotkey zu definieren und diesen mit dem Beispiel zu verbinden. Drücken Sie dann den Hotkey, wenn Sie seine Wirkung testen wollen. Einige der folgenden Beispiele verwenden nummerierte Hotkeys wie <code>^1::</code> (<kbd>Strg</kbd> und eine Zahl, so dass Sie mehrere Beispiele auf einmal ausprobieren können, sofern es keine Duplikate gibt), aber Sie können dies nach Belieben ändern.</p>
<p>Wie Sie die Hotkeys anpassen oder eigene Hotkeys erstellen können, erfahren Sie unter <a href="WriteHotkeys.htm">Wie man Hotkeys schreibt</a>.</p>
<p>Wenn Sie nicht genau wissen, wie Sie die Beispiele ausprobieren sollen, lesen Sie <a href="RunExamples.htm">Wie man Beispielcodes ausführt</a>.</p>

<h2 id="How_to_write_the_code">Wie man den Code schreibt</h2>
<p>Wenn Sie Tasten senden, möchten Sie in der Regel entweder eine Taste oder eine Tastenkombination wegen ihrer Wirkung senden (z.B. <kbd>Strg</kbd>+<kbd>C</kbd> zum Kopieren in die Zwischenablage) oder einen Text eingeben. Die Eingabe von Text ist leichter, also fangen wir damit an: Rufen Sie einfach die <a href="../lib/Send.htm">SendText</a>-Funktion auf und <a href="../Concepts.htm#pass-parameters">übergeben</a> Sie ihr den genauen Text, den Sie senden möchten.</p>
<pre>^1::SendText "Sehr geehrte Damen und Herren"</pre>
<p>Technisch gesehen sendet SendText eigentlich keine Tastendrücke, sondern Unicode-Zeichenpakete, was die Zuverlässigkeit für Zeichen erhöht, die normalerweise mit einer Tastenkombination wie <kbd>Umschalt</kbd>+<kbd>2</kbd> oder <kbd>AltGr</kbd>+<kbd>a</kbd> eingegeben werden.</p>

<h3 id="Rules_of_quoted_strings">Anführungszeichen</h3>
<p>SendText sendet den Text unverändert, aber unter Berücksichtigung der <a href="../Language.htm">Sprachregeln</a>. So muss z.B. <a href="../Language.htm#strings">direkt geschriebener Text</a> in Anführungszeichen gesetzt werden (doppelt <code class="no-highlight">"</code> oder einfach <code class="no-highlight">'</code>), die von der SendText-Funktion nicht "gesehen" werden. Um ein direkt geschriebenes Anführungszeichen zu senden, umschließen Sie es mit gegenteiligen Anführungszeichen. Zum Beispiel:</p>
<pre>^2::SendText 'Anführungszeichen nennt man auch "Gänsefüßchen".'</pre>
<p>Alternativ können Sie auch eine <a href="../misc/EscapeChar.htm">Escapesequenz</a> verwenden. Innerhalb einer in Anführungszeichen gesetzten Zeichenkette wird <code class="no-highlight">`"</code> in ein direkt geschriebenes <code class="no-highlight">"</code> und <code class="no-highlight">`'</code> in ein direkt geschriebenes <code class="no-highlight">'</code> übersetzt. Zum Beispiel:</p>
<pre>^3::{
    SendText "Doppeltes Anführungszeichen (`")"
    SendText 'Einfaches Anführungszeichen (`')'
}</pre>
<p>Die Anführungszeichen können auch abwechselnd gesetzt werden:</p>
<pre>^4::SendText 'Doppeltes (") und' . " einfaches (') Anführungszeichen"</pre>
<p>Die beiden Zeichenketten werden vor der Übergabe an die SendText-Funktion zusammengefügt (<a href="../Variables.htm#concat">verkettet</a>). Der Punkt (<code>.</code>) kann weggelassen werden, aber dann ist es schwieriger zu erkennen, wo die eine endet und die andere beginnt.</p>
<p>Wie Sie oben bereits gesehen haben, hat das Escapezeichen <code class="no-highlight">`</code> (auch bekannt als <em>umgekehrtes Häkchen</em>, <em>Akzentzeichen</em> oder <em>Gravis</em>) eine besondere Bedeutung. Wenn Sie dieses Zeichen (oder die entsprechende Taste) direkt senden wollen, müssen Sie es verdoppeln, wie in <code>Send "``"</code>. Andere gängige Escapesequenzen sind <code class="no-highlight">`n</code> für Zeilenvorschub (Enter) und <code class="no-highlight">`t</code> für Tabulator. Eine vollständige Liste finden Sie unter <a href="../misc/EscapeChar.htm">Escapesequenzen</a>.</p>

<h3 id="Sending_keys_and_key_combinations">Tasten und Tastenkombinationen senden</h3>
<p><a href="../lib/Send.htm">SendText</a> ist am besten geeignet, um Text unverändert zu senden, kann aber keine Tasten senden, die keinen Text erzeugen, wie z.B. <kbd>←</kbd> oder <kbd>Pos1</kbd>. <a href="../lib/Send.htm">Send</a>, <a href="../lib/Send.htm#SendInput">SendInput</a>, <a href="../lib/Send.htm#SendPlay">SendPlay</a>, <a href="../lib/Send.htm#SendEvent">SendEvent</a> und <a href="../lib/ControlSend.htm">ControlSend</a> können sowohl Text als auch Tastenkombinationen oder Tasten, die keinen Text erzeugen, senden. Um dies zu ermöglichen, fügen sie den folgenden Symbolen eine besondere Bedeutung hinzu: <code class="no-highlight">^!+#{}</code></p>
<p>Die ersten vier Symbole sind die regulären Modifikatortasten: Strg (<code class="no-highlight">^</code>), Alt (<code class="no-highlight">!</code>), Umschalt (<code class="no-highlight">+</code>) und Win (<code class="no-highlight">#</code>). Diese können kombiniert werden, wirken sich aber sonst nur auf die nächste Taste aus.</p>
<p>Um eine Taste per Namen zu senden oder um eines der oben genannten Symbole direkt zu senden, umschließen Sie die Taste oder das Symbol mit geschweiften Klammern. Zum Beispiel:</p>
<ul>
  <li><code class="no-highlight">^+{Left}</code> erzeugt <kbd>Strg</kbd>+<kbd>Umschalt</kbd>+<kbd>←</kbd></li>
  <li><code class="no-highlight">^{+}{Left}</code> erzeugt <kbd>Strg</kbd>+<kbd>+</kbd> gefolgt von <kbd>←</kbd></li>
  <li><code class="no-highlight">^+Left</code> erzeugt <kbd>Strg</kbd>+<kbd>Umschalt</kbd>+<kbd>L</kbd> gefolgt von den Buchstaben <code class="no-highlight">eft</code></li>
</ul>
<p>Wenn Sie <kbd>Strg</kbd>+<kbd>Umschalt</kbd>+<kbd>"</kbd> drücken, wird das folgende Beispiel zwei Anführungszeichen senden und den Textcursor nach links verschieben, so dass Sie sofort etwas zwischen die Anführungszeichen schreiben können:</p>
<pre>^+"::Send '""{Left}'</pre>
<p>Alle anderen Zeichen außer <code class="no-highlight">^!+#{}</code> werden von Send in die entsprechende Tastenkombination umgewandelt und dann gedrückt und losgelassen. Zum Beispiel bewirkt <code>Send "aB"</code>, dass <kbd>A</kbd> gedrückt und losgelassen wird und dann <kbd>Umschalt</kbd>+<kbd>B</kbd> gedrückt und losgelassen wird. Ebenso wird jeder Tastenname in geschweiften Klammern standardmäßig gedrückt und losgelassen. Zum Beispiel bewirkt <code>Send "{Ctrl}a"</code>, dass <kbd>Strg</kbd> gedrückt und losgelassen wird und dann <kbd>A</kbd> gedrückt und losgelassen wird; vermutlich nicht das, was Sie wollen.</p>
<p>Um eine Taste nur zu drücken (gedrückt zu halten) oder nur loszulassen, umschließen Sie den Tastennamen mit geschweiften Klammern, gefolgt von einem Leerzeichen und dem Wort "down" oder "up". Das folgende Beispiel bewirkt, dass <kbd>Strg</kbd>+<kbd>Feststell</kbd> als Schalter für <kbd>Umschalt</kbd> fungiert:</p>
<pre>*^CapsLock::{
    if GetKeyState("Shift")
        Send "{Shift up}"
    else
        Send "{Shift down}"
}</pre>

<h3 id="Hotkeys_vs_Send">Hotkeys vs. Send</h3>
<p class="warning"><strong>Warnung:</strong> Es gibt einige Unterschiede zwischen Hotkeys und Send, die Sie wissen sollten.</p>
<p>Obwohl <a href="../Hotkeys.htm">Hotkeys</a> auch die Symbole <code class="no-highlight">^!+#</code> und die Tastennamen verwenden, gibt es einige wichtige Unterschiede:</p>
<ul>
  <li>Andere Hotkey-Modifikatorsymbole werden von Send nicht unterstützt. Zum Beispiel: <code>&gt;^a::</code> ist <kbd>RCtrl</kbd>+<kbd>A</kbd>, aber um diese Kombination zu senden, müssen Sie den Tastennamen vollständig ausschreiben, wie in <code>Send "{RCtrl down}a{RCtrl up}"</code>.</li>
  <li>Tastennamen werden in Hotkeys nie mit geschweiften Klammern umschlossen, müssen aber bei Send immer mit geschweiften Klammern umschlossen werden (wenn sie länger als ein Zeichen sind).</li>
  <li>Send ist Groß-/Kleinschreibung-sensitiv. Zum Beispiel bewirkt <code>Send "^A"</code>, dass <kbd>Strg</kbd> in Kombination mit einem <em>großen</em> "a" gesendet wird, also <kbd>Strg</kbd>+<kbd>Umschalt</kbd>+<kbd>A</kbd>. <code>^a::</code> und <code>^A::</code> sind dagegen äquivalent.</li>
</ul>
<p>Der Grund dafür ist, dass Send für mehrere Zwecke gedacht ist, während Hotkeys für Tastenkombinationen optimiert sind.</p>
<p>Ergänzend sei angemerkt, dass <a href="../Hotstrings.htm">Hotstrings</a> ausschließlich der Erkennung von Texteingaben dienen, so dass die Symbole <code class="no-highlight">^!+#{}</code> innerhalb des Auslösetextes keine besondere Bedeutung haben. Allerdings verwendet der <em>Ersatztext</em> eines Hotstrings die gleiche Syntax wie Send (außer bei Verwendung der <a href="../Hotstrings.htm#T">T-Option</a>). Jedes Mal, wenn Sie "{" eingeben, während der folgende Hotstring aktiv ist, sendet er "}" und dann <kbd>←</kbd>, um den Textcursor wieder zwischen die geschweiften Klammern zu setzen:</p>
<pre>:*?B0:{::{}}{Left}</pre>

<h3 id="Blind_mode">Blind-Modus</h3>
<p>Normalerweise geht Send davon aus, dass alle Modifikatortasten, die Sie physisch gedrückt halten, nicht mit den zu sendenden Tasten kombiniert werden sollen. Wenn Sie z.B. <kbd>Strg</kbd> gedrückt halten und <code>Send "Hi"</code> aufrufen, wird Send <kbd>Strg</kbd> automatisch loslassen, bevor es "Hi" sendet, und sie danach wieder nach unten drücken.</p>
<p>Manchmal möchten Sie bestimmte Tasten in Kombination mit anderen Modifikatoren senden, die Sie zuvor gedrückt oder gesendet haben. Verwenden Sie dafür das <code class="no-highlight">{Blind}</code>-Präfix. Versuchen Sie unter Verwendung des folgenden Beispiels, einen nicht-leeren Texteditor oder ein nicht-leeres Eingabefeld zu fokussieren und <kbd>1</kbd> oder <kbd>2</kbd> zu drücken, während Sie <kbd>Strg</kbd> oder <kbd>Strg</kbd>+<kbd>Umschalt</kbd> gedrückt halten:</p>
<pre>*^1::Send "{Blind}{Home}"
*^2::Send "{Blind}{End}"</pre>
<p>Weitere Informationen zu <code class="no-highlight">{Blind}</code> finden Sie unter <a href="../lib/Send.htm#Blind">Blind-Modus</a>.</p>

<h3 id="Others">Sonstige</h3>
<p>Send unterstützt einige andere spezielle Konstrukte, wie zum Beispiel:</p>
<ul>
  <li><code class="no-highlight">{U+00B5}</code> zum Senden eines Unicodezeichens über seinen Ordinalwert (Zeichencode).</li>
  <li><code class="no-highlight">{ASC 0181}</code> zum Senden einer Alt+Ziffernblock-Sequenz.</li>
  <li><code class="no-highlight">{Click <i>Optionen</i>}</code> zum Klicken oder Bewegen der Maus.</li>
</ul>
<p>Eine vollständige Liste finden Sie unter <a href="../lib/Send.htm#keynames">Tastennamen</a>.</p>

<h2 id="Modes_and_options">Modi und Optionen</h2>
<p>Das Senden einer Taste ahmt den Vorgang des physischen Tastendrückens nicht perfekt nach. Das Betriebssystem bietet verschiedene Möglichkeiten zum Senden von Tasten, für die es jeweils unterschiedliche Vorbehalte gibt. Für das gewünschte Ergebnis ist es nicht nur wichtig, verschiedene Methoden auszuprobieren, sondern auch das Timing zu optimieren.</p>
<p>Die <a href="../lib/Send.htm#Send_variants">Hauptmethoden</a> sind SendInput, SendEvent und SendPlay. SendInput ist in der Regel die zuverlässigste Methode, daher ist Send standardmäßig synonym mit SendInput. <a href="../lib/SendMode.htm">SendMode</a> kann verwendet werden, um Send stattdessen synonym mit SendEvent oder SendPlay zu machen. Weitere Vor- und Nachteile von <a href="../lib/Send.htm#SendInputDetail">SendInput</a> und <a href="../lib/Send.htm#SendPlayDetail">SendPlay</a> sind in der Dokumentation ausführlich beschrieben, aber ich rate Ihnen, einfach SendEvent oder SendPlay auszuprobieren, wenn Sie Probleme mit SendInput haben.</p>
<p class="warning"><strong>Warnung:</strong> SendPlay funktioniert in der Regel nicht in modernen Systemen, es sei denn, Sie verwenden <a href="../Program.htm#Installer_uiAccess">UI-Access</a>. In Windows 11 und höher funktioniert SendPlay möglicherweise überhaupt nicht.</p>
<p>Ein weiterer lohnenswerter Kandidat ist <a href="../lib/ControlSend.htm">ControlSend</a>, das keine offizielle Methode zum Senden von Tastendrücken verwendet, sondern stattdessen Meldungen direkt an das von Ihnen angegebene Fenster sendet. Dies hat vor allem den Vorteil, dass das Fenster in der Regel nicht aktiv sein muss, um diese Meldungen zu empfangen. Da es aber die normale Verarbeitung der systeminternen Tastatureingabe umgeht, funktioniert es manchmal nicht.</p>

<h3 id="Timing_and_delays">Timing und Verzögerungen</h3>
<p>Manchmal ist es möglich, eine Flut von Tastendrücken schneller als ein Mensch zu senden, manchmal aber auch nicht. In der Regel gibt es zwei Situationen, in denen eine Verzögerung nützlich sein kann:</p>
<ul>
  <li>Ein Tastendruck soll eine Änderung in der Zielapplikation bewirken (z.B. um ein neues Steuerelement oder Fenster anzuzeigen), und das Senden eines weiteren Tastendrucks, bevor dies geschieht, hat die falsche Wirkung.</li>
  <li>Die Applikation kann mit einer Flut von Tastendrücken nicht mithalten, also müssen sie verlangsamt werden.</li>
</ul>
<p>Für den ersten Punkt können Sie einfach Send, dann <a href="../lib/Sleep.htm">Sleep</a>, dann Send usw. verwenden.</p>
<p>Für den zweiten Punkt können Sie <a href="../lib/SetKeyDelay.htm">SetKeyDelay</a> verwenden. Diese Funktion bestimmt die Verzögerung zwischen jedem Tastendruck und die Dauer des Tastendrucks (also die Verzögerung zwischen Drücken und Loslassen der Taste).</p>
<pre>^1::{
    SetKeyDelay 75, 25  <em>; 75ms zwischen Tasten, 25ms zwischen unten/oben.</em>
    SendEvent "Die Tasten{bs 6}Zeichen sollten nacheinander erscheinen."
}</pre>
<p class="warning"><strong>Warnung:</strong> SendInput unterstützt keine Tastenverzögerung, ebenso wenig wie das reguläre Send.</p>
<p>SetKeyDelay funktioniert grundsätzlich nur, wenn Sie entweder <code>SendMode "Event"</code> verwenden oder SendEvent, SendPlay oder ControlSend anstelle von Send oder SendText aufrufen.</p>

<h2 id="Sending_a_lot_of_text">Sehr viel Text senden</h2>
<p>Mehrere Textzeilen können z.B. mithilfe eines <a href="../Scripts.htm#continuation-section">Fortsetzungsbereichs</a> gesendet werden:</p>
<pre>SendText "
(
    Einrückungen werden entfernt,
    basierend auf der ersten Zeile.
    Zeilenumbrüche bleiben erhalten,
    es sei denn, Sie verwenden die Join-Option.
)"</pre>
<p>Obwohl SendText in der Regel recht schnell ist, muss es immer noch jedes Zeichen einzeln senden, während Send in der Regel mindestens doppelt so viele Meldungen senden muss (Taste-Unten <em>und</em> Taste-Oben). Dies führt zu einer merklichen Verzögerung, wenn sehr viel Text gesendet wird. Außerdem kann die Zuverlässigkeit darunter leiden, denn je länger die Verzögerung, desto größer ist das Risiko, dass es zu Konflikten mit Benutzereingaben kommt, sich der Tastaturfokus verschiebt oder sich andere Bedingungen ändern.</p>
<p>In der Regel ist es schneller und zuverlässiger, den Text in die Zwischenablage zu kopieren und <em>einzufügen</em>. Zum Beispiel:</p>
<pre>^1::{
    old_clip := ClipboardAll()  <em>; Zwischenablage speichern</em>
    A_Clipboard := "
    (Join`s
        Dieser Text befindet sich in der Zwischenablage
        und wird unten mit Strg+V eingefügt.
    )"
    Send "^v"
    Sleep 500  <em>; Kurz warten, bis Strg+V verarbeitet wurde</em>
    A_Clipboard := old_clip  <em>; Vorherige Zwischenablage wiederherstellen</em>
}</pre>

</body>
</html>
