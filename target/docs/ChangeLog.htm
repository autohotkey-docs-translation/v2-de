<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Änderungen und neue Features | AutoHotkey v2</title>
<meta name="description" content="Änderungen und neue Features, eingeführt durch den aktuellen Entwicklungszweig von AutoHotkey." />
<meta name="ahk:equiv-v1" content="AHKL_ChangeLog.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>
<body>
<h1>Änderungen und neue Features</h1>
<p><a href="v2-changes.htm">Änderungen von v1.1 bis v2.0</a> behandelt die Unterschiede zwischen v1.1 und v2.0.</p>
<p>Alle technischen Einzelheiten zu den Änderungen finden Sie auf <a href="https://github.com/AutoHotkey/AutoHotkey/tree/alpha">GitHub</a>.</p>

<h2 id="v2.0.19">2.0.19 - 25. Januar 2025</h2>
<p>Behoben: Out-of-Bounds-Speicherzugriff während RegEx-Kompilierung.</p>
<p>Behoben: Extern ausgelöste Modifikatoren werden nach einem Send nicht mehr "wiederhergestellt".</p>
<p>Behoben: Modale Dialogfenster unterdrückten InputHook-Ereignisse.</p>
<p>Behoben: Tasten-Oben wird nicht mehr fälschlicherweise unterdrückt, wenn es in einigen Fällen von Tastenwiederholungsdrücken nach unten gedrückt wird.</p>
<p>Behoben: Kritischer Fehler beim Laden großer Symbole ohne Alphakanal.</p>
<p>Behoben: MouseGetPos macht AusgabeVarSteuerelement nun leer, anstatt eine Ausnahme auszulösen, wenn ClassNN nicht ermittelt werden kann.</p>
<p>Behoben: FileSelect validiert nun Optionen.</p>
<p>Behoben: Unerwartetes Catch/Else/Finally/Until wurde in einigen Fällen nicht als Fehler gewertet.</p>
<p>Behoben: Try/Catch/Else/Finally führte Finally nicht aus, wenn Else via Return zurückkehrt.</p>
<p>Behoben: Ausführung von if-else-if-else-if, das Fat-Arrow-Funktionen enthält.</p>

<h2 id="v2.0.18">2.0.18 - 6. Juli 2024</h2>
<p>Behoben: A_Clipboard beendet sich nicht mehr stillschweigend, wenn GetClipboardData NULL zurückgibt.</p>
<p>Behoben: <code>a.b[c] := d</code> ruft nun indirekt den Getter für <code>a.b</code> auf, wenn es keinen Setter gibt.</p>

<h2 id="v2.0.17">2.0.17 - 5. Juni 2024</h2>
<p>Optimiert: FensterText-Parameter-Optimierung von Descolada implementiert. [<a href="https://github.com/AutoHotkey/AutoHotkey/pull/335">PR #335</a>]</p>
<p>Geändert: UnsetError-Meldung schlägt nun eine globale Deklaration vor, anstatt "(same name as a global)" hinter dem Variablennamen anzufügen.</p>
<p>Geändert: VarUnset-Warnmeldung wurde geändert, um konsistent mit UnsetError zu sein.</p>
<p>Behoben: Die Inkrement-/Dekrementoperatoren lösen nun UnsetError aus, wenn die Variable ungesetzt ist, nicht TypeError.</p>
<p>Behoben: OwnProps weist nun den Eigenschaftsnamen sicher zu, wenn sich eine Eigenschaft selbst löscht.</p>
<p>Behoben: Haltepunkte funktionieren jetzt auch in Fat-Arrow-Funktionen unter einer Kontrollanweisung ohne Block.</p>
<p>Behoben: Der Debugger hält nun an der Zeile des Aufrufs beim Verlassen einer Funktion. (Dieses Verhalten wurde in Revision 31 hinzugefügt, aber ist seit v1.1.30.00 fehlerhaft.)</p>
<p>Behoben: Das Verlassen einer Funktion, die als neuer Thread aufgerufen wurde, hält nun an der unterbrochenen Zeile, anstatt zu warten, bis die nächste Zeile erreicht ist.</p>
<p>Behoben: Der Debugger löscht keine temporären Haltepunkte mehr, die bei der Auswertung von DBGp property_get oder context_get ignoriert werden.</p>

<h2 id="v2.0.16">2.0.16 - 30. Mai 2024</h2>
<p>Behoben: Keine Ladezeitfehler mehr, die an stdout gesendet wurden und in einigen Fällen eine falsche Datei oder Zeilennummer anzeigten.</p>
<p>Behoben: ExitApp verwendet nun bei Fehler-/Warndialogfenstern während der Ladezeit den Exitcode 2.</p>
<p>Behoben: WindowSpy.ahk wird nun bei Installationen unter dem aktuellen Benutzer (Nicht-Admin) gefunden.</p>
<p>Behoben (erneut): property_get bezifferte Elemente falsch.</p>
<p>Behoben: StrPut schlägt nicht mehr fehl, wenn Länge/Buffer angegeben ist und <a href="https://learn.microsoft.com/windows/win32/api/stringapiset/nf-stringapiset-multibytetowidechar">MultiByteToWideChar</a> das Flag WC_NO_BEST_FIT_CHARS für die gewünschte Codepage nicht unterstützt.</p>
<p>Behoben: Download versucht nun eine anonyme Authentifizierung, wenn der Server eine Client-Authentifizierung verlangt.</p>

<h2 id="v2.0.15">2.0.15 - 16. Mai 2024</h2>
<p>Behoben: DBGp property_get konnte aufgrund falscher Bezifferung keine Eigenschaften abrufen (seit v2.0.14).</p>
<p>Behoben: DBGp-Eigenschaftsauswertung ließ Try ohne Catch fehlschlagen (seit v2.0.14).</p>
<p>Behoben: Die &lt;base&gt;-Pseudoeigenschaft des Debuggers ließ eine Referenz durchsickern (seit v2.0.14).</p>

<h2 id="v2.0.14">2.0.14 - 6. Mai 2024</h2>
<p>Behoben: Das Fehlerdialogfenster reagiert nun auch auf Tastaturkurzbefehle, wenn der Text fokussiert ist.</p>
<p>Behoben: Die Breitenwerte von MonthCal W-<em>n</em> (Anzahl der Monate) werden nicht mehr von der DPI-Skalierung beeinflusst.</p>
<p>Behoben: Click gibt keinen Integer mehr zurück.</p>
<p>Behoben: <code class="no-highlight"><i>Taste</i>::try {</code> wird nicht mehr als Fehler erkannt.</p>
<p>Behoben: <code>:B0*O:XY::Z</code> erzeugt nun XYZ statt XZ (also statt Y zu unterdrücken).</p>
<p>Behoben: Send lässt ein vorheriges <code>{<i>Modifikator</i> Down}</code> wirksam, auch wenn die Taste physisch gedrückt gehalten wird.</p>
<p>Verbessert: Das Skript nimmt nun zuverlässiger den Fokus, wenn ein Kontextmenü angezeigt wird.</p>

<p><strong>Debugger-Verbesserungen:</strong></p>
<p>Behoben: stdout/stderr-Pakete, die während der Verarbeitung eines anderen Befehls gesendet werden, korrumpieren nicht mehr die bevorstehende Antwort.</p>
<p>Behoben: <code class="no-highlight">property_get -n &lt;exception&gt;.message</code> und ähnliches.</p>
<p>Behoben: Es werden keine korrumpierten Ergebnisse von property_get mehr erzeugt, wenn eine Eigenschaft ein temporäres Objekt mit einer Zeichenkette zurückgibt, wie z.B. <code>x.y.z</code>, wobei <code>y =&gt; {z:"a"}</code>.</p>
<p>Behoben: Es kommt nicht mehr zu Abstürzen, wenn ein asynchroner Befehl während der Verarbeitung eines anderen Befehls empfangen wird.</p>
<p>Behoben: Ausnahmen wurden nicht gelöscht, nachdem sie via property_set unterdrückt wurden.</p>
<p>Behoben: <code class="no-highlight">property_get -c 0 -d 0</code> erlaubt nun globale Variablen, wie sie bereits von <code>-d 1</code> erlaubt werden.</p>
<p>Behoben: property_get bezifferte enumerierte Elemente falsch.</p>

<p>Verbessert: property_get unterstützt nun auch Eigenschafts-Getter mit einem Parameter (bisher wurde dies nur von der impliziten __Item-Eigenschaft unterstützt).</p>
<p>Verbessert: property_get unterstützt nun auch Eigenschaften von primitiven Werten. Der Wert muss nach wie vor in einer Variable enthalten sein oder von einer Eigenschaft zurückgegeben werden.</p>
<p>Verbessert: property_get erlaubt nun den Aufruf von Funktionen mit &lt;=1 Parametern.</p>
<p>Verbessert: property_get unterstützt nun Float-Schlüssel/Parameter.</p>

<p>Geändert: Der Debugger unterdrückt nun Ausnahmen bei der Auswertung von Eigenschaften.</p>
<p>Geändert: Der Debugger ignoriert nun Fehler, die durch __Enum ausgelöst werden (als keine Elemente behandeln).</p>
<p>Geändert: Die Pseudo-Eigenschaft &lt;enum&gt; erfordert nun __Enum. Dadurch wird verhindert, dass das Objekt selbst als Enumerator aufgerufen wird.</p>
<p>Kleine Optimierungen der Codegröße im Debugger.</p>

<h2 id="v2.0.13">2.0.13 - 20. April 2024</h2>
<p>Geändert: Die Hotkey-Funktion löst nun einen ValueError aus, wenn ihr Optionen-Parameter eine ungültige Option enthält.</p>
<p>Behoben: InputHook respektiert nun die +S-Option für Backspace, wenn es als "rückgängig machen" fungiert.</p>
<p>Behoben: Der Debugger handhabt nun sicher das Löschen von Eigenschaften während einer Enumeration.</p>
<p>Behoben: Der Inhalt der OLE-Zwischenablage (z.B. Fehlerdialogtext) ging beim Beenden verloren.</p>
<p>Behoben: Die Erkennung eines ungültigen Suffixes bei einem Hotkey, wie z.B. <code>Hotkey "a pu"</code>.</p>
<p>Behoben: Der <code>AStr*</code>-Argumenttyp von DllCall wird nur noch zurückkopiert, wenn sich die Adresse ändert.</p>
<p>Behoben: #Include "schließt" nun korrekt jede interne Variable, die es liest (keine bekannten Auswirkungen auf reale Skripte).</p>
<p>Behoben: FensterTitel mit zwei verschiedenen ahk_id-Werten ergaben keine Übereinstimmung.</p>

<h2 id="v2.0.12">2.0.12 - 23. März 2024</h2>
<p>Behoben: Gui GetPos/GetClientPos bei einer Gui mit einem übergeordneten Fenster oder +DPIScale.</p>
<p>Behoben: Until verhinderte die Rekursion von Unterordnern in Dateischleifen.</p>
<p>Behoben: DllCall löst nun eine Ausnahme beim UStr-Argumenttyp aus.</p>
<p>Behoben: Ein Speicherleck, das bei jedem Regex-Callout auftrat.</p>
<p>Behoben: Send löste fälschlicherweise einen Modifikator aufgrund einer Race Condition aus. Zum Beispiel löste <code>~LAlt::Send "{Blind}x"</code> gelegentlich LAlt aus, wenn ein anderer Tastatur-Hook als der eigene Hook des Skripts installiert war.</p>
<p>Behoben: Der Symbol-Lader bevorzugt nun eine höhere Bittiefe, wenn mehrere Bitmaps gleicher Größe vorhanden sind.</p>
<p>Behoben: SendInput konnte LCtrl nicht loslassen, wenn es bereits RAlt losgelassen hatte und das Layout kein AltGr hatte.</p>
<p>Behoben: Taste-Oben-Hotkeys werden nicht mehr ausgelöst, wenn die Taste nach einer Modifikatoränderung wiederholt gedrückt wird. Zum Beispiel sollte <code>F1::Send "{Ctrl down}"</code> die Ausführung von <code>F1 up::</code> erlauben, wenn die Taste losgelassen wird, obwohl Ctrl unten ist, aber erlaubte es nicht nach einer Tastenwiederholung.</p>
<p>Behoben: Eine Fehlermeldung bezog sich auf #HotIf statt auf #IfWin. [PR #327]</p>
<p>Behoben: OwnProps übersprang fälschlicherweise Eigenschaften mit optionalen Parametern.</p>
<p>Behoben: Inkonsistentes Verhalten von geklonten dynamischen Eigenschaften.</p>
<ul>
  <li>OwnProps, das keine geklonten Eigenschaften mit Pflichtparametern überspringt.</li>
  <li>Parameter, die nicht rekursiv an parameterlose Eigenschaften übergeben werden (d.h. damit <code>a.b[c]</code> als <code>(a.b)[c]</code> ausgewertet werden kann).</li>
</ul>
<p>Behoben: SysGetIPAddresses verursacht keinen kritischen Fehler mehr, wenn das Netzwerk-Subsystem nicht funktionsfähig ist, z.B. im abgesicherten Modus von Windows.</p>
<p>Geändert: ControlGetFocus gibt nun 0 zurück, wenn der Fokus nicht ermittelt werden kann, z.B. wenn ein Konsolenfenster aktiv ist.</p>

<h2 id="v2.0.11">2.0.11 - 23. Dezember 2023</h2>
<p>Hinzufügt: Workaround für das erste angezeigte Menü, das in Windows 10 keine Tastatureingaben akzeptierte.</p>
<p>Behoben: Die <a href="lib/Gui.htm#Add">Add-Methode (Gui)</a> unterstützt nun die ShortDate-Option für DateTime-Steuerelemente.</p>
<p>Behoben: Referenzzählungsfehler bei mehrstufiger Funktionsverschachtelung.</p>
<p>Behoben: <code>#Include &lt;x&gt;</code> verursachte einen Ladezeitabsturz, wenn es innerhalb einer Funktion verwendet wurde.</p>
<p>Behoben: <code>ListView.Opt("NoSort")</code>.</p>
<p>Behoben: Ein Speicherleck beim Klonen eines Objekts ohne eigene Eigenschaften.</p>
<p>Behoben: #Include und FileInstall (nicht kompiliert) vergleichen Dateinamen nun <a href="https://learn.microsoft.com/windows/win32/intl/handling-sorting-in-your-applications#sort-strings-ordinally">ordinal</a>, nicht linguistisch.</p>

<h2 id="v2.0.10">2.0.10 - 24. September 2023</h2>
<p>Behoben: Kein Absturz mehr, wenn ein benannter Funktions-Hotkey nach #HotIf verwendet wird.</p>
<p>Behoben: Direkt geschriebene Zahlen, die mit einem Punkt enden, bewirken keine Zeilenfortsetzung mehr.</p>
<p>Behoben: Vorherige Inkrementierung/Dekrementierung funktioniert nun auch mit verketteten Array-Indexierungen.</p>
<p>Behoben: OnNotify/OnCommand wendete Styles an, die nur für OnEvent gelten.</p>
<p>Behoben: FileExist/DirExist gab Handles nicht frei, wenn <code class="no-highlight">LeeresVerz\*</code> verwendet wird.</p>
<p>Behoben: DirExist gab Handles nicht frei, wenn nur Dateien übereinstimmen.</p>

<h2 id="v2.0.9">2.0.9 - 17. September 2023</h2>
<p>Behoben: Stapelung von Hotstrings mit der X-Option.</p>
<p>Behoben: Debugger listet nun lokale Variablen auf, wenn sich die Funktion am Ende des Stapels befindet.</p>
<p>Behoben: Gui-Threads werden nun im Aufrufstapel des Debuggers angezeigt.</p>
<p>Behoben: Einige &amp;/ByRef-Kombinationen, die einen Stapelüberlauf in ExitApp verursachten.</p>

<h2 id="v2.0.8">2.0.8 - 11. September 2023</h2>
<p>Behoben: ByRef-Parameter weisen der VarRef des Aufrufers nicht mehr fälschlicherweise den Standardwert zu, wenn ungesetzt.</p>
<p>Behoben: Einige Probleme mit unterdrückten Alt/Strg/Umschalt/Win-Hotkeys, wie zum Beispiel:</p>
<ul>
  <li><code>*LCtrl::</code> blockierte LCtrl vom aktiven Fenster, aber das Senden von Alt-Tastenkombinationen würde fehlschlagen, weil das System denkt, dass Ctrl unten ist, und daher WM_KEYDOWN statt WM_SYSKEYDOWN senden würde.</li>
  <li><code>*LAlt::</code> hat das System dazu veranlasst, alle vorherigen <code class="no-highlight">{LAlt DownR}</code> zu vergessen, sodass sich eine Neubelegung wie z.B. <code>LCtrl::LAlt</code> nicht korrekt verhält, wenn LAlt physisch unten ist, auch wenn LAlt unterdrückt wurde.</li>
  <li>Andere potenzielle Probleme, bei denen das Low-Level-Tracking einer Modifikatortaste durch das System nicht mit dem logischen Zustand übereinstimmt.</li>
</ul>
<p>Behoben: Einige Probleme bzgl. Fortsetzungsbereiche:</p>
<ul>
  <li>Escapesequenzen in der Join-Option wurden doppelt übersetzt, was dazu führte, dass <code class="no-highlight">````</code> zu einem statt zwei direkt geschriebenen <code class="no-highlight">`</code> wurde, <code class="no-highlight">``n</code> zu einem Zeilenvorschub wurde, usw.</li>
  <li><code class="no-highlight">`"</code> oder <code class="no-highlight">`'</code> erzeugten ein direkt geschriebenes umgekehrtes Häkchen und beendeten die Zeichenkette, anstatt ein direkt geschriebenes Anführungszeichen zu erzeugen, wenn der Fortsetzungsbereich in Anführungszeichen desselben Typs gesetzt ist und nicht die <code class="no-highlight">`</code>-Option hat.</li>
</ul>
<p>Optimiert: Das automatische Escaping von Anführungszeichen und umgekehrten Häkchen in Fortsetzungsbereichen.</p>
<p>Behoben: breakpoint_list (Debugger) gab Duplikate bei Zeilen zurück, die Fat-Arrow-Funktionen enthalten.</p>
<p>Behoben: <code class="no-highlight">+BackgroundDefault</code> konnte die BackColor-Eigenschaft von Gui nicht überschreiben.</p>

<h2 id="v2.0.7">2.0.7 - 2. September 2023</h2>
<p>Behoben: Bei MouseClickDrag können nun X1 und Y1 weggelassen werden.</p>
<p>Behoben: Maus-AltTab-Hotkeys unterdrückten nicht die Ausführung eines Präfix-Hotkeys, z.B. <code>1::</code> für <code>1 &amp; WheelDown::AltTab</code>. (fehlerhaft seit v2.0.4)</p>
<p>Behoben: Hook-Hotkeys erkannten keine Modifikatoren, die mit SendInput nach unten gedrückt wurden.</p>
<p>Behoben: A_AhkPath ist nun nicht mehr auf die Groß-/Kleinschreibung oder das Format der Befehlszeile angewiesen, die/das zum Starten des Prozesses verwendet wird.</p>
<p>Behoben: Heap-Korruption bei einer Fenstersuche mit Gruppen. (fehlerhaft seit v2.0.6)</p>
<p><strong>Launcher</strong></p>
<p>Behoben: #Requires wurde nicht erkannt, wenn dahinter ein anderer Kommentar als <code>; prefer <i>xxx</i></code> stand. (fehlerhaft seit v2.0.6)</p>
<p>Behoben: Syntaxerkennung fehlinterpretierte mehrzeilige automatisch-ersetzende Hotstrings.</p>
<p><strong>Window Spy</strong></p>
<p>Geändert: Window Spy verwendet nun die Schriftart Segoe UI mit der Schriftgröße 9, in Übereinstimmung mit Dash.</p>

<h2 id="v2.0.6">2.0.6 - 30. August 2023</h2>
<p>Behoben: Mehrdeutigkeiten bei COM-Aufrufen, z.B. wenn <code>x.y</code> als <code>x.y()</code> fungiert.</p>
<p>Behoben: Haltepunkte bei Kontrollanweisungen wurden "getroffen", wenn eine Fat-Arrow-Funktion in der Zeile darunter zurückkehrt.</p>
<p>Behoben: <code>Default :</code> verbindet sich nicht mehr mit der Zeile darunter. Dies verhinderte die Verwendung von <code>Default :</code> am Ende eines Switch-Blocks und führte dazu, dass jede nachfolgende Zeile die Zeilennummer des Defaults erhielt.</p>
<p>Optimiert: ProcessGetPath, ProcessSetPriority und ProcessClose durchlaufen nicht mehr alle Prozesse, wenn eine gültige PID angegeben ist, auch wenn der Zugriff auf den Prozess verweigert wird.</p>
<p>Behoben: <code>LWin::Alt</code> konnte nicht zum Aktivieren einiger Alt-Tastenkombinationen verwendet werden.</p>
<p>Behoben: TypeError, ausgelöst durch <code>x is y</code>, zeigt nun "Class" statt "Object" an.</p>
<p>Behoben: FensterTitel unterstützt nun Kriterien länger als 1023 Zeichen.</p>
<p>Behoben: Es gab Probleme, wenn <code>&amp;ref</code> auf verschiedene Aliase derselben Variable angewendet wurde.</p>
<p>Behoben: Bestimmte Standardausdrücke von optionalen Parametern (außer einfache direkt geschriebene Werte) verhinderten die Verwendung von Assume-Global/Assume-Static.</p>

<h2 id="v2.0.5">2.0.5 - 12. August 2023</h2>
<p>Behoben: Ein Speicherleck, das durch falsche Referenzzählung verursacht wurde, wenn ein Objekt via COM enumeriert wird. [PR# 325]</p>
<p>Behoben: Interne Aufrufe von __Enum rufen nun nicht mehr __Call auf.</p>
<p>Behoben: Fehlermeldungen bezüglich Parameter #65535.</p>
<p>Behoben: Falsche IEnumVARIANT-Rückgabeanzahl.</p>
<p>Behoben: Download löste OSError(0) aus, obwohl der Fehler ungleich Null sein sollte.</p>
<p>Behoben: LV.Add/Insert/Modify verursachte einen Absturz, wenn die Mindestanzahl von Parametern übergeben wird.</p>
<p>Behoben: Stacktraces ignorieren nun __new-Aufrufe für Error-Unterklassen.</p>

<h2 id="v2.0.4">2.0.4 - 3. Juli 2023</h2>
<p>Geändert: Die Reload-Schaltfläche in Fehler-/Warndialogfenstern schließt das Fenster nun explizit, auch dann, wenn die aktuelle Skriptinstanz nicht terminiert ist.</p>
<p>Entfernt: Eine Optimierung für <code>return var</code>, die dazu führte, dass die Variable beim Zugriff innerhalb eines <code>finally</code>-Blocks leer erschien.</p>
<p>Behoben: Default (Switch) erlaubt nun Leerzeichen vor dem Doppelpunkt.</p>
<p>Behoben: Array.Prototype.RemoveAt gibt nun den entfernten Wert zurück, wenn Länge mit <code>unset</code> oder <code>var?</code> "explizit weggelassen" wird.</p>
<p>Behoben: Kein Absturz mehr, wenn ein ComObject an eine For-Schleife übergeben wird, bei der nur die zweite Variable angegeben ist.</p>
<p><strong>Änderungen von v1.1.37.00 und v1.1.37.01 übernommen:</strong></p>
<p>Geändert: COM-Methodenaufrufe und -Eigenschaftsaufrufe übergeben große Integer nun als VT_I8, nicht mehr als VT_R8 (Floating-Point), um den ursprünglichen Typ und die Genauigkeit beizubehalten. Integer im 32-Bit-Bereich werden weiterhin als VT_I4 übergeben.</p>
<p>Hinzugefügt: Unterstützung für Multi-Variablen-Enumeratoren (For-Schleifen) mit IDispatch-gewrappten AutoHotkey-Objekten. Sowohl das Skript, das das Objekt indirekt aufruft, als auch das Objekt selbst müssen mit einer unterstützten AutoHotkey-Version ausgeführt werden.</p>
<p>Behoben: Weggelassene Parameter erhalten nun ihre Standardwerte und nicht mehr den Marker "optionales Argument", wenn eine AutoHotkey-Methode über IDispatch (COM) aufgerufen wird. Die umgekehrte Übersetzung wurde bereits in früheren Versionen beim <em>Aufruf</em> von COM-Methoden durchgeführt.</p>
<p>Behoben: <code>VerCompare(a, "&gt;" b)</code> und geringfügige Reduzierung der Codegröße.</p>
<p>Behoben: AltTab-bezogene Ladezeitfehler sind nun konsistent mit anderen Fehlern.</p>
<p>Behoben: Fehler, die durch einen ComObject-Wrapper ausgelöst werden, wurden nicht korrekt weitergegeben, wenn dieser über ein Objekt/COM aufgerufen wird.</p>
<p>Behoben: Das Hotkey-GUI-Steuerelement erlaubt nun das Setzen der Symbole <code class="no-highlight">^</code>, <code class="no-highlight">!</code> und <code class="no-highlight">+</code> als Hotkeys.</p>
<p>Behoben: Das Hotkey-Steuerelement inkludiert nun Modifikatoren, wenn sein Wert auf ein Symbol gesetzt ist.</p>
<p>Behoben: Mögliches Fehlverhalten von InputHook.KeyOpt() bei einzelnen Zeichen.</p>
<ul>
<li>Die Entfernung einer Option hat potenziell keinen Einfluss auf den entsprechenden SC.</li>
<li>Optionen, die potenziell auch auf sc000 angewendet werden.</li>
</ul>
<p>Behoben: Ein Bug bei benutzerdefinierten Kombos, bei dem ein Satz von Hotkeys wie <code>a &amp; b::</code>, <code>a::</code> und <code>a up::</code> das Loslassen von <kbd>a</kbd> nicht unterdrücken konnte, wenn <code>a::</code> allein mit #HotIf deaktiviert wurde.</p>
<p>Behoben: Ein Bug, bei dem ein Taste-Unten-Ereignis korrekt durch einen Hotkey unterdrückt wurde, aber das Senden eines zusätzlichen Taste-Unten mit SendLevel &gt; 0 verhinderte, dass das nachfolgende Taste-Oben unterdrückt wurde, selbst wenn das gesendete Ereignis aufgrund von #InputLevel ignoriert wurde.</p>
<p>Behoben: <code>a &amp; b up::</code> unterdrückte <kbd>b</kbd> nicht, wenn <code>a &amp; b::</code> vorhanden, aber durch #HotIf deaktiviert ist.</p>
<p>Behoben: Hotkeys wurden aufgrund einer Race Condition nicht ausgelöst. Wenn ein Modifikator-Hotkey wie <code>~*RWin::</code> zu früh Send oder GetKeyState aufruft, kann das System melden, dass RWin nicht unten ist, wodurch der Modifikatorstatus des Hooks "korrigiert" wird und Hotkeys fälschlicherweise ausgelöst oder nicht ausgelöst werden. Dies trat wahrscheinlich nur auf, wenn ein anderer Tastatur-Hook vor dem Hook des Skripts installiert wurde, da in diesem Fall das System den Status der Tasten nicht aktualisiert, bis der Thread des anderen Hooks fortgesetzt wird und zurückkehrt.</p>
<p>Behoben: Hotstrings verwenden nun das Zuletzt Gefundene Fenster von #HotIf.</p>
<p>Behoben: Der Versuch, den Tastatur- oder Maus-Hook neu zu installieren, schlug fehl, wenn das System den Hook automatisch deinstalliert hat. Nach wie vor müssen bestimmte Bedingungen erfüllt sein, bevor ein solcher Versuch unternommen werden kann.</p>
<p>Optimiert: Speicherreservierung von zwischengespeicherten COM-Eigenschaftsnamen für internes IDispatch.</p>
<p>Code überarbeitet: Unterstützung einer Build-Konfiguration für AutoHotkey als DLL.</p>

<h2 id="v2.0.3">2.0.3 - 19. Juni 2023</h2>
<p>Behoben: <code>Hotkey("a", "b")</code> verwendet nun die Originalfunktion von "b", nicht "a". [PR #318]</p>
<p>Behoben: FileSetAttrib stürzt nicht mehr ab, wenn es in einer dateilesenden Schleife verwendet wird. [PR #323]</p>
<p>Behoben: Fehler bzgl. doppelter Gui-Steuerelement-Namen brechen den Thread nun korrekt ab.</p>
<p>Behoben: Die Range-Option von DateTime/MonthCal wendete nicht den Minimalwert an.</p>
<p>Behoben: <code>s[x] =&gt; x</code> und andere einzeilige Eigenschaften, die mit "s" beginnen.</p>
<p>Behoben: Bug beim Löschen eines Haltepunkts auf einer static-Zeile, die <code>=&gt;</code> enthält.</p>
<p>Behoben: Das Button-Steuerelement wurde nicht zur Standardschaltfläche, wenn es angeklickt wurde.</p>
<p>Behoben: PixelSearch macht X nun leer, wenn das Pixel nicht gefunden wird.</p>
<p>Behoben: Ein Hotstring mit Escapesequenz führte dazu, dass die nächste Zeile übersprungen wurde.</p>
<p>Behoben: FensterTitel ignorierte Zeichen 1, wenn "ahk_" bei Zeichen 2 ist.</p>
<p>Behoben: Neubelegung verwendet nun den rechten Modifikator, der gerade unten ist. Zum Beispiel wird <code>+x::+y</code> nicht mehr RShift loslassen, um LShift zu drücken.</p>
<p>Geändert: Fehlermeldung für <code>a == b &amp;&amp; c()</code> und ähnliche Fälle, um Hinweise auf das Legacy-<code>=</code> zu vermeiden.</p>
<p>Verbessert: Fehlermeldung für einige Fälle von unbeabsichtigter Zeilenfortsetzung.</p>
<p>Behoben: Reservierte Wörter können nun als Methodennamen verwendet werden, wie dokumentiert.</p>
<p>Behoben: Doppelte OnMessage-Aufrufe für einige Tastaturmeldungen.</p>
<p>Behoben: Ineinander referenzierte Closures wurden vorzeitig gelöscht.</p>
<p>Behoben: SetFont erlaubt nun Leerzeichen am Anfang im Options-Parameter.</p>
<p>Behoben: Senden von <code class="no-highlight">{ASC nnnn}</code>.</p>
<p>Behoben: <code>a.base := a</code> löst nun einen Fehler aus.</p>
<p>Behoben: <code>x.y := unset</code> führte zu Abstürzen oder undefiniertem Verhalten.</p>
<p>Behoben: GuiControl.Move() ist nun relativ zum Clientbereich der GUI, selbst wenn die GUI nicht übergeordnet ist.</p>
<p>Behoben: Menu Add überschrieb Menüpunkte, die mit Menu Insert angefügt wurden.</p>
<strong>Launcher</strong>
<p>Dash ausführen, anstatt die alte Willkommensseite in der Dokumentation anzuzeigen, wenn es ohne Parameter ausgeführt wird.</p>
<p>Behoben: Die Versionsauswahl-GUI verursachte einen Fehler, wenn Enter gedrückt wurde, ohne eine Version auszuwählen. [PR UX/#4]</p>
<p>Fehler unterdrücken, wenn geprüft wird, ob eine fehlende Version heruntergeladen werden kann.</p>
<p>Behoben: Die Aufforderung zum Herunterladen einer fehlenden Version zeigt nicht mehr das UAC-Schild an, wenn UAC deaktiviert ist.</p>
<p>Behoben: Probleme bei der Interpretation von #Requires.</p>
<ul>
<li>Unterstützung für das Weglassen des Präfixes "v".</li>
<li>Unterstützung für die Operatoren (<code class="no-highlight">&gt; &gt;= &lt; &lt;= =</code>).</li>
<li>Unterstützung für Versionen mit nur einer Ziffer.</li>
</ul>
<strong>Installation</strong>
<p>Behoben: Standard-Installationsverzeichnis für die Befehlszeilenverwendung.</p>
<p>Die Startmenüverknüpfung wurde von "AutoHotkey" in "AutoHotkey Dash" umbenannt.</p>
<p>Behoben: EnableUIAccess bei der Ausführung als SYSTEM.</p>
<p>Behoben: EnableUIAccess verifiziert nun den Privatschlüssel bei der Auswahl eines Zertifikats.</p>
<strong>Dash</strong>
<p>Behoben: Launch Config GUI aktualisiert nun die Optionen "Run as administrator" und "Run with UI access".</p>
<p>Behoben: Nach-Oben/Unten-Pfeiltasten-Handhabung in der Launch Config GUI.</p>

<h2 id="v2.0.2">2.0.2 - 2. Januar 2023</h2>
<p>Behoben: Kurze DllCall-Arg-Typen und undefiniertes Verhalten bei ungültigen Typen.</p>
<p>Behoben: (Nicht-Zeichenketten-)Dateiversionsnummer bei AutoHotkey-Binärdateien.</p>
<p>Behoben: Parametertypfehler zeigen nun die richtige Parameternummer an.</p>

<h2 id="v2.0.1">2.0.1 - 1. Januar 2023</h2>
<p>Behoben: Func.IsOptional(1) gab manchmal 0 zurück, wo es nicht sollte.</p>
<p>Behoben: GUI-Ereignishandler-Funktionen lassen den Gui-Parameter nicht mehr weg, wenn die GUI ihr eigener Event-Sink ist.</p>
<p>Behoben: COM-Fehler zeigen nicht mehr "(null)" an, wenn keine Beschreibung verfügbar ist.</p>
<p>Behoben: ToolTips wurden manchmal an der falschen Stelle angezeigt.</p>
<p>Behoben: __Enum(unset) erlaubt nun eine zweite Variable für Array, Match und Gui.</p>
<p>Behoben: "#Include &lt;&gt;"-Fehlermeldungen zeigen nun "Script library" statt "Function library" an.</p>
<p>Behoben: Neue Threads konnten eine Meldungsüberprüfung mit Critical nicht verhindern.</p>
<p>Optimiert: Konvertierung von DllCall-Typnamen.</p>
<p>Optimiert: Triviale, aber effektive Optimierungen der Codegröße.</p>

<h2 id="Pre-Release">Pre-Release</h2>
<p>Einen Verlauf der Änderungen vor dem v2.0.0-Release finden Sie an folgenden Orten (beachten Sie jedoch, dass einige Änderungen inzwischen hinfällig sind):</p>
<ul>
  <li><a href="https://www.autohotkey.com/boards/viewtopic.php?f=24&t=110696">v2.0 Release Candidates</a></li>
  <li><a href="https://www.autohotkey.com/boards/viewtopic.php?f=24&t=95688">v2.0-beta Releases</a></li>
  <li><a href="https://www.autohotkey.com/boards/viewtopic.php?f=37&t=2120">v2.0-alpha Releases</a></li>
</ul>
</body>
</html>