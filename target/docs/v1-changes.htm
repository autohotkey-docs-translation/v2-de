<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Änderungen von v1.0 bis v1.1 | AutoHotkey v2</title>
<meta name="description" content="Änderungen zwischen v1.0 und v1.1." />
<meta name="ahk:equiv-v1" content="Compat.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>
<body>
<h1>Änderungen von v1.0 bis v1.1</h1>

<p>Dieses Dokument beschreibt Änderungen zwischen AutoHotkey v1.0 und v1.1, die dazu führen können, dass sich Skripte anders verhalten, und deshalb beim Lesen oder Aktualisieren von altem Code beachtet werden sollten. Siehe auch: <a href="v2-changes.htm">Änderungen von v1.1 bis v2.0</a>.</p>
<p>AutoHotkey v1.1 ist auch unter den Namen "AutoHotkey_L" bekannt. AutoHotkey v1.0 trägt seit einiger Zeit den Namen "AutoHotkey Basic". Es gibt einige ältere Versionen von AutoHotkey_L, die eine Versionsnummer im Format 1.0.* haben, daher verwendet dieses Dokument die Namen der beiden AutoHotkey-Zweige, um Missverständnissen vorzubeugen.</p>

<h2 id="toc">Inhaltsverzeichnis</h2>
<p>Hohe Auswirkung:</p>
<ul>
  <li><a href="#Syntax_Errors">Bestimmte Syntaxfehler werden nicht länger toleriert</a></li>
  <li><a href="#FileRead">FileRead könnte fehlerhafte Binärdaten zurückgeben</a></li>
  <li><a href="#Names">Variablen- und Funktionsnamen dürfen keine [, ] oder ? enthalten</a></li>
  <li><a href="#DPIScale">DPI-Skalierung ist standardmäßig für GUIs aktiviert</a></li>
</ul>
<p>Mittlere Auswirkung:</p>
<ul>
  <li><a href="#Transform">Der <em>Unicode</em>-Unterbefehl von Transform ist in Unicode-Versionen nicht verfügbar</a></li>
  <li><a href="#Default_Script">AutoHotkey.ahk wird anstelle von AutoHotkey.ini gestartet</a></li>
  <li><a href="#SetFormat">SetFormat, Integer, <strong>H</strong> ist Groß-/Kleinschreibung-sensitiv</a></li>
  <li><a href="#LastError">A_LastError wird von noch mehr Befehlen gesetzt</a></li>
  <li><a href="#MsgBox">MsgBox-Befehle behandeln Kommas konsistenter</a></li>
  <li><a href="#GuiOwner">Gui +Owner überschreibt zusätzliche Styles</a></li>
  <li><a href="#Tilde">Tilde (~) beeinflusst das Verhalten benutzerdefinierter Modifikatortasten</a></li>
  <li><a href="#ComboUpDown"><code>x &amp; y::</code> bewirkt, dass <code>x::</code> und <code>x up::</code> ausgelöst werden, sobald x losgelassen wird</a></li>
</ul>
<p>Geringe Auswirkung:</p>
<ul>
  <li><a href="#IfIs"><em>If Var is [not] Typ</em> ignoriert standardmäßig die Sprach- und Regionseinstellungen des Systems</a></li>
  <li><a href="#Window_Groups">GroupActivate setzt ErrorLevel; <em>Label</em> von GroupAdd funktioniert anders</a></li>
  <li><a href="#Run">Run und RunWait interpretieren <em>Ziel</em> unterschiedlich</a></li>
  <li><a href="#ControlZ">STRG+Z wird nicht als End-of-File (Dateiende) interpretiert</a></li>
  <li><a href="#IsCompiled">A_IsCompiled ist immer schreibgeschützt</a></li>
  <li><a href="#DllCall">DllCall verwendet häufiger das Suffix A oder W</a></li>
</ul>

<span id="Validation"></span><h2 id="Syntax_Errors">Syntaxfehler</h2>
<p>Bestimmte Syntaxfehler, die bei AutoHotkey Basic toleriert wurden, sind bei AutoHotkey_L nicht mehr erlaubt. Viele dieser Fehler können leicht korrigiert werden, sobald sie entdeckt werden. Einige Fehler werden beim Laden des Skripts erkannt und müssen korrigiert werden, bevor das Skript überhaupt ausgeführt werden kann. Andere Fehler werden nur ausgelöst, wenn bestimmte Bedingungen während der Skriptausführung erfüllt sind.</p>
<p>Die Fehlererkennung in v2.0 ist generell robuster, und da es zahlreiche Änderungen in der Verwendung gab, die über die reine Fehlererkennung und -behandlung hinausgehen, werden die Unterschiede in der Fehlererkennung zwischen v1.0 und v1.1 hier nicht aufgeführt. Diese Informationen finden Sie in der v1.1-Dokumentation.</p>

<h2 id="FileRead">FileRead</h2>
<p>In bestimmten Fällen übersetzt <a href="lib/FileRead.htm#Binary">FileRead</a> den Text in eine andere Codepage und kann daher fehlerhafte Binärdaten ausgeben. Um das in v2.0 zu verhindern, fügen Sie die <code class="no-highlight">RAW</code>-Option hinzu oder nutzen Sie stattdessen <a href="lib/FileOpen.htm">FileOpen</a>.</p>

<h2 id="Names">Variablen- und Funktionsnamen</h2>
<p>Die Zeichen <code>[</code>, <code>]</code> und <code>?</code> sind für die Nutzung in <a href="Language.htm#expressions">Ausdrücken</a> reserviert und daher nicht mehr in Variablennamen gültig. Folglich benötigt <code>?</code> (das in <a href="Variables.htm#ternary">ternären Operationen</a> benutzt wird) kein Leerzeichen mehr auf beiden Seiten. Code für v1.0, der diese Zeichen in einem Variablennamen verwendet, würde in v1.1 anders interpretiert und daher möglicherweise nicht als Fehler erkannt werden.</p>
<p>Siehe auch: <a href="Language.htm#operators-for-objects">Operatoren für Objekte</a>, <a href="v2-changes.htm#names">Namen (Änderungen von v1.1 bis v2.0)</a></p>

<h2 id="DPIScale">DPI-Skalierung</h2>
<p>Die <a href="lib/Gui.htm#DPIScale">DPI-Skalierung</a> ist standardmäßig für Skript-GUIs aktiviert, um sicherzustellen, dass sie gemäß den <a href="Variables.htm#ScreenDPI">systeminternen DPI-Einstellungen</a> skaliert werden. Wenn sie aktiviert ist und wenn die DPI-Einstellung des Systems ungleich 96 (100&nbsp;%) ist, sind Positionen und Größen, die von Gui-Methoden/Eigenschaften akzeptiert oder zurückgegeben werden, nicht mit anderen Funktionen kompatibel. Die DPI-Skalierung kann mit <code>MeineGui.Opt("-DPIScale")</code> deaktiviert werden.</p>

<h2 id="Transform">Transform</h2>
<p>Einige Unterbefehle von <i>Transform</i> wurden geändert oder deaktiviert:</p>
<ul>
  <li><em>Transform Unicode</em> kann nur in den ANSI-Versionen von AutoHotkey verwendet werden. Unicode-Text kann mit einer regulären Zuweisung an die Zwischenablage übergeben werden. Siehe auch: <a href="lib/StrPut.htm">StrPut</a>/<a href="lib/StrGet.htm">StrGet</a>.</li>
  <li><em>Transform HTML</em> unterstützt zusätzliche Features in den Unicode-Versionen von AutoHotkey_L.</li>
</ul>
<p><em>Transform</em> selbst wurde in v2.0 entfernt.</p>

<h2 id="Default_Script">Standardskript</h2>
<p>Startet man AutoHotkey_L ohne Angabe eines Skripts, wird standardmäßig eine AHK-Datei anstelle einer INI-Datei geladen. Der Name dieser Datei basiert auf dem Dateinamen der aktuellen EXE-Datei. Weitere Informationen finden Sie unter <a href="Scripts.htm#defaultfile">Skriptdateiname</a>.</p>

<h2 id="SetFormat">SetFormat, Integer[Fast], H</h2>
<p>Verwendet man ein großes H, werden die Hexadezimalzeichen A-F auch in Großbuchstaben sein. AutoHotkey Basic erzeugt hingegen immer Kleinbuchstaben.</p>
<p><em>SetFormat</em> selbst wurde in v2.0 entfernt. <code>Format("0x{:x}", n)</code> erzeugt die Kleinbuchstaben a-f, während <code>Format("0x{:X}", n)</code> die Großbuchstaben A-F erzeugt.</p>

<h2 id="LastError">A_LastError</h2>
<p>Die folgenden Befehle setzen nun <a href="Variables.htm#LastError">A_LastError</a>, um das Debuggen zu unterstützen: FileAppend, FileRead, FileReadLine, FileDelete, FileCopy, FileMove, FileGetAttrib/Time/Size/Version, FileSetAttrib/Time, FileCreateDir, RegRead, RegWrite, RegDelete. Sobald man einen dieser Befehle benutzt, wird der vorherige Wert von A_LastError überschrieben.</p>
<p>In v2.0 wird A_LastError auch von IniRead, IniWrite und IniDelete gesetzt.</p>

<h2 id="MsgBox">MsgBox</h2>
<p>In v1.0 und v1.1 hatte MsgBox eine "smarte Kommabehandlung", d.h. Kommas in einem anführungszeichenlosen Text mussten nicht mit einem Escapezeichen versehen werden. Diese Behandlung unterschied sich geringfügig zwischen den beiden Versionen und muss möglicherweise in sehr seltenen Fällen beim Lesen von v1.0-Code berücksichtigt werden. Weitere Informationen finden Sie in der v1.1-Dokumentation. AutoHotkey v2.0 verwendet ausschließlich die Ausdruckssyntax und benötigt daher keine spezielle Kommabehandlung.</p>

<h2 id="GuiOwner">Gui +Owner</h2>
<p>Wendet man die <a href="lib/Gui.htm#Owner">+Owner</a>-Option auf eine GUI an, wird zusätzlich der WS_CHILD-Style entfernt und der WS_POPUP-Style gesetzt. Diese Änderung kann dazu führen, dass Skripte, die das übergeordnete Fenster einer GUI mit <code class="no-highlight">+Owner</code> setzen, <em>nachdem</em> die Styles gesetzt wurden, nicht mehr ordnungsgemäß funktionieren.</p>

<h2 id="Tilde">Tilde-Präfix und benutzerdefinierte Kombinationen</h2>
<p>In v1.1.14+ beeinflusst das <a href="Hotkeys.htm#Tilde">Tilde-Präfix</a> das Verhalten einer Taste, die als Modifikatortaste in einer benutzerdefinierten Tastenkombination verwendet wird.</p>

<h2 id="ComboUpDown">Benutzerdefinierte Kombinationen und Taste-Unten/Oben-Hotkeys</h2>
<p>Wenn sowohl ein Taste-Unten- als auch Taste-Oben-Hotkey für eine benutzerdefinierte Modifikatortaste ohne Tilde-Präfix definiert sind, werden beide beim Loslassen der Taste ausgelöst. Zum Beispiel würde <code>x &amp; y::</code> bewirken, dass <code>x::</code> und <code>x up::</code> ausgelöst werden, wenn x losgelassen wird. Früher wurde <code>x::</code> dabei nie ausgelöst.</p>

<h2 id="IfIs">If Var is [not] Typ</h2>
<p><em>if Var is [not] Typ</em> identifizierte in v1.0 standardmäßig bestimmte ASCII-fremde (ggf. sprachspezifische) Zeichen als alphabetisch/groß/klein, während dies in v1.1 nur dann der Fall war, wenn <em>StringCaseSense Locale</em> verwendet wurde. Entsprechend identifizieren die <a href="lib/Is.htm">Is<em>Typ</em></a>-Funktionen in v2.0 ASCII-fremde Zeichen nur dann als alphabetisch, wenn der zweite Parameter <code>"Locale"</code> ist.</p>

<h2 id="Window_Groups">Fenstergruppen</h2>
<p><a href="lib/GroupActivate.htm">GroupActivate</a> setzt ErrorLevel nur in v1.1, nicht in v1.0 oder v2.0.</p>
<p>Der <em>Label</em>-Parameter von <a href="lib/GroupAdd.htm">GroupAdd</a> verhält sich in v1.0 anders als in v1.1, wurde aber in v2.0 entfernt.</p>

<h2 id="Run">Run / RunWait</h2>
<p>AutoHotkey_L enthält Verbesserungen hinsichtlich dessen, wie <a href="lib/Run.htm">Run</a> und <a href="lib/Run.htm">RunWait</a> ihren <em>Ziel</em>-Parameter interpretieren. Diese Verbesserungen bieten neue Möglichkeiten, die früher nicht möglich waren, können aber bestehende Skripte beeinträchtigen, die unter AutoHotkey Basic liefen. Das neue Verhalten äußert sich wie folgt:</p>
<ul>
  <li>Wenn <i>Ziel</i> mit einem Anführungszeichen beginnt, wird alles bis zum nächsten Anführungszeichen als Aktion, üblicherweise eine EXE-Datei, interpretiert.</li>
  <li>Andernfalls wird die erste Teilzeichenkette, die mit einem Leerzeichen endet und entweder eine vorhandene Datei ist oder auf .exe, .bat, .com, .cmd oder .hta endet, als Aktion interpretiert. Dadurch können Dateitypen wie beispielsweise .ahk, .vbs oder .lnk beliebige Parameter akzeptieren, während "bekannte" EXE-Dateien wie wordpad.exe weiterhin ohne absoluten Pfad gestartet werden können (wie es früher der Fall war).</li>
</ul>

<h2 id="ControlZ">STRG+Z</h2>
<p><a href="lib/LoopRead.htm">Loop Read</a> und <a href="lib/File.htm#ReadLine">File.ReadLine</a> interpretieren das Zeichen <kbd>Strg</kbd>+<kbd>Z</kbd> (0x1A) nicht länger als Dateiendemarke (end-of-file marker). Jedes <kbd>Strg</kbd>+<kbd>Z</kbd> wird unverändert geladen, selbst wenn es ganz am Ende einer Datei steht. <a href="lib/FileRead.htm">FileRead</a> ignoriert dieses Zeichen bereits und ist daher von diesem Problem nicht betroffen.</p>

<h2 id="IsCompiled">A_IsCompiled</h2>
<p>Wenn das Skript nicht kompiliert wurde, ist <a href="Variables.htm#IsCompiled">A_IsCompiled</a> definiert, auch dann, wenn das Skript nicht kompiliert wurde; dessen Wert ist <code>""</code> in v1.1 und <code>0</code> in v2.0. Früher blieb sie undefiniert, wodurch Zuweisungen wie <code>A_IsCompiled := 1</code> in einem unkompilierten Skript möglich waren. Nun wird sie in jedem Fall als schreibgeschützte interne Variable behandelt.</p>

<h2 id="DllCall">DllCall</h2>
<p>Wenn der an <a href="lib/DllCall.htm">DllCall</a> übergebene Funktionsname nicht aufgelöst werden kann, fügt AutoHotkey_L automatisch ein "A" (ANSI) oder "W" (Unicode) an den Funktionsnamen an, egal welche DLL angegeben wurde. AutoHotkey Basic hingegen fügt das Suffix "A" nur bei Funktionen in User32.dll, Kernel32.dll, ComCtl32.dll oder Gdi32.dll an.</p>

</body>
</html>