<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Binärkompatibilität | AutoHotkey v2</title>
<meta name="description" content="Dieses Dokument enthält einige Themen, die manchmal wichtig sind, wenn externe Bibliotheken verwendet werden oder Meldungen an ein Steuerelement oder Fenster gesendet werden." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Binärkompatibilität</h1>

<p>Dieses Dokument enthält einige Themen, die manchmal wichtig sind, wenn externe Bibliotheken verwendet werden oder Meldungen an ein Steuerelement oder Fenster gesendet werden.</p>

<ul>
  <li><a href="#Format">Unicode vs. ANSI</a>
    <ul>
      <li><a href="#Buffer">Puffer</a></li>
      <li><a href="#DllCall">DllCall</a></li>
      <li><a href="#NumPutGet">NumPut / NumGet</a></li>
    </ul>
  </li>
  <li><a href="#ptr">Pointer-Größe</a></li>
</ul>

<h2 id="Format">Unicode vs. ANSI</h2>
<p class="note"><strong>Hinweis:</strong> Dieser Abschnitt baut auf Themen auf, die in anderen Teilen der Dokumentation behandelt werden: <a href="Concepts.htm#strings">Zeichenketten (Strings)</a>, <a href="Concepts.htm#string-encoding">Zeichenkettenkodierung</a>.</p>
<p>Innerhalb einer Zeichenkette (Textwert) ist der numerische Zeichencode und die Größe (in Byte) jedes einzelnen Zeichens von der <a href="Concepts.htm#string-encoding">Kodierung</a> der Zeichenkette abhängig. Solche Details sind in der Regel nur für Skripte interessant, die folgende Aktionen durchführen:</p>
<ul>
  <li>Zeichenketten via <a href="#DllCall">DllCall</a> an externe Funktionen übergeben.</li>
  <li>Zeichenketten via <a href="lib/PostMessage.htm">PostMessage</a> oder <a href="lib/SendMessage.htm">SendMessage</a> übergeben.</li>
  <li>Zeichenketten direkt via <a href="#NumPutGet">NumPut/NumGet</a> manipulieren.</li>
  <li>Pufferspeicher via <a href="#Buffer">Buffer</a> reservieren, um darin eine bestimmte Anzahl von Zeichen zu speichern.</li>
</ul>
<p>AutoHotkey v2 verwendet nativ Unicode (UTF-16), aber einige externe Bibliotheken oder Fenstermeldungen können ANSI-Zeichenketten erfordern.</p>
<p><strong>ANSI:</strong> Jedes Zeichen ist <strong>ein Byte</strong> groß (8 Bits). Zeichencodes über 127 sind abhängig von den Spracheinstellungen Ihres Systems (oder von der Codepage, die bei der Kodierung des Textes gewählt wurde, z.B. beim Schreiben in eine Datei).</p>
<p><strong>Unicode:</strong> Jedes Zeichen ist <strong>zwei Bytes</strong> groß (16 Bits). Zeichencodes sind durch das <a href="https://en.wikipedia.org/wiki/UTF-16">UTF-16-Format</a> definiert.</p>
<p class="Indent"><em>Semantischer Hinweis</em>: Technisch gesehen sind einige Unicode-Zeichen durch <i>zwei</i> 16-Bit-Codeeinheiten vertreten, ugs. "Ersatzzeichenpaar" (surrogate pair). Ebenso enthalten einige <a href="https://learn.microsoft.com/windows/win32/intl/code-pages">ANSI-Codepages</a> (ugs. <a href="https://learn.microsoft.com/windows/win32/intl/double-byte-character-sets">Doppelbyte-Zeichensätze</a>) einige Doppelbyte-Zeichen. Aus praktischen Gründen werden diese jedoch fast immer als zwei einzelne Einheiten behandelt (der Einfachheit halber als "Zeichen" bezeichnet).</p>

<h3 id="Buffer">Puffer</h3>
<p>Achten Sie bei der Reservierung eines Pufferspeichers via <a href="lib/Buffer.htm">Buffer</a> darauf, dass Sie die korrekte Anzahl von <em>Bytes</em> für die jeweils benötigte Kodierung angeben. Zum Beispiel:</p>
<pre>ansi_buf  := Buffer(Kapazität_in_Zeichen)
utf16_buf := Buffer(Kapazität_in_Zeichen * 2)</pre>
<p>Wenn eine ANSI- oder UTF-8-Zeichenkette mit <a href="lib/StrPut.htm">StrPut</a> in den Pufferspeicher geschrieben wird, sollten Sie keinesfalls <a href="lib/StrLen.htm">StrLen</a> zur Bestimmung der Puffergröße verwenden, da die ANSI- oder UTF-8-Länge von der nativen Länge (UTF-16) abweichen kann. Verwenden Sie stattdessen <a href="lib/StrPut.htm#ExEncoding">StrPut</a>, um die erforderliche Puffergröße zu berechnen. Zum Beispiel:</p>
<pre>required_bytes := StrPut(source_string, "cp0")
ansi_buf := Buffer(required_bytes)
StrPut(source_string, ansi_buf)</pre>

<h3 id="DllCall">DllCall</h3>
<p>Verwendet man den "Str"-Typ, handelt es sich um eine Zeichenkette im nativen Format des aktuellen Builds. Da einige Funktionen möglicherweise Zeichenketten in einem bestimmten Format benötigen oder zurückgeben müssen, stehen folgende Zeichenkettentypen zur Verfügung:</p>
<table class="info">
  <tr><th>&nbsp;</th><th class="center">Zeichengröße</th><th>C / Win32-Typen</th><th>Kodierung</th></tr>
  <tr><td class="Syntax center">WStr</td><td class="center">16-Bit</td><td>wchar_t*, WCHAR*, LPWSTR, LPCWSTR</td><td>UTF-16</td></tr>
  <tr><td class="Syntax center">AStr</td><td class="center">8-Bit</td><td>char*, CHAR*, LPSTR, LPCSTR</td><td>ANSI (die Standard-ANSI-Codepage des Systems)</td></tr>
  <tr><td class="Syntax center">Str</td><td class="center">--</td><td>TCHAR*, LPTSTR, LPCTSTR</td><td>Äquivalent zu <b>WStr</b> in AutoHotkey v2.</td></tr>
</table>
<p>Wenn "Str" oder "WStr" für einen Parameter verwendet wird, wird die Adresse der Zeichenkette an die Funktion übergeben. Bei "AStr" wird eine temporäre ANSI-Kopie der Zeichenkette erstellt und die Adresse dieser Kopie übergeben. Generell sollte "AStr" nicht für einen Ausgabeparameter verwendet werden, da der Pufferspeicher gerade groß genug für die Eingabezeichenkette ist.</p>
<p class="note"><b>Hinweis:</b> "AStr" und "WStr" können sowohl für die Parameter als auch für den Rückgabewert der Funktion verwendet werden.</p>
<p>Wenn ein Skript eine Funktion via DllCall aufruft, die eine Zeichenkette als Parameter akzeptiert, muss eine oder mehr der folgenden Vorgehensweisen verwendet werden:</p>
<ol>
  <li>Wenn sowohl die Unicode- (W) als auch ANSI-Version (A) der Funktion verfügbar sind, lassen Sie das Suffix W oder A weg und verwenden Sie den "Str"-Typ für die Eingabeparameter oder den Rückgabewert. Zum Beispiel wird die DeleteFile-Funktion von kernel32.dll als <code class="no-highlight">DeleteFileA</code> und <code class="no-highlight">DeleteFileW</code> exportiert. Da <code class="no-highlight">DeleteFile</code> selbst nicht wirklich existiert, versucht DllCall automatisch <code class="no-highlight">DeleteFileW</code>:
  <pre>DllCall("DeleteFile", "Ptr", StrPtr(DateiName))
DllCall("DeleteFile", "Str", DateiName)</pre>
  <p>In beiden Fällen wird die Adresse der originalen, unveränderten Zeichenkette an die Funktion übergeben.</p>
  <p>In einigen Fällen kann dieser Ansatz nach hinten losgehen, da DllCall nur dann das Suffix W hinzufügt, wenn keine Funktion mit dem originalen Namen gefunden werden konnte. Zum Beispiel exportiert shell32.dll ExtractIconExW, ExtractIconExA und ExtractIconEx ohne Suffix, wobei die letzten beiden äquivalent sind. In diesem Fall bewirkt das Weglassen des Suffixes W, dass die ANSI-Version aufgerufen wird.</p></li>
  <li>Wenn die Funktion einen bestimmten Zeichenkettentyp als Eingabevariable akzeptiert, kann das Skript den passenden Zeichenkettentyp verwenden:
  <pre>DllCall("DeleteFileA", "AStr", DateiName)
DllCall("DeleteFileW", "WStr", DateiName)</pre></li>
  <li>Wenn die Funktion einen Zeichenkettenparameter hat, der für die Ausgabe verwendet wird, muss das Skript wie <a href="#Buffer">oben</a> beschrieben Pufferspeicher reservieren und diesen an die Funktion übergeben. Wenn der Parameter Eingabe akzeptiert, muss das Skript auch die Eingabezeichenkette in das passende Format umwandeln; verwenden Sie dazu <a href="lib/StrPut.htm">StrPut</a>.</li>
</ol>

<h3 id="NumPutGet">NumPut / NumGet</h3>
<p>Wenn NumPut oder NumGet mit Zeichenketten verwendet werden, muss der Offset und Typ für den angegebenen Zeichenkettentyp korrekt sein. Folgendes kann Ihnen dabei helfen:</p>
<pre><em>;  8-bit/ANSI   strings:  size_of_char=1  type_of_char="UChar"
; 16-Bit/UTF-16 Zeichenketten:  size_of_char=2  type_of_char="UShort"</em>
<i>n</i>th_char := NumGet(buffer_or_address, (<i>n</i>-1)*size_of_char, type_of_char)
NumPut(type_of_char, <i>n</i>th_char, buffer_or_address, (<i>n</i>-1)*size_of_char)</pre>
<p>Für das erste Zeichen sollte <em>n</em> den Wert 1 haben.</p>

<h2 id="ptr">Pointer-Größe</h2>
<p>Pointer sind in 32-Bit-Builds 4 Bytes und in 64-Bit-Builds 8 Bytes groß. Skripte, die Strukturen oder DllCalls verwenden, sollten das berücksichtigen, um eine korrekte Ausführung auf beiden Plattformen zu gewährleisten. Bestimmte Bereiche, die auch betroffen sind:</p>
<ul>
  <li>Offset-Berechnung bei Strukturfeldern, die ein oder mehr Pointer enthalten.</li>
  <li>Größenberechnung bei Strukturen, die ein oder mehr Pointer enthalten.</li>
  <li>Typnamen, die mit <a href="lib/DllCall.htm">DllCall</a>, <a href="lib/NumPut.htm">NumPut</a> oder <a href="lib/NumGet.htm">NumGet</a> verwendet werden.</li>
</ul>
<p>Für Größen- und Offset-Berechnungen kann <a href="Variables.htm#PtrSize">A_PtrSize</a> verwendet werden. Für DllCall, NumPut und NumGet kann je nach Bedarf der <a href="lib/DllCall.htm">Ptr</a>-Typ verwendet werden.</p>
<p>Beachten Sie, dass der Offset eines Feldes üblicherweise die Gesamtgröße aller vorherigen Felder ist. Beachten Sie auch, dass Handles (einschließlich Typen wie HWND und HBITMAP) prinzipiell Pointer-Typen sind.</p>
<pre><em>/*
  typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;    // Ptr
    HANDLE hThread;
    DWORD  dwProcessId; // UInt (4 Bytes)
    DWORD  dwThreadId;
  } <a href="https://learn.microsoft.com/windows/win32/api/processthreadsapi/ns-processthreadsapi-process_information">PROCESS_INFORMATION</a>, *LPPROCESS_INFORMATION;
*/</em>
pi := Buffer(A_PtrSize*2 + 8) <em>; Ptr + Ptr + UInt + UInt</em>
DllCall("<a href="https://learn.microsoft.com/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa">CreateProcess</a>", <span class="dull">&lt;gekürzt&gt;</span>, "Ptr", &amp;pi, <span class="dull">&lt;gekürzt&gt;</span>)
hProcess    := NumGet(pi, 0)         <em>; Standardmäßig "Ptr".</em>
hThread     := NumGet(pi, A_PtrSize) <em>;</em>
dwProcessId := NumGet(pi, A_PtrSize*2,     "UInt")
dwProcessId := NumGet(pi, A_PtrSize*2 + 4, "UInt")
</pre>


<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
</body>
</html>
