<!DOCTYPE HTML>
<html lang="de">
<head>
<title>RegExMatch - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die RegExMatch-Funktion prüft, ob ein Suchmuster (regulärer Ausdruck) in einer Zeichenkette vorkommt." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>RegExMatch</h1>

<p>Prüft, ob ein Suchmuster (regulärer Ausdruck) in einer Zeichenkette vorkommt.</p>

<pre class="Syntax">FundPos := <span class="func">RegExMatch</span>(Heuhaufen, NadelRegEx <span class="optional">, &amp;AusgabeVar, StartPos</span>)</pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Heuhaufen</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Eine Zeichenkette, die durchsucht werden soll. Kann eine binäre Null enthalten.</p>
  </dd>

  <dt>NadelRegEx</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Ein Suchmuster im PCRE-Format (Perl-kompatibler regulärer Ausdruck). Die <a href="../misc/RegEx-QuickRef.htm#Options">Optionen</a> des Suchmusters (falls vorhanden) müssen am Anfang der Zeichenkette stehen, gefolgt von einem ")"-Zeichen. Das Suchmuster <span class="regex"><span class="red">i)</span>abc.*123</span> beispielsweise deaktiviert die Groß-/Kleinschreibung-Sensitivität und sucht nach einer Zeichenkette, die sich zusammensetzt aus "abc", null oder mehr Vorkommen eines beliebigen Zeichens und "123". Wenn keine Optionen vorhanden sind, ist das ")"-Zeichen optional. Zum Beispiel ist <span class="regex">)abc</span> dasselbe wie <span class="regex">abc</span>.</p>
    <p><em>NadelRegEx</em> kann keine binären Nullen enthalten, aber <code class="no-highlight">\x00</code> kann als Platzhalter für eine binäre Null in <em>Heuhaufen</em> verwendet werden.</p>
  </dd>

  <dt>&amp;AusgabeVar</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>Wenn weggelassen, wird keine Ausgabevariable verwendet. Andernfalls geben Sie eine Referenz an, die auf eine Ausgabevariable verweist, in der das <a href="#MatchObject">Match-Objekt</a> gespeichert werden soll. Dieses Objekt kann verwendet werden, um die Position, die Länge und den Wert der gesamten Übereinstimmung und, falls vorhanden, jedes <a href="../misc/RegEx-QuickRef.htm#subpat">erfassten Teilsuchmusters</a> abzurufen.</p>
    <p>Wenn das Suchmuster nicht gefunden wird (also wenn die Funktion 0 zurückgibt), wird diese Variable leer gemacht.</p>
  </dd>

  <dt>StartPos</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn weggelassen, wird standardmäßig 1 verwendet (der Anfang von <em>Heuhaufen</em>). Andernfalls geben Sie 2 an, um beim zweiten Zeichen zu beginnen, 3, um beim dritten zu beginnen, und so weiter. Wenn <em>StartPos</em> die Länge von <em>Heuhaufen</em> überschreitet, beginnt die Suche bei der leeren Zeichenkette am Ende von <em>Heuhaufen</em> (was in der Regel zu keiner Übereinstimmung führt).</p>
    <p>Geben Sie eine negative <em>StartPos</em> an, um an dieser Position von rechts zu beginnen. Zum Beispiel kann -1 angegeben werden, um beim letzten Zeichen zu beginnen, -2, um beim vorletzten Zeichen zu beginnen, und so weiter. Wenn <em>StartPos</em> über das linke Ende von <em>Heuhaufen</em> hinausgeht, wird alles in <em>Heuhaufen</em> durchsucht.</p>
    <p>Geben Sie 0 an, um am Ende von <em>Heuhaufen</em> zu beginnen, d.h. an der Position rechts vom letzten Zeichen. Dies kann mit nullbreiten Behauptungen wie <code class="no-highlight">(?&lt;=a)</code> verwendet werden.</p>
    <p>Egal welcher Wert für <em>StartPos</em> angegeben ist, der Rückgabewert ist immer relativ zum ersten Zeichen von <em>Heuhaufen</em>. Zum Beispiel ist die Position von "abc" in "123abc789" immer 4.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Funktion gibt die Position des ersten <em>NadelRegEx</em>-Vorkommens ganz links in <em>Heuhaufen</em> zurück. Position 1 ist das erste Zeichen. 0 wird zurückgegeben, wenn das Suchmuster nicht gefunden wurde.</p>

<h2 id="Errors">Fehlerbehandlung</h2>
<p><strong>Syntaxfehler:</strong> Wenn das Suchmuster einen Syntaxfehler enthält, wird ein <a href="Error.htm">Error</a> in folgender Form ausgelöst: <em>Compile error N at offset M: Beschreibung</em>. In dieser Zeichenkette ist <em>N</em> die PCRE-Fehlernummer, <em>M</em> die Position des betroffenen Zeichens innerhalb des regulären Ausdrucks und <em>Beschreibung</em> der Fehlertext.</p>
<p><strong>Ausführungsfehler:</strong> Wenn bei der <em>Ausführung</em> des regulären Ausdrucks ein Fehler auftritt, wird ein <a href="Error.htm">Error</a> ausgelöst. Die <em>Extra</em>-Eigenschaft des Error-Objekts enthält die PCRE-Fehlernummer. Solche Fehler treten selten auf, aber die häufigsten davon sind "zu viele mögliche Übereinstimmungen mit leeren Zeichenketten" (-22), "Rekursion zu tief" (-21) und "Limit der Übereinstimmung erreicht" (-8). In diesem Fall sollten Sie versuchen, das Suchmuster restriktiver zu gestalten – ersetzen Sie z.B. jedes * mit einem ?, + oder einem Limit wie {0,3}, sofern möglich.</p>

<h2 id="Options">Optionen</h2>
<p>Siehe <a href="../misc/RegEx-QuickRef.htm#Options">RegEx-Kurzübersicht</a> für Optionen wie z.B. <span class="regex"><span class="red">i)</span>abc</span>, das die Groß-/Kleinschreibung-Sensitivität ausschaltet.</p>

<h2 id="MatchObject">Match-Objekt (RegExMatchInfo)</h2>
<p>Wenn eine Übereinstimmung gefunden wurde, wird ein Objekt mit Informationen über die Übereinstimmung in <em>AusgabeVar</em> gespeichert. Dieses Objekt hat die folgenden Methoden und Eigenschaften:</p>
<p><strong>Match.Pos</strong>, <strong>Match.Pos[N]</strong> oder <strong>Match.Pos(N)</strong>: Gibt die Position der gesamten Übereinstimmung oder eines erfassten Teilsuchmusters zurück.</p>
<p><strong>Match.Len</strong>, <strong>Match.Len[N]</strong> oder <strong>Match.Len(N)</strong>: Gibt die Länge der gesamten Übereinstimmung oder eines erfassten Teilsuchmusters zurück.</p>
<p><strong>Match.Name[N]</strong> oder <strong>Match.Name(N)</strong>: Gibt den Namen eines Teilsuchmusters zurück, sofern es einen hat.</p>
<p><strong>Match.Count:</strong> Gibt die Gesamtzahl der Teilsuchmuster (erfasste Gruppen) zurück, was auch der Maximalwert für <em>N</em> ist.</p>
<p><strong>Match.Mark:</strong> Gibt den <em>NAMEN</em> des zuletzt gefundenen <span class="regex">(*MARK:NAMEN)</span> zurück, falls vorhanden.</p>
<p><strong>Match[]</strong> oder <strong>Match[N]</strong>: Gibt die gesamte Übereinstimmung oder ein erfasstes Teilsuchmuster zurück.</p>
<p>Bei allen oben genannten Methoden und Eigenschaften kann <em>N</em> einer der folgenden Werte sein:</p>
<ul>
  <li>0 für die gesamte Übereinstimmung.</li>
  <li>Die Nummer eines normalen oder benannten Teilsuchmusters.</li>
  <li>Der Name eines Teilsuchmusters.</li>
</ul>
<p><strong>Match.N:</strong> Kurzform für <strong>Match["N"]</strong>, wobei <em>N</em> ein beliebiger anführungszeichenloser Name oder eine beliebige Zahl ist, der/die nicht in Konflikt mit einer definierten (oben aufgelisteten) Eigenschaft steht. Zum Beispiel <code>Match.1</code> oder <code>Match.Jahr</code>.</p>
<p>Das Objekt kann enumeriert werden, d.h. die <a href="For.htm">For-Schleife</a> wird unterstützt. Alternativ kann <code><a href="Loop.htm">Loop</a> Match.Count</code> verwendet werden.</p>

<h2 id="Performance">Performanz</h2>
<p>Um eine einfache Teilzeichenkette innerhalb einer größeren Zeichenkette zu suchen, verwenden Sie <a href="InStr.htm">InStr</a>, da es schneller ist als RegExMatch.</p>
<p>Aus Performanzgründen werden die 100 zuletzt verwendeten regulären Ausdrücke zwischengespeichert (in kompilierter Form).</p>
<p>Die <a href="../misc/RegEx-QuickRef.htm#Study">S-Option</a> kann in bestimmten Fällen die Performanz eines häufig verwendeten regulären Ausdrucks verbessern (z.B. in einer Schleife).</p>

<h2 id="Remarks">Bemerkungen</h2>
<p id="NamedSubPat">Sie können einem Teilsuchmuster einen Namen geben, wie z.B. das Wort <em>Jahr</em> im Suchmuster <span class="regex">(?P&lt;Jahr&gt;\d{4})</span>. Diese Namen können maximal 32 Zeichen lang sein und dürfen nur aus alphanumerischen Zeichen und Unterstrichen bestehen. Beachten Sie, dass benannte Teilsuchmuster ebenfalls nummeriert sind. Wenn z.B. nach "Jahr" ein <a href="../misc/RegEx-QuickRef.htm#subpat">namenloses Teilsuchmuster</a> folgt, wird dessen Fund in <code>AusgabeVar[2]</code> gespeichert, nicht in <code>AusgabeVar[1]</code>.</p>
<p>Die meisten Zeichen wie abc123 können ganz normal in einem regulären Ausdruck verwendet werden. Anders verhält es sich mit den Metazeichen <code class="no-highlight">\.*?+[{|()^$</code>: Um ihre spezielle Bedeutung außer Kraft zu setzen, muss ihnen ein umgekehrter Schrägstrich vorangestellt werden. Zum Beispiel ist <span class="regex">\.</span> ein normaler Punkt und <span class="regex">\\</span> ein normaler umgekehrter Schrägstrich. Um nicht nur ein Zeichen, sondern eine ganze Reihe von Zeichen als normale Zeichen zu behandeln, verwenden Sie \Q...\E. Zum Beispiel: <span class="regex">\QNormaler Text\E</span>.</p>
<p>Innerhalb eines regulären Ausdrucks können zum Escapen von Sonderzeichen wie Tabulator und Zeilenumbruch sowohl ein umgekehrtes Häkchen (`) als auch ein umgekehrter Schrägstrich (\) verwendet werden. Zum Beispiel ist <span class="regex">`t</span> dasselbe wie <span class="regex">\t</span>, es sei denn, die <a href="../misc/RegEx-QuickRef.htm#opt_x">x-Option</a> wird verwendet.</p>
<p>Grundlagen zum Thema "Reguläre Ausdrücke" finden Sie unter <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurzübersicht</a>.</p>
<p>Die regulären Ausdrücke von AutoHotkey basieren auf PCRE (Perl-compatible Regular Expressions); weitere Informationen finden Sie unter <a href="http://www.pcre.org/">www.pcre.org</a>.</p>
<p>Innerhalb eines <a href="../Variables.htm#Expressions">Ausdrucks</a> kann <code>a ~= b</code> als Kurzschreibweise für <code>RegExMatch(a, b)</code> verwendet werden.</p>
<h2 id="Related">Siehe auch</h2>
<p><a href="RegExReplace.htm">RegExReplace</a>, <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurzübersicht</a>, <a href="../misc/RegExCallout.htm">Callouts in regulären Ausdrücken</a>, <a href="InStr.htm">InStr</a>, <a href="SubStr.htm">SubStr</a>, <a href="SetTitleMatchMode.htm#RegEx">SetTitleMatchMode RegEx</a>, <a href="https://www.autohotkey.com/board/topic/14817-">Global matching and Grep (archivierter Forumsthread)</a></p>
<p>Übliche Quellen für Textdaten: <a href="FileRead.htm">FileRead</a>, <a href="Download.htm">Download</a>, <a href="A_Clipboard.htm">A_Clipboard</a>, <a href="GuiControls.htm#Edit">GUI-Eingabefelder</a></p>

<h2 id="Examples">Beispiele</h2>
<p>Allgemeine RegEx-Beispiele finden Sie unter <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurzübersicht</a>.</p>

<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Meldet 4, weil das die Position ist, an der die Übereinstimmung gefunden wurde.</p>
<pre>MsgBox RegExMatch("xxxabc123xyz", "abc.*xyz")</pre>
</div>

<div class="ex" id="ExDollar">
<p><a class="ex_number" href="#ExDollar"></a> Meldet 7, weil $ die Übereinstimmung am Ende erzwingt.</p>
<pre>MsgBox RegExMatch("abc123123", "123$")</pre>
</div>

<div class="ex" id="ExCaseInsens">
<p><a class="ex_number" href="#ExCaseInsens"></a> Meldet 1, weil eine Übereinstimmung dank der i-Option (nicht Groß-/Kleinschreibung-sensitiv) gefunden wurde.</p>
<pre>MsgBox RegExMatch("abc123", "i)^ABC")</pre>
</div>

<div class="ex" id="ExOutputVar">
<p><a class="ex_number" href="#ExOutputVar"></a> Meldet 1 und speichert "XYZ" in TeilMust[1].</p>
<pre>MsgBox RegExMatch("abcXYZ123", "abc(.*)123", &amp;TeilMust)</pre>
</div>

<div class="ex" id="ExStartingPos">
<p><a class="ex_number" href="#ExStartingPos"></a> Meldet 7 statt 1 wegen der Startposition 2 statt 1.</p>
<pre>MsgBox RegExMatch("abc123abc456", "abc\d+",, 2)</pre>
</div>

<div class="ex" id="ExObject">
<p><a class="ex_number" href="#ExObject"></a> Zeigt die Verwendung des Match-Objekts.</p>
<pre>FundPos := RegExMatch("Musterstraße 1", "(.*) (?&lt;nr&gt;\d+)", &amp;TeilMust)
MsgBox TeilMust.Count ": " TeilMust[1] " " TeilMust.Name[2] "=" TeilMust.nr  <em>; Zeigt "2: Musterstraße nr=1" an</em></pre>
</div>

<div class="ex" id="ExExtension">
<p><a class="ex_number" href="#ExExtension"></a> Ruft die Endung einer Datei ab. Beachten Sie, dass <a href="SplitPath.htm">SplitPath</a> auch dafür verwendet werden kann, aber mit höherer Zuverlässigkeit.</p>
<pre>Pfad := "C:\Foo\Bar\Baz.txt"
RegExMatch(Pfad, "\w+$", &amp;Endung)
MsgBox Endung[]  <em>; Meldet "txt".</em></pre>
</div>

<div class="ex" id="ExDeref">
<p><a class="ex_number" href="#ExDeref"></a> Ähnlich wie Transform Deref von AutoHotkey v1 löst die folgende Funktion Variablenreferenzen und <a href="../misc/EscapeChar.htm">Escapesequenzen</a> in einer Zeichenkette auf. Außerdem zeigt dieses Beispiel, wie alle Übereinstimmungen in einer Zeichenkette gefunden werden können, anstatt bei der ersten Übereinstimmung zu stoppen (vergleichbar mit dem RegEx-g-Flag von JavaScript).</p>
<pre>var1 := "abc"
var2 := 123
MsgBox Deref("%var1%def%var2%")  <em>; Meldet abcdef123.</em>

Deref(Str)
{
    spo := 1
    out := ""
    while (fpo:=RegexMatch(Str, "(%(.*?)%)|``(.)", &amp;m, spo))
    {
        out .= SubStr(Str, spo, fpo-spo)
        spo := fpo + StrLen(m[0])
        if (m[1])
            out .= %m[2]%
        else switch (m[3])
        {
            case "a": out .= "`a"
            case "b": out .= "`b"
            case "f": out .= "`f"
            case "n": out .= "`n"
            case "r": out .= "`r"
            case "t": out .= "`t"
            case "v": out .= "`v"
            default: out .= m[3]
        }
    }
    return out SubStr(Str, spo)
}</pre>
</div>

</body>
</html>
