<!DOCTYPE HTML>
<html lang="de">
<head>
<title>FileOpen - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die FileOpen-Funktion öffnet eine Datei, um bestimmte Inhalte aus ihr zu lesen und/oder in diese zu schreiben." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
<style type="text/css">
.sized {
  width: 3em;
}
</style>
</head>
<body>

<h1>FileOpen</h1>

<p>Öffnet eine Datei, um bestimmte Inhalte aus ihr zu lesen und/oder in diese zu schreiben.</p>
<pre class="Syntax">FileObj := <span class="func">FileOpen</span>(DateiName, Flags <span class="optional">, Kodierung</span>)</pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>DateiName</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Name der Datei, die geöffnet werden soll. Wenn kein absoluter Pfad angegeben ist, wird die Datei im <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>-Verzeichnis vermutet.</p>
    <p>Geben Sie ein Sternchen (oder zwei) wie unten gezeigt an, um die Standardeingabe, Standardausgabe oder Standardfehlerausgabe zu öffnen:</p>
    <pre>
FileOpen("*", "r")   <em>; für stdin</em>
FileOpen("*", "w")   <em>; für stdout</em>
FileOpen("**", "w")  <em>; für stderr</em></pre>
  </dd>

  <dt>Flags</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Entweder eine Zeichenkette aus Buchstaben für den gewünschten Zugriffsmodus, gefolgt von anderen Optionen (optional getrennt durch Leer- oder Tabulatorzeichen), oder eine Kombination (Summe) von numerischen Flags. Mögliche Werte finden Sie in den Tabellen unten.</p>
  </dd>

  <dt>Kodierung</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn weggelassen, wird die Standardkodierung verwendet (definiert durch <a href="FileEncoding.htm">FileEncoding</a> oder standardmäßig CP0). Wenn leer, wird standardmäßig CP0 (die Standard-ANSI-Codepage des Systems) verwendet. Andernfalls geben Sie die Kodierung oder Codepage für die Text-Ein-/Ausgabe an, z.B. <code>"UTF-8"</code>, <code>"UTF-16"</code>, <code>CP936</code> oder <code>936</code>.</p>
    <p>Wenn die Datei eine UTF-8- oder UTF-16-Byte-Order-Markierung (BOM) enthält oder wenn das <code class="no-highlight">h</code>-Flag (Handle) verwendet wird, werden dieser Parameter und die Standardkodierung ignoriert, es sei denn, die Datei wird nur mit Schreibzugriff geöffnet (d.h. der vorherige Inhalt der Datei wird verworfen).</p>
  </dd>

</dl>

<h2 id="Flags">Flags</h2>

<h3 id="Access_modes">Zugriffsmodi (schließen sich gegenseitig aus)</h3>
<table class="info">
  <tr>
    <th class="sized center">Flag</th>
    <th class="sized right">Dez</th>
    <th class="sized right">Hex</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td class="center">r</td>
    <td class="right">0</td>
    <td class="right">0x0</td>
    <td><i>Read</i> (Lesen): Schlägt fehl, wenn die Datei nicht existiert.</td>
  </tr>
  <tr>
    <td class="center">w</td>
    <td class="right">1</td>
    <td class="right">0x1</td>
    <td><i>Write</i> (Schreiben): Erstellt eine neue Datei, wenn sie nicht existiert, <b style="color:red">andernfalls wird die Datei überschrieben</b>.</td>
  </tr>
  <tr>
    <td class="center">a</td>
    <td class="right">2</td>
    <td class="right">0x2</td>
    <td><i>Append</i> (Anfügen): Erstellt eine neue Datei, wenn sie nicht existiert, andernfalls wird der Dateizeiger an das Ende der Datei verschoben.</td>
  </tr>
  <tr>
    <td class="center">rw</td>
    <td class="right">3</td>
    <td class="right">0x3</td>
    <td><i>Read/Write</i> (Lesen/Schreiben): Erstellt eine neue Datei, wenn sie nicht existiert.</td>
  </tr>
  <tr>
    <td class="center">h</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>Kennzeichnet, dass <i>DateiName</i> ein Datei-Handle ist, das in ein Objekt gewrappt werden soll. Freigabemodusflags werden ignoriert. Die Datei oder der Stream des Handles wird nicht auf eine Byte-Order-Markierung (BOM) hin überprüft. Das Datei-Handle wird <u>nicht</u> automatisch geschlossen, wenn das File-Objekt zerstört wird. Der Aufruf von <a href="File.htm#Close">File.Close</a> hat keine Wirkung. Beachten Sie, dass <a href="File.htm#Seek">File.Seek</a>, <a href="File.htm#Pos">File.Pos</a> und <a href="File.htm#Length">File.Length</a> nicht verwendet werden sollten, wenn <i>DateiName</i> ein Handle ist, das auf ein nicht-suchendes Device (z.B. ein Pipe oder ein Kommunikations-Device) verweist.</td>
  </tr>
</table>

<h3 id="Sharing_mode_flags">Freigabemodi</h3>
<table class="info">
  <tr>
    <th class="sized center">Flag</th>
    <th class="sized right">Dez</th>
    <th class="sized right">Hex</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td class="center">-rwd</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>Sperrt die Datei für Lese-, Schreib- und/oder Löschzugriffe. Es sind beliebige Kombinationen von <code class="no-highlight">r</code>, <code class="no-highlight">w</code> und <code class="no-highlight">d</code> möglich. Die Angabe von <code class="no-highlight">-</code> entspricht der Angabe von <code class="no-highlight">-rwd</code>. Wenn alles weggelassen wird, werden standardmäßig alle Zugriffe freigegeben.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">0</td>
    <td class="right">0x0</td>
    <td>Wenn <i>Flags</i> numerisch ist und keine Freigabemodusflags angegeben sind, wird die Datei gesperrt.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">256</td>
    <td class="right">0x100</td>
    <td><i>Lesezugriff</i> freigeben.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">512</td>
    <td class="right">0x200</td>
    <td><i>Schreibzugriff</i> freigeben.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">1024</td>
    <td class="right">0x400</td>
    <td><i>Löschzugriff</i> freigeben.</td>
  </tr>
</table>

<h3 id="EOL_options">Zeilenumbruchoptionen</h3>
<table class="info">
  <tr>
    <th class="sized center">Flag</th>
    <th class="sized right">Dez</th>
    <th class="sized right">Hex</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td class="center">`n</td>
    <td class="right">4</td>
    <td class="right">0x4</td>
    <td>Ersetzt beim Schreiben <code class="no-highlight">`r`n</code> mit <code class="no-highlight">`n</code> und beim Lesen <code class="no-highlight">`n</code> mit <code class="no-highlight">`r`n</code>.</td>
  </tr>
  <tr>
    <td class="center">`r</td>
    <td class="right">8</td>
    <td class="right">0x8</td>
    <td>Ersetzt beim Schreiben das alleinstehende <code class="no-highlight">`r</code> mit <code class="no-highlight">`n</code>.</td>
  </tr>
</table>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#objects">Objekt</a></p>
<p>Der Rückgabewert ist ein neues <a href="File.htm">File-Objekt</a>, das das offene Handle zur Datei kapselt. Verwenden Sie die Methoden und Eigenschaften dieses Objekts, um auf den Inhalt der Datei zuzugreifen.</p>

<h2 id="Errors">Fehlerbehandlung</h2>
<p>Wenn die Datei nicht geöffnet werden kann, wird ein <a href="Error.htm#OSError">OSError</a> ausgelöst.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p><a href="File.htm#ReadLine">File.ReadLine</a> unterstützt immer <code class="no-highlight">`n</code>, <code class="no-highlight">`r`n</code> und <code class="no-highlight">`r</code> als Zeilenumbrüche, fügt sie aber nicht in den Rückgabewert ein, egal ob die Optionen <code class="no-highlight">`r</code> oder <code class="no-highlight">`n</code> verwendet werden oder nicht. Die Optionen beeinflussen nur die Übersetzung von Zeilenumbrüchen innerhalb eines Textes, der von <a href="File.htm#Read">File.Read</a> zurückgegeben oder von <a href="File.htm#Write">File.Write</a> oder <a href="File.htm#WriteLine">File.WriteLine</a> geschrieben wurde.</p>
<p>Beim Erstellen einer UTF-8- oder UTF-16-Datei wird eine Byte-Order-Markierung (BOM) in die Datei geschrieben, <u>es sei denn</u>, <em>Kodierung</em> oder die Standardkodierung (definiert durch <a href="FileEncoding.htm">FileEncoding</a>) ist <code>"UTF-8-RAW"</code> oder <code>"UTF-16-RAW"</code>.</p>
<p>Wenn eine Datei mit einer UTF-8- oder UTF-16-Byte-Order-Markierung (BOM) via Lesezugriff geöffnet wird, wird der Dateizeiger hinter die BOM gesetzt, um sie von der Ausgabe auszuschließen. Folglich kann <a href="File.htm#Pos">File.Pos</a> unmittelbar nach dem Öffnen der Datei 3 oder 2 zurückgeben.</p>
<p>Falls erforderlich, kann der Schreibpuffer mit <a href="File.htm#Read">File.Read</a> geleert werden, z.B. <code>FileObj.Read(0)</code>. Siehe <a href="#ExStreams">Beispiel #3</a> unten.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="File.htm">File-Objekt</a>, <a href="FileRead.htm">FileRead</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExWriteRead">
<p><a class="ex_number" href="#ExWriteRead"></a> Schreibt etwas Text in eine Datei und liest ihn zurück in den Speicher (bietet die gleiche Funktionalität wie <a href="DllCall.htm#ExFile">dieses DllCall-Beispiel</a>).</p>
<pre>DateiName := FileSelect("S16",, "Neue Datei erstellen:")
if (DateiName = "")
    return
try
    FileObj := FileOpen(DateiName, "w")
catch as Fehler
{
    MsgBox "Kann '" DateiName "' nicht zum Schreiben öffnen."
        . "`n`n" Type(Fehler) ": " Fehler.Message
    return
}
TestZkette := "Das ist eine Zeichenkette.`r`n"  <em>; Wenn eine Datei auf diese Weise geschrieben wird, sollte `r`n anstelle von `n verwendet werden, um eine neue Zeile zu beginnen.</em>
FileObj.Write(TestZkette)
FileObj.Close()

<em>; Die Datei wurde geschrieben, also lese ihren Inhalt zurück in den Speicher.</em>
try
    FileObj := FileOpen(DateiName, "r-d") <em>; Liest die Datei ("r"), gibt alle Zugriffe außer Löschen ("-d") frei</em>
catch as Fehler
{
    MsgBox "Kann '" DateiName "' nicht zum Lesen öffnen."
        . "`n`n" Type(Fehler) ": " Fehler.Message
    return
}
ZuLesendeZeichen := StrLen(TestZkette)
TestZkette := FileObj.Read(ZuLesendeZeichen)
FileObj.Close()
MsgBox "Die folgende Zeichenkette wurde aus der Datei gelesen: " TestZkette</pre>
</div>

<div class="ex" id="ExReadLine">
<p><a class="ex_number" href="#ExReadLine"></a> Öffnet das Skript im Schreibschutzmodus und liest dessen erste Zeile.</p>
<pre>Skript := FileOpen(A_ScriptFullPath, "r")
MsgBox Skript.ReadLine()</pre>
</div>

<div class="ex" id="ExStreams">
<p><a class="ex_number" href="#ExStreams"></a> Zeigt die Verwendung der Standard-Eingabe/Ausgabe-Datenströme.</p>
<pre><em>; Öffnet ein Konsolenfenster für diese Demonstration:</em>
DllCall("AllocConsole")
<em>; Öffnet die stdin/stdout-Ströme der Anwendung.</em>
stdin  := FileOpen("*", "r")
stdout := FileOpen("*", "w")
stdout.Write("Bitte Anfrage eingeben.`n\&gt; ")
stdout.Read(0) <em>; Schreibpuffer leeren.</em>
query := RTrim(stdin.ReadLine(), "`n")
stdout.WriteLine("Die Anfrage war '" query "'. Schönen Tag noch.")
stdout.Read(0) <em>; Schreibpuffer leeren.</em>
Sleep 5000
</pre>
</div>
</body>
</html>
