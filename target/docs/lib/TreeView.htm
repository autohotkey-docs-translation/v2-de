<!DOCTYPE HTML>
<html lang="de">
<head>
<title>TreeView (GUI) - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Eine Baumansicht (engl. TreeView) wird verwendet, um eine Hierarchie von mehreren ineinander verschachtelten Elementen darzustellen. Diese Seite enthält die Funktionen, um sie zu modifizieren." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>

<body>
<h1>TreeView</h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Intro">Einführung und einfaches Beispiel</a></li>
  <li><a href="#Options">Optionen und Styles für den Optionen-Parameter</a></li>
  <li><a href="#BuiltIn">Interne Methoden für TreeViews</a></li>
  <li><a href="#Events">Ereignisse</a></li>
  <li><a href="#Remarks">Bemerkungen</a></li>
  <li><a href="#Examples">Beispiele</a></li>
</ul>
<h2 id="Intro">Einführung und einfaches Beispiel</h2>
<p>Eine Baumansicht (engl. TreeView) wird verwendet, um eine Hierarchie von mehreren ineinander verschachtelten Elementen darzustellen. Das wohl bekannteste Beispiel dafür ist der Navigationsbereich am linken Rand eines Explorer-Fensters, mit dem Laufwerke und Ordner ausgewählt werden können.</p>
<p>Eine typische TreeView sieht wie folgt aus:</p>
<img src="../static/ctrl_treeview.png" alt="TreeView" />
<p>Die Syntax zur Erstellung einer TreeView ist:</p>
<pre class="Syntax" id="GuiAdd">TV := GuiObj.<span class="func">Add</span>("TreeView", Optionen)</pre>
<p>Oder:</p>
<pre class="Syntax">TV := GuiObj.<span class="func">AddTreeView</span>(Optionen)</pre>
<p>Das folgende Beispiel ist ein lauffähiges Skript, das eine einfache Hierarchie von Elementen erstellt und anzeigt:</p>
<pre>MeineGui := Gui()
TV := MeineGui.Add("TreeView")
<span class="red">P1</span> := <a href="#Add">TV.Add</a>("Erstes Elternelement")
P1C1 := TV.Add("Erstes Kindelement von Elternelement 1", <span class="red">P1</span>)  <em>; P1 als Elternelement für dieses Element festlegen.</em>
P2 := TV.Add("Zweites Elternelement")
P2C1 := TV.Add("Erstes Kindelement von Elternelement 2", P2)
P2C2 := TV.Add("Zweites Kindelement von Elternelement 2", P2)
P2C2C1 := TV.Add("Erstes Kindelement von Elternelement 2", P2C2)

MeineGui.Show()  <em>; Das Fenster und dessen TreeView anzeigen.</em></pre>
<h2 id="Options">Optionen und Styles für den Optionen-Parameter</h2>
<p><strong>Background:</strong> Geben Sie das Wort <em>Background</em> an, unmittelbar gefolgt von einem Farbnamen (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder RGB-Wert (mit oder ohne 0x-Präfix). Beispiele: <code class="no-highlight">BackgroundSilver</code>, <code class="no-highlight">BackgroundFFDD99</code>. Wenn diese Option nicht vorhanden ist, verwendet die TreeView als Hintergrundfarbe standardmäßig die Standardhintergrundfarbe des Systems. Mit <code class="no-highlight">BackgroundDefault</code> oder <code class="no-highlight">-Background</code> kann die Standardhintergrundfarbe des Systems gesetzt werden (in der Regel weiß). Zum Beispiel kann die Standardfarbe einer TreeView via <code>TV.Opt("+BackgroundDefault")</code> wiederhergestellt werden.</p>
<p><strong>Buttons:</strong> Geben Sie <code class="no-highlight">-Buttons</code> (minus Buttons) an, um die Plus- oder Minuszeichen auf der linken Seite eines Elements, das Kindelemente hat, zu entfernen.</p>
<p><strong>C:</strong> Textfarbe. Geben Sie den Buchstaben C an, unmittelbar gefolgt von einem Farbnamen (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder RGB-Wert (mit oder ohne 0x-Präfix). Beispiele: <code class="no-highlight">cRed</code>, <code class="no-highlight">cFF2211</code>, <code class="no-highlight">c0xFF2211</code>, <code class="no-highlight">cDefault</code>.</p>
<p id="Checked"><strong>Checked:</strong> Stellt eine CheckBox auf der linken Seite jedes Elements bereit. Geben Sie beim <a href="#Add">Hinzufügen</a> eines Elements das Wort <em>Check</em> in den Optionen an, um die CheckBox vorerst im abgehakten Zustand anzuzeigen. Der Benutzer kann die CheckBox anklicken oder die Leertaste drücken, um ein Häkchen zu setzen oder zu entfernen. Um herauszufinden, welche Elemente aktuell in der TreeView abgehakt sind, rufen Sie die <a href="#GetNext">GetNext-Methode</a> oder <a href="#Get">Get-Methode</a> auf.</p>
<p><strong>HScroll:</strong> Geben Sie <code class="no-highlight">-HScroll</code> (minus HScroll) an, um das horizontale Scrollen im Steuerelement zu deaktivieren (zusätzlich wird der horizontale Scrollbalken entfernt).</p>
<p id="ImageList"><strong>ImageList:</strong> Ermöglicht das Hinzufügen von Symbolen zu einer TreeView. Geben Sie das Wort <em>ImageList</em> an, unmittelbar gefolgt von der ImageListID, die von einem vorherigen <a href="ListView.htm#IL_Create">IL_Create</a>-Aufruf zurückgegeben wurde. Diese Option funktioniert nur beim Erstellen einer TreeView (die <a href="#SetImageList">SetImageList-Methode</a> unterliegt nicht dieser Einschränkung). Hier ein funktionierendes Beispiel:</p>
<pre>MeineGui := Gui()
ImageListID := <a href="ListView.htm#IL_Create">IL_Create</a>(10)  <em>; Eine ImageList mit einer anfänglichen Kapazität von 10 Symbolen erstellen.</em>
Loop 10  <em>; ImageList mit einigen Standardsymbolen des Systems füllen.</em>
    <a href="ListView.htm#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index)
TV := MeineGui.Add("TreeView", "ImageList" . ImageListID)
<a href="#Add">TV.Add</a>("Elementname", 0, "Icon4")  <em>; Element zur TreeView hinzufügen und ein Ordnersymbol zuweisen.</em>
MeineGui.Show()</pre>
<p><strong>Lines:</strong> Geben Sie <code class="no-highlight">-Lines</code> (minus Lines) an, um die Verbindungslinien zwischen den Eltern- und Kindelementen zu verstecken. Das Entfernen solcher Linien verhindert allerdings auch, dass die Plus-/Minuszeichen bei Top-Level-Elementen angezeigt werden.</p>
<p id="ReadOnly"><strong>ReadOnly:</strong> Geben Sie <code class="no-highlight">-ReadOnly</code> (minus ReadOnly) an, um dem Benutzer das Editieren des Texts/Namens eines Elements zu erlauben. Um ein Element zu editieren, wählen Sie es aus und drücken Sie <kbd>F2</kbd> (siehe <a href="#WantF2">WantF2</a>-Option unten). Alternativ können Sie einmal auf ein Element klicken, um es auszuwählen, mindestens eine halbe Sekunde warten und dann erneut auf dasselbe Element klicken, um es zu editieren. Nach dem Editieren kann ein Element wie folgt unter seinen Geschwisterelementen alphabetisch neu positioniert werden:</p>
<pre>TV := MeineGui.Add("TreeView", "-ReadOnly")
TV.OnEvent("ItemEdit", TV_Edit)  <em>; TV_Edit jedes Mal aufrufen, wenn der Benutzer aufgehört hat, ein Element zu editieren.</em>
<em>; ...</em>
TV_Edit(TV, Element)
{
    TV.Modify(TV.GetParent(Element), "Sort")  <em>; Funktioniert auch, wenn das Element kein Elternelement hat.</em>
}</pre>
<p><strong>R:</strong> Höhe in Zeilen (beim Erstellen). Geben Sie den Buchstaben R an, unmittelbar gefolgt von der Anzahl der Zeilen, für die innerhalb des Steuerelements Platz geschaffen werden soll. Zum Beispiel bewirkt <code class="no-highlight">R10</code>, dass das Steuerelement 10 Elemente hoch gemacht wird.</p>
<p id="WantF2"><strong>WantF2:</strong> Geben Sie <code class="no-highlight">-WantF2</code> (minus WantF2) an, um den Benutzer daran zu hindern, das aktuell ausgewählte Element mit <kbd>F2</kbd> zu <a href="#ReadOnly">editieren</a>. Diese Einstellung wird ignoriert, es sei denn, <a href="#ReadOnly">-ReadOnly</a> ist ebenfalls wirksam.</p>
<p><strong>(Namenlose numerische Styles):</strong> Andere Styles als die oben genannten werden nur selten verwendet und haben daher keine Namen. Eine vollständige Liste finden Sie unter <a href="../misc/Styles.htm#TreeView">TreeView-Styles</a>.</p>
<h2 id="BuiltIn">Interne Methoden für TreeViews</h2>
<p>Zusätzlich zu den <a href="GuiControl.htm">Standardmethoden/-eigenschaften eines GUI-Steuerelements</a> verfügen TreeView-Steuerelemente über die folgenden Methoden (definiert in der Gui.TreeView-Klasse).</p>
<p>Element-Methoden:</p>
<ul>
  <li><a href="#Add">Add</a>: Fügt ein neues Element zur TreeView hinzu.</li>
  <li><a href="#Modify">Modify</a>: Ändert die Attribute und/oder den Namen eines Elements.</li>
  <li><a href="#Delete">Delete</a>: Löscht ein bestimmtes Element oder alle Elemente.</li>
</ul>
<p>Abrufmethoden:</p>
<ul>
  <li><a href="#GetSelection">GetSelection</a>: Gibt die ID-Nummer des ausgewählten Elements zurück.</li>
  <li><a href="#GetCount">GetCount</a>: Gibt die Gesamtzahl der Elemente im Steuerelement zurück.</li>
  <li><a href="#GetParent">GetParent</a>: Gibt die ID-Nummer des Elternelements eines bestimmten Elements zurück.</li>
  <li><a href="#GetChild">GetChild</a>: Gibt die ID-Nummer des ersten/obersten Kindelements eines bestimmten Elements zurück.</li>
  <li><a href="#GetPrev">GetPrev</a>: Gibt die ID-Nummer des Geschwisterelements zurück, das sich oberhalb eines bestimmten Elements befindet.</li>
  <li><a href="#GetNext">GetNext</a>: Gibt die ID-Nummer des nächsten Elements zurück, das sich unterhalb eines bestimmten Elements befindet.</li>
  <li><a href="#GetText">GetText</a>: Ruft den Text/Namen eines bestimmten Elements ab.</li>
  <li><a href="#Get">Get</a>: Gibt die ID-Nummer eines bestimmten Elements zurück, unter Beachtung des angegebenen Attributs.</li>
</ul>
<p>Sonstige Methoden:</p>
<ul>
  <li><a href="#SetImageList">SetImageList</a>: Setzt oder ersetzt eine ImageList zur Darstellung von Symbolen.</li>
</ul>

<div class="methodShort" id="Add">
<h3>Add</h3>
<p>Fügt ein neues Element zur TreeView hinzu.</p>
<pre class="Syntax">ElementID := TV.<span class="func">Add</span>(Name, <span class="optional">ElternElementID, Optionen</span>)</pre>
<h4 id="Add_Parameters">Parameter</h4>
<dl>
  <dt>Name</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Der Anzeigetext des Elements, der textuell oder numerisch sein kann (einschließlich numerischer Ergebnisse von <a href="../Variables.htm#Expressions">Ausdrücken</a>).</p>
  </dd>
  <dt>ElternElementID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn weggelassen, wird standardmäßig 0 verwendet, d.h. das Element wird als Top-Level-Element hinzugefügt. Andernfalls geben Sie die ID-Nummer des Elternelements des neuen Elements an.</p>
  </dd>
  <dt id="Options_for_Add_and_Modify">Optionen</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Wenn leer oder weggelassen, werden standardmäßig keine Optionen verwendet. Andernfalls geben Sie eine oder mehrere Optionen aus der unteren Liste an (nicht Groß-/Kleinschreibung-sensitiv). Trennen Sie alle Optionen jeweils durch ein Leer- oder Tabulatorzeichen. Um eine Option zu entfernen, setzen Sie ein Minuszeichen davor. Um eine Option hinzuzufügen, lassen Sie das Vorzeichen weg oder setzen Sie ein Pluszeichen davor.</p>
    <p id="Bold"><strong>Bold:</strong> Stellt den Namen des Elements in fetter Schrift dar. Um dessen Schrift später wieder zu normalisieren, verwenden Sie <code>TV.Modify(ElementID, "-Bold")</code>. Direkt nach dem Wort <em>Bold</em> kann optional eine 0 oder 1 angegeben werden, um den Startzustand zu bestimmen.</p>
    <p id="Check"><strong>Check:</strong> Zeigt ein Häkchen links neben dem Element an (sofern die TreeView über <a href="#Checked">CheckBoxen</a> verfügt). Um das Häkchen später wieder zu entfernen, verwenden Sie <code>TV.Modify(ElementID, "-Check")</code>. Direkt nach dem Wort <em>Check</em> kann optional eine 0 oder 1 angegeben werden, um den Startzustand zu bestimmen. Mit anderen Worten, <code>"Check"</code> ist dasselbe wie <code>"Check" . VarEnhältEins</code> (wobei der Punkt ein <a href="../Variables.htm#concat">Verkettungsoperator</a> ist).</p>
    <p id="Expand"><strong>Expand:</strong> Klappt das Element auf, um seine Kindelemente (falls vorhanden) anzuzeigen. Um das Element später wieder zuzuklappen, verwenden Sie <code>TV.Modify(ElementID, "-Expand")</code>. Wenn es keine Kindelemente hat, gibt die <a href="#Modify">Modify-Methode</a> 0 anstelle der Element-ID zurück. Die <a href="#Add">Add-Methode</a> hingegen markiert das Element als aufgeklappt, falls später noch Kindelemente hinzugefügt werden. Im Gegensatz zur <a href="#Select">Select</a>-Option unten wird beim Aufklappen eines Elements nicht automatisch das Elternelement aufgeklappt. Direkt nach dem Wort <em>Expand</em> kann optional eine 0 oder 1 angegeben werden, um den Startzustand zu bestimmen. Mit anderen Worten, <code>"Expand"</code> ist dasselbe wie <code>"Expand" . VarEnhältEins</code>.</p>
    <p><strong>First | Sort | N:</strong> Diese Optionen gelten nur für die <a href="#Add">Add-Methode</a>. Sie bestimmen die Position des neuen Elements relativ zu seinen Geschwisterelementen (ein <em>Geschwisterelement</em> befindet sich auf derselben Ebene). Wenn keine dieser Optionen vorhanden ist, wird das neue Element als letztes/unterstes Geschwisterelement hinzugefügt. Andernfalls geben Sie das Wort <em>First</em> an, um das Element als erstes/oberstes Geschwisterelement hinzuzufügen, oder das Wort <em>Sort</em>, um das Element unter seinen Geschwisterelementen in alphabetischer Reihenfolge einzufügen. Wenn eine Nummer (<em>N</em>) angegeben ist, wird diese als ID-Nummer des Geschwisterelements vermutet, hinter dem das neue Element eingefügt werden soll (wenn <em>N</em> die einzige Option ist, muss sie nicht in Anführungszeichen gesetzt werden).</p>
    <p><strong>Icon:</strong> Geben Sie das Wort <em>Icon</em> an, unmittelbar gefolgt von der Nummer des Symbols, das links neben dem Elementnamen angezeigt werden soll. Wenn diese Option fehlt, wird das erste Symbol in der <a href="#ImageList">ImageList</a> verwendet. Um ein leeres Symbol anzuzeigen, geben Sie eine Nummer größer als die Anzahl der Symbole in der ImageList an. Wenn dem Steuerelement keine ImageList zugewiesen wurde, wird kein Symbol angezeigt und kein Platz dafür reserviert.</p>
    <p id="Select"><strong>Select:</strong> Wählt das Element aus. Da immer nur ein Element ausgewählt werden kann, wird das zuvor ausgewählte Element automatisch abgewählt. Außerdem bewirkt diese Option, dass alle Elternelemente des neuen Elements, das ausgewählt wurde, aufgeklappt werden, falls erforderlich. Um die aktuelle Auswahl zu ermitteln, verwenden Sie die <a href="#GetSelection">GetSelection-Methode</a>.</p>
    <p><strong>Sort:</strong> In Verbindung mit der <a href="#Modify">Modify-Methode</a> bewirkt diese Option, dass die Kindelemente des angegebenen Elements in alphabetischer Reihenfolge sortiert werden. Um stattdessen alle Top-Level-Elemente zu sortieren, verwenden Sie <code>TV.Modify(0, "Sort")</code>. Wenn es keine Kindelemente hat, wird 0 anstelle der ID des geänderten Elements zurückgegeben.</p>
    <p><strong>Vis:</strong> Stellt sicher, dass das Element vollständig sichtbar ist, ggf. durch Scrollen der TreeView und/oder Aufklappen des Elternelements.</p>
    <p><strong>VisFirst:</strong> Dasselbe wie oben, außer dass die TreeView zusätzlich gescrollt wird, um das Element nach Möglichkeit ganz oben anzuzeigen. Diese Option ist in Verbindung mit der <a href="#Modify">Modify-Methode</a> grundsätzlich effektiver als mit der <a href="#Add">Add-Methode</a>.</p>
  </dd>
</dl>
<h4 id="Add_Return_Value">Rückgabewert</h4>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Bei Erfolg gibt diese Methode die eindeutige ID-Nummer des neuen Elements zurück. Bei Misserfolg gibt sie 0 zurück.</p>
<h4 id="Add_Remarks">Bemerkungen</h4>
<p>Um das Hinzufügen sehr vieler Elemente performanter zu machen, verwenden Sie <code>TV.Opt("-Redraw")</code>, bevor Sie die Elemente hinzufügen, und danach <code>TV.Opt("+Redraw")</code>. Weitere Informationen finden Sie unter <a href="GuiControl.htm#redraw-remarks">Neuzeichnung</a>.</p>
</div>

<div class="methodShort" id="Modify">
<h3>Modify</h3>
<p>Ändert die Attribute und/oder den Namen eines Elements.</p>
<pre class="Syntax">ElementID := TV.<span class="func">Modify</span>(ElementID <span class="optional">, Optionen, NeuerName</span>)</pre>
<h4 id="Modify_Parameters">Parameter</h4>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die ID-Nummer des Elements, das geändert werden soll.</p>
  </dd>
  <dt>Optionen</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Wenn dieser und der <em>NeuerName</em>-Parameter weggelassen werden, wird das Element ausgewählt. Andernfalls geben Sie eine oder mehrere Optionen aus der <a href="#Options_for_Add_and_Modify">obigen Liste</a> an.</p>
  </dd>
  <dt>NeuerName</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Wenn weggelassen, bleibt der aktuelle Name unverändert. Andernfalls geben Sie den neuen Namen des Elements an.</p>
  </dd>
</dl>
<h4 id="Modify_Return_Value">Rückgabewert</h4>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Methode gibt die ID des Elements zurück.</p>
</div>

<div class="methodShort" id="Delete">
<h3>Delete</h3>
<p>Löscht ein bestimmtes Element oder alle Elemente.</p>
<pre class="Syntax">TV.<span class="func">Delete</span>(<span class="optional">ElementID</span>)</pre>
<h4 id="Delete_Parameters">Parameter</h4>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn weggelassen, werden <u>alle</u> Elemente in der TreeView gelöscht. Andernfalls geben Sie die ID-Nummer des Elements an, das gelöscht werden soll.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="GetSelection">
<h3>GetSelection</h3>
<p>Gibt die ID-Nummer des ausgewählten Elements zurück.</p>
<pre class="Syntax">ElementID := TV.<span class="func">GetSelection</span>()</pre>
<h4 id="GetSelection_Return_Value">Rückgabewert</h4>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Methode gibt die ID-Nummer des ausgewählten Elements zurück.</p>
</div>

<div class="methodShort" id="GetCount">
<h3>GetCount</h3>
<p>Gibt die Gesamtzahl der Elemente im Steuerelement zurück.</p>
<pre class="Syntax">Anzahl := TV.<span class="func">GetCount</span>()</pre>
<h4 id="GetCount_Return_Value">Rückgabewert</h4>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Methode gibt die Gesamtzahl der Elemente im Steuerelement zurück. Der Wert wird immer sofort zurückgegeben, da das Steuerelement diese Zählung zwischenspeichert.</p>
</div>

<div class="methodShort" id="GetParent">
<h3>GetParent</h3>
<p>Gibt die ID-Nummer des Elternelements eines bestimmten Elements zurück.</p>
<pre class="Syntax">ElternElementID := TV.<span class="func">GetParent</span>(ElementID)</pre>
<h4 id="GetParent_Parameters">Parameter</h4>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die ID-Nummer des Elements, das geprüft werden soll.</p>
  </dd>
</dl>
<h4 id="GetParent_Return_Value">Rückgabewert</h4>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Methode gibt die ID-Nummer des Elternelements des angegebenen Elements zurück. Wenn das Element kein Elternelement hat, gibt sie 0 zurück, was für alle Top-Level-Elemente gilt.</p>
</div>

<div class="methodShort" id="GetChild">
<h3>GetChild</h3>
<p>Gibt die ID-Nummer des ersten/obersten Kindelements eines bestimmten Elements zurück.</p>
<pre class="Syntax">KindElementID := TV.<span class="func">GetChild</span>(ElementID)</pre>
<h4 id="GetChild_Parameters">Parameter</h4>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die ID-Nummer des Elements, das geprüft werden soll. Wenn 0, wird die ID-Nummer des ersten/obersten Elements in der TreeView zurückgegeben.</p>
  </dd>
</dl>
<h4 id="GetChild_Return_Value">Rückgabewert</h4>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Methode gibt die ID-Nummer des ersten/obersten Kindelements des angegebenen Elements zurück. Wenn dort kein Kindelement vorhanden ist, gibt sie 0 zurück.</p>
</div>

<div class="methodShort" id="GetPrev">
<h3>GetPrev</h3>
<p>Gibt die ID-Nummer des Geschwisterelements zurück, das sich oberhalb eines bestimmten Elements befindet.</p>
<pre class="Syntax">VorherigesElementID := TV.<span class="func">GetPrev</span>(ElementID)</pre>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die ID-Nummer des Elements, das geprüft werden soll.</p>
  </dd>
</dl>
<h4 id="GetPrev_Return_Value">Rückgabewert</h4>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Methode gibt die ID-Nummer des Geschwisterelements zurück, das sich oberhalb des angegebenen Elements befindet. Wenn dort kein Geschwisterelement vorhanden ist, gibt sie 0 zurück.</p>
</div>

<div class="methodShort" id="GetNext">
<h3>GetNext</h3>
<p>Gibt die ID-Nummer des nächsten Elements zurück, das sich unterhalb eines bestimmten Elements befindet.</p>
<pre class="Syntax">NächstesElementID := TV.<span class="func">GetNext</span>(<span class="optional">ElementID, ElementTyp</span>)</pre>
<h4 id="GetNext_Parameters">Parameter</h4>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn weggelassen, wird standardmäßig 0 verwendet, d.h. es wird die ID-Nummer des ersten/obersten Elements in der TreeView zurückgegeben. Andernfalls geben Sie die ID-Nummer des Elements an, das geprüft werden soll.</p>
  </dd>
  <dt>ElementTyp</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Wenn weggelassen, wird die ID-Nummer des Geschwisterelements abgerufen, das sich unterhalb des angegebenen Elements befindet. Andernfalls geben Sie eine der folgenden Zeichenketten an:</p>
    <p><strong>Full</strong> oder <strong>F</strong>: Ruft das nächste Element unabhängig von seiner Beziehung zum angegebenen Element ab. Dadurch kann das Skript auf einfache Weise die gesamte TreeView Element für Element durchgehen. Siehe das Beispiel unten.</p>
    <p><strong>Check</strong>, <strong>Checked</strong> oder <strong>C</strong>: Ruft nur das nächste abgehakte Element ab.</p>
  </dd>
</dl>
<h4 id="GetNext_Return_Value">Rückgabewert</h4>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Methode gibt die ID-Nummer des nächsten Elements zurück, das sich unterhalb des angegebenen Elements befindet. Wenn dort kein nächstes Element vorhanden ist, gibt sie 0 zurück.</p>
<h4 id="GetNext_Remarks">Bemerkungen</h4>
<p>Das folgende Beispiel durchläuft die gesamte TreeView Element für Element:</p>
<pre>ElementID := 0  <em>; Die Suche beim ersten Element beginnen.</em>
Loop
{
    ElementID := TV.GetNext(ElementID, "Full")  <em>; Ersetzen Sie "Full" mit "Checked", um alle abgehakten Elemente zu finden.</em>
    if not ElementID  <em>; Keine weiteren Elemente verfügbar.</em>
        break
    ElementText := TV.GetText(ElementID)
    MsgBox('Das nächste Element ist ' ElementID ' und enthält "' ElementText '".')
}</pre>
</div>

<div class="methodShort" id="GetText">
<h3>GetText</h3>
<p>Ruft den Text/Namen eines bestimmten Elements ab.</p>
<pre class="Syntax">Text := TV.<span class="func">GetText</span>(ElementID)</pre>
<h4 id="GetText_Parameters">Parameter</h4>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die ID-Nummer des Elements, dessen Text abgerufen werden soll.</p>
  </dd>
</dl>
<h4 id="GetText_Return_Value">Rückgabewert</h4>
<p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
<p>Diese Methode gibt den abgerufenen Text zurück. Es werden nur bis zu 8191 Zeichen abgerufen.</p>
</div>

<div class="methodShort" id="Get">
<h3>Get</h3>
<p>Gibt die ID-Nummer eines bestimmten Elements zurück, unter Beachtung des angegebenen Attributs.</p>
<pre class="Syntax">ElementID := TV.<span class="func">Get</span>(ElementID, Attribut)</pre>
<h4 id="Get_Parameters">Parameter</h4>
<dl>
  <dt>ElementID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die ID-Nummer des Elements, das geprüft werden soll.</p>
  </dd>
  <dt>Attribut</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Geben Sie eine der folgenden Zeichenketten an:</p>
    <p><strong>E</strong>, <strong>Expand</strong> oder <strong>Expanded</strong>: Das Element ist gerade <a href="#Expand">aufgeklappt</a> (d.h. seine Kindelemente werden angezeigt).</p>
    <p><strong>C</strong>, <strong>Check</strong> oder <strong>Checked</strong>: Das Element hat ein <a href="#Check">Häkchen</a>.</p>
    <p><strong>B</strong> oder <strong>Bold</strong>: Das Element wird gerade <a href="#Bold">fett</a> dargestellt.</p>
  </dd>
</dl>
<h4 id="Get_Return_Value">Rückgabewert</h4>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Wenn das angegebene Element das angegebene Attribut hat, wird dessen ID zurückgegeben. Andernfalls wird 0 zurückgegeben.</p>
<h4 id="Get_Remarks">Bemerkungen</h4>
<p>Da eine IF-Anweisung jeden Wert ungleich 0 als "wahr" ansieht, sind die folgenden zwei Zeilen funktionsgleich: <code>if TV.Get(ElementID, "Checked") = ElementID</code> und <code>if TV.Get(ElementID, "Checked")</code>.</p>
</div>

<div class="methodShort" id="SetImageList">
<h3>SetImageList</h3>
<p>Setzt oder ersetzt eine <a href="ListView.htm#IL">ImageList</a> zur Darstellung von Symbolen.</p>
<pre class="Syntax">VorherigeImageListID := TV.<span class="func">SetImageList</span>(ImageListID <span class="optional">, SymbolTyp</span>)</pre>
<h4 id="SetImageList_Parameters">Parameter</h4>
<dl>
  <dt>ImageListID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die ID-Nummer, die von einem früheren Aufruf von <a href="ListView.htm#IL_Create">IL_Create</a> zurückgegeben wurde.</p>
  </dd>
  <dt>SymbolTyp</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn weggelassen, wird standardmäßig 0 verwendet. Andernfalls geben Sie 2 für Zustandssymbole an (Zustandssymbole werden nur indirekt via <a href="SendMessage.htm">SendMessage</a> unterstützt).</p>
  </dd>
</dl>
<h4 id="SetImageList_Return_Value">Rückgabewert</h4>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Bei Erfolg gibt diese Methode die ImageList-ID zurück, die zuvor mit der TreeView verknüpft war. Bei Misserfolg gibt sie 0 zurück. Jede nicht mehr verwendete ImageList sollte normalerweise mit <a href="ListView.htm#IL_Destroy">IL_Destroy</a> zerstört werden.</p>
</div>

<h2 id="Events">Ereignisse</h2>
<p>Damit das Skript auf die folgenden Ereignisse reagieren kann, muss eine Rückruffunktion oder -methode via <a href="GuiOnEvent.htm">OnEvent</a> registriert werden:</p>
<table class="info">
  <tr><th>Ereignis</th><th>Auslösende Aktion</th></tr>
  <tr><td><a href="GuiOnEvent.htm#Click">Click</a></td><td>Das Steuerelement wurde angeklickt.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#DoubleClick">DoubleClick</a></td><td>Das Steuerelement wurde doppelt angeklickt.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#Ctrl-ContextMenu">ContextMenu</a></td><td>Der Benutzer hat einen Rechtsklick auf das Steuerelement gemacht oder <kbd>Menü</kbd> oder <kbd>Umschalt</kbd>+<kbd>F10</kbd> gedrückt, während das Steuerelement fokussiert war.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#Focus">Focus</a></td><td>Das Steuerelement hat den Tastaturfokus erhalten.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#LoseFocus">LoseFocus</a></td><td>Das Steuerelement hat den Tastaturfokus verloren.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#ItemCheck">ItemCheck</a></td><td>Bei einem Element wurde ein Häkchen gesetzt oder entfernt.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#ItemEdit">ItemEdit</a></td><td>Die Beschriftung eines Elements wird vom Benutzer editiert.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#ItemExpand">ItemExpand</a></td><td>Ein Element wurde auf- oder zugeklappt.</td></tr>
  <tr><td><a href="GuiOnEvent.htm#ItemSelect">ItemSelect</a></td><td>Ein Element wurde ausgewählt.</td></tr>
</table>
<p>Weitere (selten verwendete) Benachrichtigungen können mit <a href="GuiOnNotify.htm">OnNotify</a> erkannt und verarbeitet werden. Diese Benachrichtigungen sind <a href="https://learn.microsoft.com/windows/win32/controls/bumper-tree-view-control-reference-notifications">in Microsoft Docs dokumentiert</a>. Microsoft Docs zeigt normalerweise keine numerischen Werte für die Benachrichtigungscodes an; diese können im Windows SDK oder durch Suchen im Internet gefunden werden.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p id="Enter">Um einen <kbd>Enter</kbd>-Tastendruck in einer fokussierten TreeView zu erfassen, verwenden Sie eine <a href="GuiControls.htm#DefaultButton">Standardschaltfläche</a> (die bei Bedarf versteckt werden kann). Zum Beispiel:</p>
<pre>MeineGui.Add("Button", "Hidden Default", "OK").OnEvent("Click", ButtonOK)
...
ButtonOK(*) {
    global
    if MeineGui.FocusedCtrl != TV
        return
    MsgBox("Sie haben ENTER gedrückt. Die ID des ausgewählten Elements ist " TV.GetSelection())
}</pre>
<p>Zusätzlich zur elementweisen Navigation mit der Tastatur kann der Benutzer auch eine inkrementelle Suche durchführen, indem er die ersten paar Zeichen eines Elementnamens eingibt. Dadurch springt die Auswahl auf das nächst passende Element.</p>
<p>Obwohl ein beliebig langer Text in einem TreeView-Element gespeichert werden kann, werden nur die ersten 260 Zeichen angezeigt.</p>
<p>Auch wenn die TreeView theoretisch maximal 65536 Elemente enthalten kann, wird die Performanz beim Hinzufügen von Elementen schon lange vorher merklich abnehmen. Um diesen Performanzverlust etwas abzumildern, verwenden Sie den in der <a href="#Add">Add-Methode</a> beschriebenen Tipp bzgl. Redraw.</p>
<p id="ILremarks">Im Gegensatz zu den ImageLists einer <a href="ListView.htm">ListView</a> werden ImageLists einer TreeView nicht automatisch zerstört, wenn die TreeView zerstört wird. Daher sollte <a href="ListView.htm#IL_Destroy">IL_Destroy</a> nach dem Zerstören eines TreeView-Fensters aufgerufen werden, wenn die ImageList nicht länger benötigt wird. Dies ist jedoch nicht erforderlich, wenn das Skript in Kürze beendet wird, da in diesem Fall alle ImageLists automatisch zerstört werden.</p>
<p>Ein Skript kann mehr als eine TreeView pro Fenster erstellen.</p>
<p>Um eine TreeView z.B. größer/kleiner zu machen, zu verstecken oder mit einer anderen Schrift zu versehen, siehe <a href="GuiControl.htm">GuiControl-Objekt</a>.</p>
<p>Tree View eXtension (TVX) erweitert TreeViews um die Möglichkeit, Elemente zu verschieben, einzufügen und zu löschen. Siehe <a href="https://www.autohotkey.com/board/topic/17497-">diesen archivierten Forumsthread</a>.</p>
<h2 id="Related">Siehe auch</h2>
<p><a href="ListView.htm">ListView</a>, <a href="GuiControls.htm">Andere Steuerelemente</a>, <a href="Gui.htm#Call">Gui()</a>, <a href="GuiOnEvent.htm#ContextMenu">ContextMenu-Ereignis</a>, <a href="GuiControl.htm">Gui-Objekt</a>, <a href="GuiControl.htm">GuiControl-Objekt</a>, <a href="../misc/Styles.htm#TreeView">TreeView-Styles</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExAdvanced">
<p><a class="ex_number" href="#ExAdvanced"></a> Das folgende Beispiel ist ein lauffähiges Skript, das umfangreicher ist als das obige Beispiel. Es erstellt und zeigt eine TreeView, die sämtliche Ordner des Alle-Benutzer-Startmenüs enthält. Wenn der Benutzer einen Ordner auswählt, wird dessen Inhalt in einer ListView auf der rechten Seite angezeigt (wie beim Windows Explorer). Zusätzlich zeigt ein <a href="GuiControls.htm#StatusBar">StatusBar</a>-Steuerelement Informationen über den aktuell ausgewählten Ordner an.</p>
<pre><em>; Der folgende Ordner definiert den Stammordner der TreeView. Beachten Sie, dass
; das Laden lange dauern kann, wenn ein ganzes Laufwerk wie C:\ angegeben ist:</em>
TreeRoot := A_MyDocuments
TreeViewBreite := 280
ListViewBreite := A_ScreenWidth/2 - TreeViewBreite - 30

<em>; GUI-Fenster erstellen und Root-Ordner in der Titelleiste anzeigen:</em>
MeineGui := Gui("+Resize", TreeRoot)  <em>; Dem Benutzer erlauben, das Fenster zu maximieren oder dessen Größe zu ändern.</em>

<em>; Eine ImageList erstellen und mit einigen Standardsymbolen des Systems füllen:</em>
ImageListID := <a href="ListView.htm#IL_Create">IL_Create</a>(5)
Loop 5 
    <a href="ListView.htm#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index)
<em>; Eine <a href="#GuiAdd">TreeView</a> und ListView nebeneinandersetzen, ähnlich dem Windows Explorer:</em>
TV := <a href="#GuiAdd">MeineGui.Add</a>("TreeView", "r20 w" TreeViewBreite " <a href="#ImageList">ImageList</a>" ImageListID)
LV := MeineGui.Add("ListView", "r20 w" ListViewBreite " x+10", ["Name", "Änderungsdatum"])

<em>; <a href="GuiControls.htm#StatusBar">Statusleiste</a> erstellen, um Anzahl der Dateien und Gesamtgröße anzuzeigen:</em>
SB := MeineGui.Add("StatusBar")
<a href="GuiControls.htm#SB_SetParts">SB.SetParts</a>(60, 85)  <em>; Leiste in drei Segmente aufteilen (das dritte Segment füllt die restliche Breite aus).</em>

<em>; Ordner und ihre Unterordner zur TreeView hinzufügen. Status anzeigen, falls das Laden länger dauert:</em>
M := Gui("ToolWindow -SysMenu Disabled AlwaysOnTop", "Lade Baumstruktur..."), M.Show("w200 h0")
VerzListe := UnterordnerInBaumEinfügen(TreeRoot, Map())
M.Hide()

<em>; TV_ItemSelect aufrufen, wenn ein neues Element ausgewählt wird:</em>
TV.OnEvent("ItemSelect", TV_ItemSelect)

<em>; Gui_Size aufrufen, wenn die Fenstergröße geändert wird:</em>
MeineGui.OnEvent("Size", Gui_Size)

<em>; Spaltenbreiten der ListView setzen (dies ist optional):</em>
Spalte2Breite := 70  <em>; Kürzen, um nur den YYYYMMDD-Teil anzuzeigen.</em>
LV.ModifyCol(1, ListViewBreite - Spalte2Breite - 30)  <em>; Platz für den vertikalen Scrollbalken schaffen.</em>
LV.ModifyCol(2, Spalte2Breite)

<em>; Das Fenster anzeigen. Das Skript wird benachrichtigt, wenn der Benutzer eine gültige Aktion ausführt:</em>
MeineGui.Show()

UnterordnerInBaumEinfügen(Ordner, VerzListe, ElternElementID := 0)
{
    <em>; Diese Funktion fügt alle Unterordner eines Ordners zur TreeView hinzu
    ; und speichert deren Pfade zusammen mit einer ID in ein Objekt für den späteren Gebrauch.
    ; Sie ruft sich selbst rekursiv auf, um Unterordner in beliebiger Tiefe zu erfassen.</em>
    Loop Files, Ordner "\*.*", "D"  <em>; Alle Unterordner des Ordners abrufen.</em>
    {
        ElementID := <a href="#Add">TV.Add</a>(A_LoopFileName, ElternElementID, "Icon4")
        VerzListe[ElementID] := A_LoopFilePath
        VerzListe := UnterordnerInBaumEinfügen(A_LoopFilePath, VerzListe, ElementID)
    }
    return VerzListe
}

TV_ItemSelect(thisCtrl, Element)  <em>; Diese Funktion wird aufgerufen, wenn ein neues Element ausgewählt wird.</em>
{
    <em>; Dateien in die ListView einfügen:</em>
    LV.Delete()  <em>; Alle Zeilen löschen.</em>
    LV.Opt("-Redraw")  <em>; Performanz verbessern durch Abschalten von Redraw beim Laden.</em>
    GesamtGröße := 0  <em>; Für die untere Schleife initialisieren.</em>
    Loop Files, VerzListe[Element] "\*.*"  <em>; Nur die Dateien in der ListView anzeigen.</em>
    {
        LV.Add(, A_LoopFileName, A_LoopFileTimeModified)
        GesamtGröße += A_LoopFileSize
    }
    LV.Opt("+Redraw")

    <em>; Die drei Segmente der Statusleiste mit Infos über den aktuell ausgewählten Ordner aktualisieren:</em>
    <a href="GuiControls.htm#SB_SetText">SB.SetText</a>(LV.GetCount() " Dateien", 1)
    SB.SetText(Round(GesamtGröße / 1024, 1) " KB", 2)
    SB.SetText(VerzListe[Element], 3)
}

Gui_Size(thisGui, MinMax, Breite, Höhe)  <em>; ListView und TreeView kleiner/größer machen, wenn Benutzer die Fenstergröße ändert.</em>
{
    if MinMax = -1  <em>; Das Fenster wurde minimiert. Keine Aktion notwendig.</em>
        return
    <em>; Andernfalls wurde das Fenster kleiner/größer gemacht oder maximiert. Größe der Steuerelemente anpassen.</em>
    TV.GetPos(,, &amp;TV_W)
    TV.Move(,,, Höhe - 30)  <em>; -30 für StatusBar und Abstände.</em>
    LV.Move(,, Breite - TV_W - 30, Höhe - 30)
}</pre>

</div>
</body>
</html>
