<!DOCTYPE HTML>
<html lang="de">
<head>
<title>ComValue - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die ComValue-Klasse wrappt einen Wert, ein SafeArray oder ein COM-Objekt, damit er/es vom Skript verwendet oder an eine COM-Methode übergeben werden kann." />
<meta name="ahk:equiv-v1" content="lib/ComObjActive.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>ComValue</h1>

<p>Wrappt einen Wert, ein SafeArray oder ein COM-Objekt, damit er/es vom Skript verwendet oder an eine COM-Methode übergeben werden kann.</p>
<pre class="Syntax">ComObj := <span class="func">ComValue</span>(VarTyp, Wert <span class="optional">, Flags</span>)</pre>
<p><code>ComValue</code> selbst ist eine <a href="Class.htm">Klasse</a>, die von <code>Any</code> abgeleitet ist, aber nur zum Erstellen oder Identifizieren von COM-Wrapper-Objekten verwendet wird.</p>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>VarTyp</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Ein Integer, der den Typ des Wertes angibt. Eine Auflistung aller Typennummern finden Sie unter <a href="ComObjType.htm#vt">ComObjType</a>.</p>
  </dd>

  <dt>Wert</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#values">Beliebig</a></p>
    <p>Ein Wert, der gewrappt werden soll.</p>
    <p>Wenn dies ein reiner Integer ist und wenn <em>VarTyp</em> nicht VT_R4, VT_R8, VT_DATE oder VT_CY ist, wird dessen Wert direkt verwendet; insbesondere können VT_BSTR, VT_DISPATCH und VT_UNKNOWN mit einem Pointer-Wert initialisiert werden.</p>
    <p>In allen anderen Fällen wird der Wert in eine temporäre VARIANT kopiert, wobei dieselben Regeln wie bei normalen COM-Methodenaufrufen gelten. Wenn der Quellvariantentyp ungleich <em>VarTyp</em> ist, wird die Umwandlung durch Aufruf von <a href="https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-variantchangetype">VariantChangeType</a> mit einem <em>wFlags</em>-Wert von 0 versucht. Es wird eine Ausnahme ausgelöst, wenn die Umwandlung scheitert.</p>
  </dd>

  <dt>Flags</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Flags haben Einfluss auf das Verhalten des Wrapper-Objekts; siehe <a href="ComObjFlags.htm">ComObjFlags</a> für weitere Informationen.</p>
  </dd>

</dl>

<h2 id="Returns">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#objects">Objekt</a></p>
<p>Diese Funktion gibt ein Wrapper-Objekt zurück, das einen <a href="ComObjType.htm#vt">Variantentyp</a> und einen Wert oder Pointer enthält, also ComValue, ComValueRef, <a href="ComObjArray.htm">ComObjArray</a> oder <a href="ComObject.htm">ComObject</a>.</p>
<p>Dieses Objekt kann vielseitig verwendet werden:</p>
<ol>
  <li>Einige COM-Methoden können bestimmte Wertetypen benötigen, die kein direktes Äquivalent in AutoHotkey haben. Diese Funktion ermöglicht es, den Typ eines Wertes anzugeben, wenn er an eine COM-Methode übergeben wird. Zum Beispiel erstellt <code>ComValue(0xB, true)</code> ein Objekt, das den booleschen COM-Wert <em>True</em> repräsentiert.</li>
  <li>Das Wrappen eines COM-Objekts oder SafeArrays ermöglicht dem Skript eine natürlichere Interaktion mit diesem mittels <a href="../Objects.htm#Usage_Objects">Objektsyntax</a>. Die meisten Skripte müssen dies jedoch nicht manuell tun, da <a href="ComObject.htm">ComObject</a>, <a href="ComObjArray.htm">ComObjArray</a>, <a href="ComObjActive.htm">ComObjActive</a>, <a href="ComObjGet.htm">ComObjGet</a> und andere COM-Methoden, die ein Objekt zurückgeben, automatisch ein Wrapper-Objekt erstellen.</li>
  <li>Durch das Wrappen eines COM-Interface-Pointers kann das Skript von der automatischen Referenzzählung profitieren. Ein Interface-Pointer kann sofort gewrappt werden, nachdem er an das Skript zurückgegeben wurde (typischerweise von <a href="ComCall.htm">ComCall</a> oder <a href="DllCall.htm">DllCall</a>), wodurch die Notwendigkeit einer expliziten <a href="ObjAddRef.htm">Freigabe</a> zu einem späteren Zeitpunkt vermieden wird.</li>
</ol>

<h2 id="Ptr">Ptr</h2>
<p>Wenn der <a href="ComObjType.htm#vt"><em>VarTyp</em></a> eines Wrapper-Objekts VT_UNKNOWN (13) ist oder den VT_BYREF- (0x4000) oder VT_ARRAY-Flag (0x2000) enthält, kann mit der <code class="no-highlight">Ptr</code>-Eigenschaft die Adresse des Objekts, die typisierte Variable oder das SafeArray abgerufen werden. Auf diese Weise kann das ComObject selbst an einen <a href="DllCall.htm">DllCall</a>- oder <a href="ComCall.htm">ComCall</a>-Parameter vom Typ <code>"Ptr"</code> übergeben oder explizit verwendet werden. Zum Beispiel ist <code>ComObj.Ptr</code> in solchen Fällen äquivalent zu <code>ComObjValue(ComObj)</code>.</p>
<p>Wenn der <a href="ComObjType.htm#vt"><em>VarTyp</em></a> eines Wrapper-Objekts VT_UNKNOWN (13) oder VT_DISPATCH (9) ist und der gewrappte Pointer Null (0) ist, kann mit der <code class="no-highlight">Ptr</code>-Eigenschaft der aktuelle Null-Wert abgerufen oder dem Wrapper-Objekt ein Pointer zugewiesen werden. Wenn der Pointer einmal zugewiesen wurde (falls ungleich Null), wird er beim Freigeben des Wrapper-Objekts automatisch freigegeben. Dies kann zusammen mit <a href="DllCall.htm">DllCall</a>- oder <a href="ComCall.htm">ComCall</a>-Ausgabeparametern vom Typ <code>"Ptr*"</code> oder <code>"PtrP"</code> verwendet werden, um sicherzustellen, dass der Pointer automatisch freigegeben wird, z.B. wenn ein Fehler auftritt. Ein Beispiel dazu finden Sie unter <a href="ComObjQuery.htm#ExIE">ComObjQuery</a>.</p>
<p>Wenn einem Wrapper-Objekt mit <em>VarTyp</em> VT_DISPATCH (9) und einem Null-Pointer (0) ein Pointer-Wert ungleich Null zugewiesen wird, ändert sich dessen Typ von <code>ComValue</code> zu <code>ComObject</code>. Die Eigenschaften und Methoden des gewrappten Objekts werden verfügbar, während die <code class="no-highlight">Ptr</code>-Eigenschaft nicht mehr verfügbar ist.</p>

<h2 id="ByRef">ByRef</h2>
<p>Wenn der <a href="ComObjType.htm#vt"><em>VarTyp</em></a> eines Wrapper-Objekts das VT_BYREF-Flag (0x4000) enthält, können leere eckige Klammern <code>[]</code> zum Lesen oder Schreiben des referenzierten Wertes verwendet werden.</p>
<p>Beim Erstellen einer Referenz muss <em>Wert</em> die Speicheradresse einer Variable oder eines Pufferspeichers mit ausreichender Kapazität zur Aufbewahrung eines Wertes bestimmten Typs sein. Das folgende Beispiel erstellt eine Variable, die von einer VBScript-Funktion beschrieben werden kann:</p>
<pre>vbuf := Buffer(24, 0)
vref := ComValue(0x400C, vbuf.ptr)  <em>; 0x400C ist eine Kombination von VT_BYREF und VT_VARIANT.</em>

vref[] := "Eingabewert"
sc.Run("Beispiel", vref)  <em>; sc sollte wie im <a href="#ExByRef">Beispiel unten</a> initialisiert werden.</em>
MsgBox vref[]</pre>
<p>Beachten Sie, dass, obwohl alle vorherigen Werte freigegeben werden, wenn ein neuer Wert mittels <code>vref[]</code> oder der COM-Methode zugewiesen wird, der finale Wert nicht automatisch freigegeben wird. Um den Wert freizugeben, muss man wissen, um welchen Typ es sich handelt. Da es sich in diesem Fall um VT_VARIANT handelt, kann der Wert durch Aufruf von <a href="https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-variantclear">VariantClear</a> mit <a href="DllCall.htm">DllCall</a> oder durch Nutzung einer einfacheren Methode freigegeben werden: weisen Sie einen Integer zu, z.B. <code>vref[] := 0</code>.</p>
<p>Wenn die Methode eine Kombination von VT_BYREF und VT_VARIANT akzeptiert, wie oben gezeigt, kann stattdessen eine <a href="../Concepts.htm#variable-references">VarRef</a> verwendet werden. Zum Beispiel:</p>
<pre>eine_var := "Eingabewert"
sc.Run("Beispiel", &amp;eine_var)
MsgBox eine_var</pre>
<p>Einige Methoden erfordern jedoch einen spezifischeren Variantentyp, wie z.B. <code class="no-highlight">VT_BYREF | VT_I4</code>. In solchen Fällen muss die erste oben gezeigte Vorgehensweise verwendet und 0x400C mit dem entsprechenden Variantentyp ersetzt werden.</p>

<h2 id="Remarks">Allgemeine Bemerkungen</h2>
<p>Wenn diese Funktion zum Wrappen eines <a href="https://learn.microsoft.com/windows/win32/winauto/idispatch-interface">IDispatch</a>- oder IUnknown-Interface-Pointers (wenn als Integer übergeben) verwendet wird, ist das Wrapper-Objekt für die Freigabe des Pointers verantwortlich, falls erforderlich. Wenn das Skript also den Pointer nach dem Aufruf dieser Funktion weiter verwenden will, muss es zuerst <code><a href="ObjAddRef.htm">ObjAddRef</a>(DispPtr)</code> aufrufen. Dies ist jedoch nicht notwendig, wenn <em>Wert</em> selbst ein ComValue oder ComObject ist.</p>
<p>Eine Umwandlung von VT_UNKNOWN nach VT_DISPATCH führt dazu, dass <a href="https://learn.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</a> aufgerufen wird und dabei ein Interface-Pointer erzeugt werden kann, der vom Original abweicht, und dass eine Ausnahme ausgelöst wird, wenn das Objekt IDispatch nicht implementiert. Wenn dagegen <em>Wert</em> ein Integer und <em>VarTyp</em> VT_DISPATCH ist, wird der Wert direkt verwendet, d.h. der Wert muss ein IDispatch-kompatibler Interface-Pointer sein.</p>
<p>Der <em>VarTyp</em> eines Wrapper-Objekts kann mit <a href="ComObjType.htm">ComObjType</a> abgerufen werden.</p>
<p>Der <em>Wert</em> eines Wrapper-Objekts kann mit <a href="ComObjValue.htm">ComObjValue</a> abgerufen werden.</p>
<p><b>Bekannte Einschränkung:</b> Jedes Mal, wenn ein COM-Objekt gewrappt wird, wird ein neues Wrapper-Objekt erstellt. Vergleiche und Zuweisungen wie <code>obj1 == obj2</code> und <code>arr[obj1] := Wert</code> behandeln die beiden Wrapper-Objekte als nicht identisch, auch wenn sie denselben Variantentyp und Wert enthalten.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="ComObjFromPtr.htm">ComObjFromPtr</a>, <a href="ComObject.htm">ComObject</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjConnect.htm">ComObjConnect</a>, <a href="ComObjFlags.htm">ComObjFlags</a>, <a href="ObjAddRef.htm">ObjAddRef/ObjRelease</a>, <a href="ComObjQuery.htm">ComObjQuery</a>, <a href="https://learn.microsoft.com/windows/win32/api/oleauto/nf-oleauto-getactiveobject">GetActiveObject (Microsoft Docs)</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExByRef">
<p><a class="ex_number" href="#ExByRef"></a> Übergibt eine VARIANT ByRef an eine COM-Funktion.</p>
<pre>
#Requires AutoHotkey v2 32-bit <em>; 32-Bit für ScriptControl.</em>
code := "
(
Sub Beispiel(Var)
    MsgBox Var
    Var = "Ausgabewert!"
End Sub
)"
sc := ComObject("ScriptControl"), sc.Language := "VBScript", sc.AddCode(code)


<em>; Beispiel: Eine VARIANT ByRef an eine COM-Methode übergeben.</em>
var := ComVar()
var[] := "Eingabewert"
sc.Run("Beispiel", var.ref)
MsgBox var[]

<em>; Dasselbe noch einmal, aber direkter:</em>
variant_buf := Buffer(24, 0)  <em>; Einen Puffer anlegen, der groß genug für ein VARIANT ist.</em>
var := ComValue(0x400C, variant_buf.ptr)  <em>; Referenz auf ein VARIANT machen.</em>
var[] := "Eingabewert"
sc.Run("Beispiel", var)  <em>; VT_BYREF ComValue selbst übergeben, kein [] oder .ref.</em>
MsgBox var[]
<em>; Wenn ein VARIANT eine Zeichenkette oder ein Objekt enthält, muss es explizit freigegeben
; werden, indem VariantClear aufgerufen oder ein rein numerischer Wert zugewiesen wird:</em>
var[] := 0

<em>; Der einfachste Weg, wenn die Methode VT_BYREF|VT_VARIANT akzeptiert:</em>
var := "Eingabewert"
sc.Run("Beispiel", &amp;var)
MsgBox var


<em>; ComVar: Ein Objekt, mit dem ein Wert ByRef übergeben werden kann.
;   this[] ruft den Wert ab.
;   this[] := Val setzt den Wert.
;   this.ref ruft ein ByRef-Objekt zur Übergabe an eine COM-Methode ab.</em>
class ComVar {
    __new(vType := 0xC) {
        <em>; Speicher für ein VARIANT reservieren, damit unser Wert hineinpasst. VARIANT wird auch dann
        ; verwendet, wenn vType != VT_VARIANT, damit VariantClear von __delete verwendet werden kann.</em>
        this.var := Buffer(24, 0)
        <em>; Ein Objekt erstellen, mit dem die Variable ByRef übergeben werden kann.</em>
        this.ref := ComValue(0x4000|vType, this.var.ptr + (vType=0xC ? 0 : 8))
        <em>; Variantentyp für VariantClear speichern (wenn nicht VT_VARIANT).</em>
        if vType != 0xC
            NumPut "ushort", vType, this.var
    }
    __item {
        get =&gt; this.ref[]
        set =&gt; this.ref[] := value
    }
    __delete() {
        DllCall("oleaut32\VariantClear", "ptr", this.var)
    }
}
</pre>
</div>

</body>
</html>
