<!DOCTYPE HTML>
<html lang="de">
<head>
<title>ComObjQuery - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die ComObjQuery-Funktion fragt ein COM-Objekt nach einem Interface oder Service ab." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>ComObjQuery</h1>
<p>Fragt ein COM-Objekt nach einem Interface oder Service ab.</p>
<pre class="Syntax">InterfaceComObj := <span class="func">ComObjQuery</span>(ComObj, SID, IID)
InterfaceComObj := <span class="func">ComObjQuery</span>(ComObj, IID)</pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>ComObj</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#objects">Objekt</a> oder <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Ein COM-Wrapper-Objekt, Interface-Pointer, oder ein Objekt mit einer <code class="no-highlight">Ptr</code>-Eigenschaft, die einen Interface-Pointer zurückgibt. Weitere Informationen finden Sie unter <a href="ComValue.htm">ComValue</a>.</p>
  </dd>

  <dt>IID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Ein Interface-Identifikator (GUID) im Format "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}".</p>
  </dd>

  <dt>SID</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Ein Service-Identifikator im selben Format wie IID.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#objects">Objekt</a></p>
<p>Diese Funktion gibt ein COM-Wrapper-Objekt zurück, dessen Typ vom IID-Parameter abhängt.</p>
<table class="info">
  <tr><th>IID</th><th>Klasse</th><th abbr="Typ">Variantentyp</th><th abbr="Beschr">Beschreibung</th></tr>
  <tr>
    <td>IID_IDispatch</td>
    <td><code style="white-space:nowrap">ComObject</code></td>
    <td><span style="white-space:nowrap">VT_DISPATCH (9)</span></td>
    <td>Erlaubt dem Skript, Eigenschaften und Methoden des Objekts mit normaler <a href="../Objects.htm#Usage_Objects">Objektsyntax</a> aufzurufen.</td>
  </tr>
  <tr>
    <td>Andere IID</td>
    <td><code style="white-space:nowrap">ComValue</code></td>
    <td><span style="white-space:nowrap">VT_UNKNOWN (13)</span></td>
    <td>Stellt nur eine <code class="no-highlight">Ptr</code>-Eigenschaft bereit, mit der das Objekt an <a href="DllCall.htm">DllCall</a> oder <a href="ComCall.htm">ComCall</a> übergeben werden kann.</td>
  </tr>
</table>

<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p>Bei Misserfolg wird eine Ausnahme ausgelöst, z.B. wenn das Interface nicht unterstützt wird.</p>

<h2 id="Remarks">Bemerkungen</h2>
<p>Im Zwei-Parameter-Modus ist diese Funktion äquivalent zu <a href="https://learn.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</a>. Sind sowohl SID als auch IID angegeben, fragt die Funktion intern nach dem <a href="https://learn.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/cc678965(v=vs.85)">IServiceProvider</a>-Interface ab und ruft anschließend <a href="https://learn.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/cc678966(v=vs.85)">IServiceProvider::QueryService</a> auf.</p>
<p><a href="ComCall.htm">ComCall</a> kann verwendet werden, um native Interface-Methoden aufzurufen.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="ComCall.htm">ComCall</a>, <a href="ComObject.htm">ComObject</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjActive.htm">ComObjActive</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExClassName">
<p><a class="ex_number" href="#ExClassName"></a> Ermittelt den Klassennamen eines Objekts.</p>
<pre>
obj := ComObject("Scripting.Dictionary")

MsgBox "Interface-Name: " ComObjType(obj, "name")

IID_IProvideClassInfo := "{B196B283-BAB4-101A-B69C-00AA00341D07}"

<em>; IProvideClassInfo-Interface des Objekts anfordern.</em>
try
    pci := ComObjQuery(obj, IID_IProvideClassInfo)
catch
{
    MsgBox "IProvideClassInfo-Interface wird nicht unterstützt."
    return
}

<em>; GetClassInfo aufrufen, um einen Pointer zu erhalten, der auf das ITypeInfo-Interface verweist.</em>
ComCall(3, pci, "ptr*", &amp;ti := 0)

<em>; ti wrappen, um automatische Säuberung zu ermöglichen.</em>
ti := ComValue(13, ti)

<em>; GetDocumentation aufrufen, um den vollständigen Typnamen des Objekts zu erhalten.</em>
ComCall(12, ti, "int", -1, "ptr*", &amp;pname := 0, "ptr", 0, "ptr", 0, "ptr", 0)

<em>; Den BSTR-Pointer in eine brauchbare Zeichenkette umwandeln.</em>
name := StrGet(pname, "UTF-16")

<em>; Säuberung.</em>
DllCall("oleaut32\SysFreeString", "ptr", pname)
pci := ti := ""

<em>; Den Typnamen anzeigen!</em>
MsgBox "Klassenname: " name
</pre>
</div>

<div class="ex" id="ExIE">
<p><a class="ex_number" href="#ExIE"></a> Automatisiert ein vorhandenes Internet-Explorer-Fenster.</p>
<pre>
sURL := "https://www.autohotkey.com/boards/"
if WebBrowser := GetWebBrowser()
    WebBrowser.Navigate(sURL)

GetWebBrowser()
{
    <em>; Einen rohen Pointer abrufen, der auf das Document-Objekt des obersten IE-Fensters verweist.</em>
    static msg := DllCall("RegisterWindowMessage", "Str", "WM_HTML_GETOBJECT")
    lResult := SendMessage(msg, 0, 0, "Internet Explorer_Server1", "ahk_class IEFrame")
    if !lResult
        return  <em>; IE nicht gefunden.</em>
    static IID_IHTMLDocument2 := GUID("{332C4425-26CB-11D0-B483-00C04FD90119}")
    static VT_UNKNOWN := 13
    DllCall("oleacc\ObjectFromLresult", "Ptr", lResult
        , "Ptr", IID_IHTMLDocument2, "Ptr", 0
        , "Ptr*", pdoc := ComValue(VT_UNKNOWN, 0))
    
    <em>; WebBrowserApp-Service anfordern. In diesem bestimmten Fall sind
    ; SID und IID identisch, was nicht immer der Fall ist.</em>
    static IID_IWebBrowserApp := "{0002DF05-0000-0000-C000-000000000046}"
    static SID_SWebBrowserApp := IID_IWebBrowserApp
    pweb := ComObjQuery(pdoc, SID_SWebBrowserApp, IID_IWebBrowserApp)
    
    <em>; WebBrowser-Objekt als IDispatch in verwendbarer Form zurückgeben:
    ; Dies funktioniert nur, da IWebBrowserApp von IDispatch abgeleitet ist.
    ; pweb wird seinen ptr automatisch freigeben, daher AddRef verwenden.</em>
    ObjAddRef(pweb.ptr)
    static VT_DISPATCH := 9
    return ComValue(VT_DISPATCH, pweb.ptr)
}

GUID(sGUID) <em>; Wandelt eine Zeichenkette in eine binäre GUID um und gibt sie in einem Buffer zurück.</em>
{
    GUID := Buffer(16, 0)
    if DllCall("ole32\CLSIDFromString", "WStr", sGUID, "Ptr", GUID) &lt; 0
        throw ValueError("Ungültiger Parameter #1", -1, sGUID)
    return GUID
}
</pre>
</div>

</body>
</html>
