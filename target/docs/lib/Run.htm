<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Run / RunWait - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die Funktionen Run und RunWait starten ein externes Programm. RunWait wartet zusätzlich auf dessen Beendigung." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
<style type="text/css">
.style3 {color: #000; background: rgba(255, 255, 0, 0.4);}
</style>
</head>
<body>

<h1>Run / RunWait</h1>

<p>Startet ein externes Programm. RunWait wartet zusätzlich auf dessen Beendigung.</p>

<pre class="Syntax">
<span class="func">Run</span> Ziel <span class="optional">, ArbeitVerz, Optionen, &amp;AusgabeVarPID</span>
ExitCode := <span class="func">RunWait</span>(Ziel <span class="optional">, ArbeitVerz, Optionen, &amp;AusgabeVarPID</span>)
</pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>Ziel</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Ein Dokument, eine URL, eine ausführbare Datei (.exe, .com, .bat usw.), eine Verknüpfung (.lnk), eine <a href="#CLSID">CLSID</a> oder ein <a href="#verbs">Systemverb</a> (siehe Bemerkungen). Wenn <em>Ziel</em> eine lokale Datei ohne Pfadangabe ist, hängt die Ortsbestimmung der Datei normalerweise vom Dateityp und anderen Bedingungen ab. Weitere Informationen finden Sie unter <a href="#Interpretation_of_Target">Interpretation von Ziel</a>.</p>
      <p>Um Parameter zu übergeben, fügen Sie diese wie folgt direkt nach dem Programm- oder Dokumentnamen hinzu:</p>
      <pre>Run 'MeinProgramm.exe Param1 Param2'</pre>
      <p>Wenn der Programm-/Dokumentname oder ein Parameter Leerzeichen enthält, ist es am sichersten, ihn wie folgt in doppelte Anführungszeichen zu setzen (obwohl es in einigen Fällen auch ohne geht):</p>
      <pre>Run '"Mein Programm.exe" "Param mit Leerzeichen"'</pre>
  </dd>

  <dt>ArbeitVerz</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Wenn leer oder weggelassen, wird das Arbeitsverzeichnis des Skripts verwendet (<a href="../Variables.htm#WorkingDir">A_WorkingDir</a>). Andernfalls geben Sie das anfängliche Arbeitsverzeichnis an, das vom neuen Prozess verwendet werden soll. Dies betrifft in der Regel auch relative Pfade in <em>Ziel</em>, aber die Interpretation von Befehlszeilenparametern hängt vom Zielprogramm ab.</p>
  </dd>

  <dt>Optionen</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
      <p>Wenn leer oder weggelassen, wird <em>Ziel</em> normal gestartet. Andernfalls geben Sie eine oder mehrere der folgenden Optionen an:</p>
      <p><strong>Max:</strong> Maximiert starten</p>
      <p><strong>Min:</strong> Minimiert starten</p>
      <p><strong>Hide:</strong> Versteckt starten (kann nicht zusammen mit einem der obigen verwendet werden)</p>
      <p class="note"><strong>Hinweis:</strong> Einige Anwendungen (z.B. Calc.exe) ignorieren den angeforderten Startzustand, so dass Max/Min/Hide keine Wirkung hat.</p>
  </dd>

  <dt>&amp;AusgabeVarPID</dt>
  <dd>
      <p>Typ: <a href="../Concepts.htm#variable-references">VarRef</a></p>
      <p>Wenn weggelassen, wird der zugehörige Wert nicht gespeichert. Andernfalls geben Sie eine Referenz an, die auf eine Ausgabevariable verweist, in der die eindeutige <a href="../misc/WinTitle.htm#ahk_pid">Prozess-ID (PID)</a> des neuen Programms, das gestartet wurde, gespeichert werden soll. Die Variable wird leer gemacht, wenn die PID nicht ermittelt werden konnte. Dies geschieht in der Regel, wenn ein Systemverb, ein Dokument oder eine Verknüpfung anstelle einer direkt ausführbaren Datei gestartet wird. RunWait unterstützt diesen Parameter auch, allerdings muss seine <em>AusgabeVarPID</em> in einem <a href="../misc/Threads.htm">anderen Thread</a> geprüft werden (andernfalls wäre die PID ungültig, weil der Prozess nach der Ausführung von RunWait nicht mehr existiert).</p>
      <p>Nachdem die Run-Funktion eine PID abgerufen hat, ist es möglich, dass die vom Prozess zu erstellenden Fenster noch nicht existieren. Um auf mindestens eines dieser Fenster zu warten, verwenden Sie <code><a href="WinWait.htm">WinWait</a> "ahk_pid " AusgabeVarPID</code>.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>RunWait wartet im Gegensatz zu Run, bis <em>Ziel</em> geschlossen oder beendet wird und gibt dann den Exitcode des Programms zurück (ein vorzeichenfähiger 32-Bit-Integer). Einige Programme geben sofort einen Exitcode zurück, obwohl sie noch laufen; solche Programme erzeugen einen weiteren Prozess.</p>

<h2 id="Error_Handling">Fehlerbehandlung</h2>
<p>Wenn <em>Ziel</em> nicht gestartet werden kann, wird eine Ausnahme ausgelöst (d.h. eine Fehlermeldung angezeigt) und der aktuelle Thread beendet, es sei denn, der Fehler wird mit einer <a href="Try.htm">Try</a>/<a href="Catch.htm">Catch</a>-Anweisung abgefangen. Zum Beispiel:</p>
<pre>try
    Run "NichtExistierendeDatei"
catch
    MsgBox "Datei existiert nicht."
</pre>
<p>Die interne Variable <a href="../Variables.htm#LastError">A_LastError</a> wird auf das Ergebnis der Systemfunktion GetLastError() gesetzt.</p>
<h2 id="Interpretation_of_Target">Interpretation von Ziel</h2>
<p>Run/RunWait selbst interpretiert keine Befehlszeilenparameter und sucht nicht die Zieldatei. Stattdessen wird versucht, das Ziel wie folgt auszuführen:</p>
<ul>
  <li>Wenn kein Verb angegeben ist, wird <em>Ziel</em> unverändert an den <em>lpCommandLine</em>-Parameter von <a href="https://learn.microsoft.com/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw">CreateProcess</a> übergeben.</li>
  <li>Wenn ein Verb angegeben ist oder CreateProcess fehlschlägt, und <a href="RunAs.htm">RunAs</a> nicht aktiv ist, wird <a href="https://learn.microsoft.com/windows/win32/api/shellapi/nf-shellapi-shellexecuteexw">ShellExecuteEx</a> versucht.</li>
</ul>
<p>Wenn <em>Ziel</em> einen Namen, aber kein Verzeichnis angibt, wird das System die Datei suchen und ggf. starten, wenn sie integriert ("bekannt") ist, z.B. weil sie in einem der PATH-Ordner enthalten ist. Die genaue Suchreihenfolge hängt davon ab, ob CreateProcess und/oder ShellExecuteEx aufgerufen wird. Wenn CreateProcess aufgerufen wird, hat das Programmverzeichnis (das den AutoHotkey-Interpreter oder das kompilierte Skript enthält) Vorrang vor <em>ArbeitVerz</em>. Um das zu verhindern, geben Sie das Verzeichnis an, z.B. <code class="no-highlight">.\Programm.exe</code>.</p>
<p>Wenn ShellExecuteEx versucht wird, wird <em>Ziel</em> wie folgt interpretiert:</p>
<ul>
  <li>Die Teilzeichenkette von <em>Ziel</em>, die mit dem ersten Leer- oder Tabulatorzeichen endet, kann entweder ein <a href="#verbs">vordefinierter Verbname</a> oder ein Sternchen gefolgt von einem Verbnamen sein. Falls vorhanden, werden das optionale Sternchen, der Verbname und ein einzelnes separierendes Leer- oder Tabulatorzeichen von der weiteren Interpretation ausgeschlossen. Verbnamen, die Leer- oder Tabulatorzeichen enthalten, werden nicht unterstützt, aber Symbole wie Bindestriche sind erlaubt.</li>
  <li>Wenn ein doppeltes Anführungszeichen am Anfang vorhanden ist, wird die Teilzeichenkette zwischen diesem und dem nächsten doppelten Anführungszeichen als Zieldatei oder Aktion interpretiert.</li>
  <li>Andernfalls wird die erste Teilzeichenkette, die mit einem Leerzeichen endet und entweder eine vorhandene Datei ist (angegeben durch den absoluten Pfad oder relativ zu <em>ArbeitVerz</em>) oder auf .exe, .bat, .com, .cmd oder .hta endet, als Aktion interpretiert. Dadurch können Dateitypen wie beispielsweise .ahk, .vbs oder .lnk beliebige Parameter akzeptieren, während "bekannte" EXE-Dateien wie wordpad.exe weiterhin ohne absoluten Pfad gestartet werden können.</li>
  <li>Ein einzelnes separierendes Leerzeichen wird ignoriert, falls vorhanden, und der Rest von <em>Ziel</em> wird unverändert an CreateProcess oder ShellExecuteEx als Befehlszeilenparameter übergeben.</li>
</ul>
<h2 id="Remarks">Bemerkungen</h2>
<p>Wenn ein Programm via <a href="../Variables.htm#ComSpec">ComSpec</a> (cmd.exe) gestartet wird, um z.B. die Ein- oder Ausgabe des Programms umzuleiten, muss, sofern Leerzeichen im Pfad oder Namen der ausführbaren Datei enthalten sind, die komplette Zeichenkette mit einem äußeren Paar von Anführungszeichen umschlossen werden. Im folgenden Beispiel sind die äußeren Anführungszeichen gelb hervorgehoben:</p>
<pre>Run A_ComSpec ' /c <span class="style3">"</span>"C:\Mein Tool.exe" "param 1" "zweiter param" &gt;"C:\Meine Datei.txt"<span class="style3">"</span>'</pre>
<p>Die Performanz kann etwas verbessert werden, wenn <em>Ziel</em> ein genauer Pfad ist, z.B. <code>Run 'C:\Windows\Notepad.exe "C:\Meine Dokumente\Test.txt"'</code> anstelle von <code>Run "C:\Meine Dokumente\Test.txt"</code>.</p>
<p id="CLSID">Es können spezielle <a href="../misc/CLSID-List.htm">CLSIDs</a> via Run geöffnet werden. Die meisten von ihnen können mit dem Präfix shell: geöffnet werden. Einige können auch ohne dieses Präfix geöffnet werden. Zum Beispiel:</p>
<pre>Run "shell:::{D20EA4E1-3957-11D2-A40B-0C5020524153}"  <em>; Windows-Tools.</em>
Run "::{20D04FE0-3AEA-1069-A2D8-08002B30309D}"  <em>; Dieser PC (ehemals Arbeitsplatz oder Computer).</em>
Run "::{645FF040-5081-101B-9F08-00AA002F954E}"  <em>; Papierkorb.</em></pre>
<p id="verbs">Systemverben beziehen sich auf Aktionen, die im Rechtsklickmenü einer Datei innerhalb des Explorers verfügbar sind. Wenn eine Datei ohne Verb gestartet wird, wird das Standardverb (üblicherweise "open") für diesen bestimmten Dateityp verwendet. Andernfalls geben Sie das Verb vor dem Namen der Zieldatei an. Zurzeit werden folgende Verben unterstützt:</p>
<table class="info">
  <tr>
    <th style="width:8%">Verb</th>
    <th abbr="Beschr">Beschreibung</th>
  </tr>
  <tr>
    <td>*<i>verb</i></td>
    <td>Ein beliebiges systemdefiniertes oder benutzerdefiniertes Verb. Zum Beispiel: <code>Run "*Compile " A_ScriptFullPath</code>. Das Verb <a href="#RunAs">*RunAs</a> kann als Ersatz für den Kontextmenüpunkt <i>Als Administrator ausführen</i> verwendet werden.</td>
  </tr>
  <tr>
    <td>properties</td>
    <td>
      <p>Zeigt das Eigenschaftenfenster des Explorers für die angegebene Datei an. Zum Beispiel: <code>Run 'properties "C:\Meine Datei"'</code></p>
      <p class="note"><strong>Hinweis:</strong> Das Eigenschaftenfenster wird automatisch bei Beendigung des Skripts geschlossen. Um das zu verhindern, verwenden Sie <a href="WinWait.htm">WinWait</a>, um auf das Erscheinen des Fensters zu warten, und dann <a href="WinWaitClose.htm">WinWaitClose</a>, um auf das Schließen des Fensters zu warten.</p>
    </td>
  </tr>
  <tr>
    <td>find</td>
    <td>Öffnet eine Instanz des Suchassistenten oder des Suchergebnisfensters des Explorers im angegebenen Ordner. Zum Beispiel: <code>Run "find D:\"</code></td>
  </tr>
  <tr>
    <td>explore</td>
    <td>Öffnet eine Instanz des Explorers im angegebenen Ordner. Zum Beispiel: <code>Run "explore " A_ProgramFiles</code>.</td>
  </tr>
  <tr>
    <td>edit</td>
    <td>Öffnet die angegebene Datei zum Editieren. Dieser Vorgang kann fehlschlagen, wenn der Dateityp der angegebenen Datei keine Edit-Aktion hat. Zum Beispiel: <code>Run 'edit "C:\Meine Datei.txt"'</code></td>
  </tr>
  <tr>
    <td>open</td>
    <td>Öffnet die angegebene Datei (normalerweise nicht notwendig, da es die Standardaktion für die meisten Dateitypen ist). Zum Beispiel: <code>Run 'open "Meine Datei.txt"'</code>.</td>
  </tr>
  <tr>
    <td>print</td>
    <td>Druckt die angegebene Datei mit der zugehörigen Anwendung, falls vorhanden. Zum Beispiel: <code>Run 'print "Meine Datei.txt"'</code></td>
  </tr>
</table>
<p>Während RunWait wartet, können neue <a href="../misc/Threads.htm">Threads</a> via <a href="../Hotkeys.htm">Hotkeys</a>, <a href="Menu.htm">benutzerdefinierte Menüpunkte</a> oder <a href="SetTimer.htm">Timer</a> gestartet werden.</p>

<h2 id="RunAs">Als Administrator ausführen</h2>
<p>Bei einer ausführbaren Datei entspricht das Verb <em>*RunAs</em> der Auswahl des Menüpunkts <em>Als Administrator ausführen</em> im Rechtsklickmenü der Datei. Zum Beispiel versucht der folgende Code, das aktuelle Skript mit Adminrechten neu zu starten:</p>
<pre>full_command_line := DllCall("GetCommandLine", "str")

if not (A_IsAdmin or RegExMatch(full_command_line, " /restart(?!\S)"))
{
    try
    {
        if A_IsCompiled
            Run '*RunAs "' A_ScriptFullPath '" /restart'
        else
            Run '*RunAs "' A_AhkPath '" /restart "' A_ScriptFullPath '"'
    }
    ExitApp
}

MsgBox "A_IsAdmin: " A_IsAdmin "`nCommand line: " full_command_line</pre>
<p>Wenn der Benutzer das Bestätigungsfenster der <a href="https://en.wikipedia.org/wiki/User_Account_Control">Benutzerkontensteuerung</a> (engl. User Account Control, kurz UAC) abbricht oder wenn Run aus einem anderen Grund fehlschlägt, wird das Skript einfach beendet.</p>
<p>Das <a href="../Scripts.htm#SlashR">/restart</a> stellt sicher, dass keine <a href="_SingleInstance.htm">Einzelinstanz</a>-Nachfrage erscheint, wenn eine neue Instanz des Skripts gestartet wird, bevor ExitApp aufgerufen wird.</p>
<p>Wenn UAC deaktiviert ist, wird <em>*RunAs</em> den Prozess ohne Erhöhung seiner Berechtigungen starten. Es wird geprüft, ob <code class="no-highlight">/restart</code> in der Befehlszeile vorkommt, um sicherzustellen, dass das Skript nicht in eine ausweglose Schleife gerät. Beachten Sie, dass <code class="no-highlight">/restart</code> ein interner Parameter ist und daher nicht im <a href="../Scripts.htm#cmd_args">Befehlszeilenparameter-Array</a> enthalten ist.</p>
<p>Das Beispiel kann jederzeit nach Belieben angepasst werden:</p>
<ul>
  <li>Wenn das Skript unbedingt Adminrechte benötigt, prüfen Sie <a href="../Variables.htm#IsAdmin">A_IsAdmin</a> ein zweites Mal, falls <em>*RunAs</em> die Berechtigungen des Skripts nicht erhöhen konnte (z.B. weil UAC deaktiviert ist).</li>
  <li>Um das Skript auch dann weiterlaufen zu lassen, wenn der Benutzer das UAC-Bestätigungsfenster abbricht, verschieben Sie <a href="ExitApp.htm">ExitApp</a> in den Try-Block.</li>
  <li>Um das Skript auch dann weiterlaufen zu lassen, wenn es nicht neu gestartet werden konnte (z.B. weil die Skriptdatei geändert oder gelöscht wurde), entfernen Sie ExitApp und ersetzen Sie Run mit RunWait. Bei Erfolg bewirkt <code class="no-highlight">/restart</code>, dass die neue Instanz die alte terminiert. Bei Misserfolg wird die neue Instanz beendet und RunWait gestoppt.</li>
</ul>
<p>Der AutoHotkey-Installer registriert das <em>RunAs</em>-Verb für <em>.ahk</em>-Dateien, wodurch <code>Run "*RunAs skript.ahk"</code> ein Skript als Administrator starten kann.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="RunAs.htm">RunAs</a>, <a href="Process.htm">Process-Funktionen</a>, <a href="Exit.htm">Exit</a>, <a href="../misc/CLSID-List.htm">CLSID-Liste</a>, <a href="DllCall.htm">DllCall</a></p>

<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Run kann Windows-Systemprogramme aus einem beliebigen Verzeichnis heraus starten. Beachten Sie, dass Endungen von ausführbaren Dateien wie z.B. ".exe" weggelassen werden können.</p>
<pre>Run "notepad"</pre>
</div>

<div class="ex" id="ExURL">
<p><a class="ex_number" href="#ExURL"></a> Run kann URLs starten:</p>
<p>Folgendes öffnet eine Internetadresse im Standard-Webbrowser des Benutzers.</p>
<pre>Run "https://www.google.com"</pre>
<p>Folgendes öffnet die Standard-E-Mail-Anwendung mit ausgefülltem Empfänger.</p>
<pre>Run "mailto:someone@somedomain.com"</pre>
<p>Folgendes macht dasselbe wie oben, plus Betreff und Haupttext.</p>
<pre>Run "mailto:someone@somedomain.com?subject=Das ist die Betreffzeile.&amp;body=Das ist der Haupttext der Nachricht."</pre>
</div>

<div class="ex" id="ExErrorLevel">
<p><a class="ex_number" href="#ExErrorLevel"></a> Öffnet ein Dokument in einer maximierten Anwendung und zeigt bei Misserfolg eine benutzerdefinierte Fehlermeldung an.</p>
<pre>try Run("ReadMe.doc", , "Max")
if A_LastError
    MsgBox "Das Dokument konnte nicht geöffnet werden."</pre>
</div>

<div class="ex" id="ExVerb">
<p><a class="ex_number" href="#ExVerb"></a> Führt den dir-Befehl im minimierten Zustand aus und speichert die Ausgabe in eine Textdatei. Anschließend wird die Textdatei geöffnet und ihr Eigenschaftenfenster angezeigt.</p>
<pre>RunWait A_ComSpec " /c dir C:\ &gt;&gt;C:\DirTest.txt", , "Min"
Run "C:\DirTest.txt"
Run "properties C:\DirTest.txt"
Persistent  <em>; Verhindern, dass sich das Skript beendet, sonst wird das Eigenschaftenfenster geschlossen.</em></pre>
</div>

<div class="ex" id="ExCLSID">
<p><a class="ex_number" href="#ExCLSID"></a> Run kann <a href="../misc/CLSID-List.htm">CLSIDs</a> starten:</p>
<p>Folgendes öffnet den Papierkorb.</p>
<pre>Run "::{645FF040-5081-101B-9F08-00AA002F954E}"</pre>
<p>Folgendes öffnet Dieser PC (ehemals Arbeitsplatz oder Computer).</p>
<pre>Run "::{20D04FE0-3AEA-1069-A2D8-08002B30309D}"</pre>
</div>

<div class="ex" id="ExMultipleCmds">
<p><a class="ex_number" href="#ExMultipleCmds"></a> Mit "&amp;&amp;" können mehrere Befehle nacheinander ausgeführt werden.</p>
<pre>Run A_ComSpec " /c dir /b &gt; C:\Liste.txt &amp;&amp; type C:\Liste.txt &amp;&amp; pause"</pre>
</div>

<div class="ex" id="ExStdOut">
<p><a class="ex_number" href="#ExStdOut"></a> Die folgenden benutzerdefinierten Funktionen können verwendet werden, um einen einzelnen Befehl auszuführen und dessen Ausgabe abzurufen oder um mehrere Befehle auf einmal auszuführen und deren Ausgabe abzurufen. Bezüglich des WshShell-Objekts siehe <a href="https://learn.microsoft.com/previous-versions/aew9yb99(v=vs.85)">Microsoft Docs</a>.</p>
<pre>MsgBox RunWaitEin("dir " A_ScriptDir)

MsgBox RunWaitViele("
(
echo Fügen Sie hier Ihre Befehle ein,
echo die ausgeführt werden sollen,
echo um danach ihre Ausgaben zu erhalten.
)")

RunWaitEin(Befehl) {
    shell := ComObject("WScript.Shell")
    <em>; Einen Befehl via cmd.exe ausführen</em>
    exec := shell.Exec(A_ComSpec " /C " Befehl)
    <em>; Ausgabe des Befehls lesen und zurückgeben</em>
    return exec.StdOut.ReadAll()
}

RunWaitViele(Befehle) {
    shell := ComObject("WScript.Shell")
    <em>; cmd.exe mit deaktivierter Textanzeige öffnen</em>
    exec := shell.Exec(A_ComSpec " /Q /K echo off")
    <em>; Befehle zum Ausführen senden, getrennt durch Zeilenumbruch</em>
    exec.StdIn.WriteLine(Befehle "`nexit")  <em>; Immer ein Exit am Ende!</em>
    <em>; Ausgaben aller Befehle lesen und zurückgeben</em>
    return exec.StdOut.ReadAll()
}
</pre>
</div>

<div class="ex" id="ExecScript">
<p><a class="ex_number" href="#ExecScript"></a> Führt den angegebenen Code als neuen AutoHotkey-Prozess aus.</p>
<pre>SkriptAusführen(Skript, Warten:=true)
{
    shell := ComObject("WScript.Shell")
    exec := shell.Exec("AutoHotkey.exe /ErrorStdOut *")
    exec.StdIn.Write(Skript)
    exec.StdIn.Close()
    if Warten
        return exec.StdOut.ReadAll()
}

<em>; Beispiel:</em>
ib := InputBox("Tragen Sie einen Ausdruck ein, der als neuer Skript ausgewertet werden soll.",,, 'Ord("*")')
if ib.result = "Cancel"
    return
Ergebnis := SkriptAusführen('FileAppend ' ib.value ', "*"')
MsgBox "Ergebnis: " Ergebnis
</pre>
</div>

</body>
</html>
