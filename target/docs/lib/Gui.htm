<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Gui-Objekt - Methoden &amp; Eigenschaften | AutoHotkey v2</title>
<meta name="description" content="Das Gui-Objekt bietet eine Schnittstelle zum Erstellen eines Fensters, Hinzufügen von Steuerelementen, Ändern des Fensters und Abrufen von Informationen über das Fenster. Solche Fenster können zur Dateneingabe oder als individuelle Benutzerschnittstellen verwendet werden." />
<meta name="ahk:equiv-v1" content="lib/Gui.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Gui-Objekt</h1>
<pre class="NoIndent">class Gui extends Object</pre>

<p>Bietet eine Schnittstelle zum Erstellen eines Fensters, Hinzufügen von Steuerelementen, Ändern des Fensters und Abrufen von Informationen über das Fenster. Solche Fenster können zur Dateneingabe oder als individuelle Benutzerschnittstellen verwendet werden.</p>
<p>Gui-Objekte können mit <a href="#Call">Gui()</a> erstellt und mit <a href="GuiFromHwnd.htm">GuiFromHwnd</a> abgerufen werden.</p>

<p>"MeineGui" wird hier stellvertretend für ein beliebiges Gui-Objekt (und als Variablenname in den Beispielen) verwendet, da "Gui" die Klasse selbst ist.</p>
<p>Zusätzlich zu den von <a href="Object.htm">Object</a> geerbten Methoden und Eigenschaften haben Gui-Objekte die folgenden vordefinierten Methoden und Eigenschaften.</p>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ul class="indent">
  <li><a href="#Static_Methods">Statische Methoden</a>:
    <ul>
      <li><a href="#Call">Call</a>: Erstellt ein neues Fenster.</li>
    </ul>
  </li>
  <li><a href="#Methods">Methoden</a>:
    <ul>
      <li><a href="#Add">Add</a>: Erstellt ein neues Steuerelement und fügt es dem Fenster hinzu.</li>
      <li><a href="#Destroy">Destroy</a>: Löscht das Fenster.</li>
      <li><a href="#Flash">Flash</a>: Lässt das Fenster und seine Taskleistenschaltfläche einmal aufblinken.</li>
      <li><a href="#GetClientPos">GetClientPos</a>: Ruft die Position und Größe des Clientbereichs des Fensters ab.</li>
      <li><a href="#GetPos">GetPos</a>: Ruft die Position und Größe des Fensters ab.</li>
      <li><a href="#Hide">Hide</a>: Versteckt das Fenster.</li>
      <li><a href="#Maximize">Maximize</a>: Macht das Fenster sichtbar und maximiert es.</li>
      <li><a href="#Minimize">Minimize</a>: Macht das Fenster sichtbar und minimiert es.</li>
      <li><a href="#Move">Move</a>: Verschiebt das Fenster und/oder ändert dessen Größe.</li>
      <li><a href="#OnEvent">OnEvent</a>: Registriert eine Funktion oder Methode, die aufgerufen wird, wenn ein bestimmtes Ereignis ausgelöst wird.</li>
      <li><a href="#Opt">Opt</a>: Setzt verschiedene Optionen und Styles für das Aussehen und Verhalten des Fensters.</li>
      <li><a href="#Restore">Restore</a>: Macht das Fenster sichtbar und entminimiert oder entmaximiert es.</li>
      <li><a href="#SetFont">SetFont</a>: Bestimmt Schriftart, -größe, -stil und -farbe für danach erstellte Steuerelemente.</li>
      <li><a href="#Show">Show</a>: Macht das Fenster sichtbar. Kann auch minimieren, maximieren oder verschieben.</li>
      <li><a href="#Submit">Submit</a>: Sammelt die Werte von benannten Steuerelementen und bildet daraus ein <a href="Object.htm">Object</a>. Kann optional das Fenster verstecken.</li>
      <li><a href="#__Enum">__Enum</a>: Enumeriert die Steuerelemente des Fensters.</li>
      <li><a href="#__New">__New</a>: Konstruiert eine neue Gui-Instanz.</li>
    </ul>
  </li>
  <li><a href="#Properties">Eigenschaften</a>:
    <ul>
      <li><a href="#BackColor">BackColor</a>: Ermittelt oder setzt die Hintergrundfarbe des Fensters.</li>
      <li><a href="#FocusedCtrl">FocusedCtrl</a>: Ruft das <a href="GuiControl.htm">GuiControl-Objekt</a> des fokussierten Steuerelements im Fenster ab.</li>
      <li><a href="#Hwnd">Hwnd</a>: Ruft das Fensterhandle (HWND) des Fensters ab.</li>
      <li><a href="#MarginX">MarginX</a>: Ermittelt oder setzt die Größe der horizontalen Abstände zwischen den Rändern und danach erstellten Steuerelementen.</li>
      <li><a href="#MarginY">MarginY</a>: Ermittelt oder setzt die Größe der vertikalen Abstände zwischen den Rändern und danach erstellten Steuerelementen.</li>
      <li><a href="#MenuBar">MenuBar</a>: Ermittelt oder setzt die Menüleiste des Fensters.</li>
      <li><a href="#Name">Name</a>: Ermittelt oder setzt einen benutzerdefinierten Namen für das Fenster.</li>
      <li><a href="#Title">Title</a>: Ermittelt oder setzt den Titel des Fensters.</li>
      <li><a href="#__Item">__Item</a>: Ruft das <a href="GuiControl.htm">GuiControl-Objekt</a> ab, das dem angegebenen Namen, Text, ClassNN oder HWND zugeordnet ist.</li>
    </ul>
  </li>
  <li>Allgemein:
    <ul>
      <li><a href="#Navigate">Navigation mit der Tastatur</a></li>
      <li><a href="#Appear">Fensterdarstellung</a></li>
      <li><a href="#GenRemarks">Allgemeine Bemerkungen</a></li>
      <li><a href="#Related">Siehe auch</a></li>
      <li><a href="#Examples">Beispiele</a></li>
    </ul>
  </li>
</ul>

<h2 id="Static_Methods">Statische Methoden</h2>
<div class="methodShort" id="Call">
<h3>Call</h3>
<p>Erstellt ein neues Fenster.</p>
<pre class="Syntax">MeineGui := Gui(<span class="optional">Optionen, Titel, EreignisObj</span>)
MeineGui := Gui.<span class="func">Call</span>(<span class="optional">Optionen, Titel, EreignisObj</span>)</pre>
<h4 id="Call_Parameters">Parameter</h4>
<dl>
  <dt>Optionen</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Jede von <a href="#Opt">Gui.Opt</a> unterstützte Option.</p>
  </dd>
  <dt>Titel</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Wenn weggelassen, wird standardmäßig <a href="../Variables.htm#ScriptName">A_ScriptName</a> verwendet. Andernfalls geben Sie den Fenstertitel an.</p>
  </dd>
  <dt id="EventObj">EreignisObj</dt><dd>
    <p>Typ: <a href="../Concepts.htm#objects">Objekt</a></p>
    <p>Ein "Event-Sink" oder Objekt, mit dem Ereignisse verbunden werden sollen. Wenn <em>EreignisObj</em> angegeben ist, können <a href="GuiOnEvent.htm">OnEvent</a>, <a href="GuiOnNotify.htm">OnNotify</a> und <a href="GuiOnCommand.htm">OnCommand</a> verwendet werden, um Methoden für <em>EreignisObj</em> zu registrieren, die beim Auslösen eines Ereignisses aufgerufen werden.</p>
  </dd>
</dl>
<h4 id="Call_Return_Value">Rückgabewert</h4>
<p>Typ: <a href="../Concepts.htm#objects">Objekt</a></p>
<p>Diese Methode oder Funktion gibt ein Gui-Objekt zurück.</p>
</div>

<h2 id="Methods">Methoden</h2>
<div class="methodShort" id="Add">
<h3>Add</h3>
<p>Erstellt ein neues Steuerelement und fügt es dem Fenster hinzu.</p>
<pre class="Syntax"><a href="GuiControl.htm">GuiCtrl</a> := MeineGui.<span class="func">Add</span>(Steuerelement <span class="optional">, Optionen, Text</span>)
<a href="GuiControl.htm">GuiCtrl</a> := MeineGui.<span class="func">Add</span>Steuerelement(<span class="optional">Optionen, Text</span>)</pre>
<h4 id="Add_Parameters">Parameter</h4>
<dl>
  <dt>Steuerelement</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Dies kann folgendes sein: <a href="GuiControls.htm#ActiveX">ActiveX</a>, <a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#CheckBox">CheckBox</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a>, <a href="GuiControls.htm#Custom">Custom</a>, <a href="GuiControls.htm#DateTime">DateTime</a>, <a href="GuiControls.htm#DropDownList">DropDownList (oder DDL)</a>, <a href="GuiControls.htm#Edit">Edit</a>, <a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Hotkey">Hotkey</a>, <a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#ListBox">ListBox</a>, <a href="GuiControls.htm#ListView">ListView</a>, <a href="GuiControls.htm#MonthCal">MonthCal</a>, <a href="GuiControls.htm#Picture">Picture (oder Pic)</a>, <a href="GuiControls.htm#Progress">Progress</a>, <a href="GuiControls.htm#Radio">Radio</a>, <a href="GuiControls.htm#Slider">Slider</a>, <a href="GuiControls.htm#StatusBar">StatusBar</a>, <a href="GuiControls.htm#Tab">Tab</a>, <a href="GuiControls.htm#Tab">Tab2</a>, <a href="GuiControls.htm#Tab">Tab3</a>, <a href="GuiControls.htm#Text">Text</a>, <a href="GuiControls.htm#TreeView">TreeView</a>, <a href="GuiControls.htm#UpDown">UpDown</a></p>
  <p>Zum Beispiel:</p>
  <pre>MeineGui := Gui()
MeineGui.Add("Text",, "Bitte tragen Sie Ihren Namen ein:")
MeineGui.AddEdit("vName")
MeineGui.Show()</pre></dd>
  <dt>Optionen</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Wenn leer oder weggelassen, wird das Steuerelement mit seinen Standardeinstellungen hinzugefügt. Andernfalls geben Sie die folgenden Optionen und Styles an, die jeweils durch mindestens ein Leer- oder Tabulatorzeichen voneinander getrennt sind.</p>
    <p id="PosSize"><strong>Position und Größe von Steuerelementen ändern</strong></p>
  <p>Wenn Dimensionen und/oder Koordinaten in <em>Optionen</em> weggelassen werden, wird das Steuerelement relativ zum vorherigen Steuerelement positioniert und/oder je nach Inhalt und Typ automatisch dimensioniert.</p>
  <p>Folgende Optionen werden unterstützt:</p>
  <p id="R"><strong>R</strong><em>n</em>: Textzeilen (wobei <em>n</em> eine beliebige Zahl ist, sogar eine Floating-Point-Zahl wie <code class="no-highlight">r2.5</code>). R ist oft besser als H (Höhe). Wenn R und H gleichzeitig vorhanden sind, wird R bevorzugt. Bei einer GroupBox ist das die Anzahl der Steuerelemente, für die Platz in der Box reserviert werden soll. Bei einer <a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a> oder <a href="GuiControls.htm#ListBox">ListBox</a> ist das die Anzahl der Listeneinträge, die der Listenbereich des Steuerelements maximal anzeigen soll (es ist ratsam, eine DropDownList oder ComboBox ohne R und H zu erstellen, damit die aufklappbare Liste von der verfügbaren Höhe des Desktops profitieren kann). Bei allen anderen Steuerelementen ist R die Anzahl der Textzeilen, die maximal angezeigt werden sollen.</p>
  <p><strong>W</strong><em>n</em>: Breite (wobei <em>n</em> eine beliebige Zahl in Pixel ist). Wenn weggelassen, wird die Breite einiger Steuerelemente automatisch anhand ihres Inhalts berechnet; Tabs sind standardmäßig das 30-fache der aktuellen Schriftgröße plus das 3-fache des <a href="#MarginX">horizontalen Abstands</a> breit; vertikale ProgressBars standardmäßig das 2-fache der aktuellen Schriftgröße breit; und horizontale ProgressBars, horizontale Sliders, DropDownLists, ComboBoxes, ListBoxes, GroupBoxes, Edits und Hotkeys standardmäßig das 15-fache der aktuellen Schriftgröße breit (außer GroupBoxes, die das 18-fache breit sind, um Platz für Abstände zu schaffen).</p>
  <p><strong>H</strong><em>n</em>: Höhe (wobei <em>n</em> eine beliebige Zahl in Pixel ist). Wenn sowohl H als auch R weggelassen werden, sind DropDownLists, ComboBoxes, ListBoxes und leere mehrzeilige Edits standardmäßig 3 Zeilen hoch; GroupBoxes standardmäßig 2 Zeilen hoch; vertikale Sliders und vertikale ProgressBars standardmäßig 5 Zeilen hoch; horizontale Sliders standardmäßig 30 Pixel hoch (außer wenn eine Dicke angegeben wurde); horizontale ProgressBars standardmäßig das 2-fache der aktuellen Schriftgröße hoch; Hotkeys standardmäßig 1 Zeile hoch; und Tabs standardmäßig 10 Zeilen hoch. Alle anderen Steuerelemente erhalten automatisch eine Höhe, die auf ihrem Inhalt basiert. Beachten Sie bei DropDownLists und ComboBoxes, dass H die kombinierte Höhe des immer sichtbaren Teils und des Listenteils ist (bei einem zu niedrigen Wert wird immer mindestens ein Listeneintrag angezeigt). Außerdem ist es bei allen Arten von Steuerelementen in der Regel besser, die Anzahl der Zeilen mit der R- statt H-Option anzugeben, um zu vermeiden, dass ein Steuerelement unvollständige bzw. nur teilweise sichtbare Textzeilen anzeigt.</p>
  <p><strong>WP</strong><em>±n</em>, <strong>HP</strong><em>±n</em> (wobei <em>n</em> eine beliebige Zahl in Pixel ist) können verwendet werden, um die Breite und/oder Höhe eines Steuerelements genau auf die Breite oder Höhe des zuvor hinzugefügten Steuerelements zu setzen, die optional um eine beliebige Zahl erhöht oder verringert werden kann. Zum Beispiel würde <code class="no-highlight">wp</code> die Breite eines Steuerelements auf die Breite des vorherigen Steuerelements setzen, und <code class="no-highlight">wp-50</code> auf die Breite des vorherigen Steuerelements, aber um 50 verringert.</p>
  <p id="XY"><strong>X</strong><em>n</em>, <strong>Y</strong><em>n</em>: X-Position, Y-Position (wobei <em>n</em> eine beliebige Zahl ist): <code class="no-highlight">x0 y0</code> beispielsweise positioniert das Steuerelement in die obere linke Ecke des Clientbereichs des Fensters (das ist der Bereich ohne Rahmen, Titelleiste und Menüleiste).</p>
  <p id="PosPlus"><strong>X+</strong><em>n</em>, <strong>Y+</strong><em>n</em> (wobei <em>n</em> eine beliebige Zahl in Pixel ist): Es ist möglich, ein optionales Pluszeichen einzufügen, um ein Steuerelement relativ zum rechten bzw. unteren Rand des zuvor hinzugefügten Steuerelements zu positionieren. <code class="no-highlight">y+10</code> beispielsweise positioniert das Steuerelement unterhalb des zuvor hinzugefügten Steuerelements, die genau 10 Pixel voneinander entfernt sind. <code class="no-highlight">x+10</code> hingegen positioniert das Steuerelement 10 Pixel entfernt auf die rechte Seite des zuvor hinzugefügten Steuerelements. Da negative Zahlen wie <code class="no-highlight">x-10</code> für die absolute Positionierung reserviert sind, müssen negative Offsets mit einem Pluszeichen beginnen. Zum Beispiel: <code class="no-highlight">x+-10</code>.</p>
  <p id="PosPlusMargin">Für X+ und Y+ kann der Buchstabe <strong>M</strong> als Ersatz für den aktuellen <a href="#MarginX">Abstand (Margin)</a> des Fensters verwendet werden. <code class="no-highlight">x+m</code> beispielsweise verwendet den rechten Rand des zuvor hinzugefügten Steuerelements und fügt den aktuellen Standardabstand hinzu. <code class="no-highlight">xp y+m</code> positioniert ein Steuerelement unterhalb des zuvor hinzugefügten Steuerelements, während eine relative X-Koordinate allein (mit XP oder X+) standardmäßig <code class="no-highlight">yp</code> impliziert.</p>
  <p id="xp"><strong>XP</strong><em>±n</em>, <strong>YP</strong><em>±n</em> (wobei <em>n</em> eine beliebige Zahl ist) können verwendet werden, um Steuerelemente relativ zur linken oberen Ecke des zuvor hinzugefügten Steuerelements zu positionieren, was oft nützlich ist, um Steuerelemente mit einer <a href="GuiControls.htm#GroupBox">GroupBox</a> zu umschließen.</p>
  <p id="xm"><strong>XM</strong><em>±n</em>, <strong>YM</strong><em>±n</em> (wobei <em>n</em> eine beliebige Zahl in Pixel ist) können verwendet werden, um ein Steuerelement an den ganz linken bzw. obersten <a href="#MarginX">Abstand (Margin)</a> des Fensters zu positionieren (nach diesen Optionen kann ein Plus-/Minuszeichen und eine Zahl folgen).</p>
  <p id="xs"><strong>XS</strong><em>±n</em> und <strong>YS</strong><em>±n</em> (wobei <em>n</em> eine beliebige Zahl in Pixel ist): Diese haben einen ähnlichen Effekt wie XM und YM, beziehen sich aber auf Koordinaten, die von einem zuvor hinzugefügten Steuerelement stammen, dessen Optionen das Wort <a href="#Section">Section</a> enthält (das erste Steuerelement eines Fensters beginnt immer eine neue Sektion, egal ob dessen Optionen dieses Wort enthält). Zum Beispiel:</p>
  <pre>MeineGui := Gui()
MeineGui.Add("Edit", "w600")  <em>; Ein relativ breites Eingabefeld ganz oben im Fenster hinzufügen.</em>
MeineGui.Add("Text", "<strong>Section</strong>", "Vorname:")  <em>; Position dieses Steuerelements speichern und eine neue Sektion beginnen.</em>
MeineGui.Add("Text",, "Nachname:")
MeineGui.Add("Edit", "<strong>ys</strong>")  <em>; Eine neue Spalte innerhalb dieser Sektion beginnen.</em>
MeineGui.Add("Edit")
MeineGui.Show()</pre>
  <p>Nach XS und YS kann optional ein Plus-/Minuszeichen und eine Zahl folgen. Außerdem ist es möglich, sowohl das Wort <a href="#Section">Section</a> als auch XS/YS in den Optionen eines Steuerelements anzugeben, um zu bewirken, dass das Steuerelement die alte Sektion verwendet, aber eine neue Sektion für nachfolgende Steuerelemente etabliert.</p>
  <p>Wenn X und/oder Y weggelassen werden, passt sich ein GUI-Layout automatisch an künftige Änderungen bzgl. der Größe von Steuerelementen oder der Schrift an. Wenn Sie hingegen für jedes Steuerelement eine absolute Position angeben, müssen Sie möglicherweise die Position aller Steuerelemente unterhalb und/oder auf der rechten Seite des Steuerelements, dessen Größe geändert wurde, manuell verschieben.</p>
  <p>Wenn sowohl X als auch Y weggelassen werden, wird das Steuerelement unterhalb des zuvor hinzugefügten Steuerelements positioniert, wobei der <a href="#MarginX">Standardabstand</a> verwendet wird. Aufeinanderfolgende Text- oder Link-Steuerelemente werden mit zusätzlichen vertikalen Abständen versehen, damit sie besser ausgerichtet sind, wenn danach eine rechts befindliche Spalte mit Steuerelementen wie Edit, DDL usw. hinzugefügt wird. Um nur den vertikalen Standardabstand zu verwenden, geben Sie <code class="no-highlight">y+m</code> oder einen beliebigen Wert für X an.</p>
  <p>Wenn nur eine Komponente weggelassen wird, hängt ihr Standardwert davon ab, mit welcher Option die andere Komponente angegeben wurde:</p>
  <table class="info">
    <tr><th>X angegeben</th><th>Standard für Y</th></tr>
    <tr><td>X<em>n</em> oder XM</td><td>Unterhalb aller vorherigen Steuerelemente (maximale Y-Ausdehnung plus Margin).</td></tr>
    <tr><td>XS</td><td>Unterhalb aller vorherigen Steuerelemente seit der letzten Verwendung der <a href="#Section">Section</a>-Option.</td></tr>
    <tr><td>X+<em>n</em> oder XP+<em>ungleich 0</em></td><td>Dasselbe wie der obere Rand des vorherigen Steuerelements (<a href="#xp">YP</a>).</td></tr>
    <tr><td>XP oder XP+0</td><td>Unterhalb des vorherigen Steuerelements (unterer Rand plus Margin).</td></tr>
    <tr><th>Y angegeben</th><th>Standard für X</th></tr>
    <tr><td>Y<em>n</em> oder YM</td><td>Rechts von allen vorherigen Steuerelementen (maximale X-Ausdehnung plus Margin).</td></tr>
    <tr><td>YS</td><td>Rechts von allen vorherigen Steuerelementen seit der letzten Verwendung der <a href="#Section">Section</a>-Option.</td></tr>
    <tr><td>Y+<em>n</em> oder YP+<em>ungleich 0</em></td><td>Dasselbe wie der linke Rand des vorherigen Steuerelements (<a href="#xp">XP</a>).</td></tr>
    <tr><td>YP oder YP+0</td><td>Rechts vom vorherigen Steuerelement (rechter Rand plus Margin).</td></tr>
  </table>
  
  <p id="Events"><strong>Benutzereingaben speichern und verarbeiten</strong></p>
  <p id="var"><strong>V:</strong> Setzt den <a href="GuiControl.htm#Name">Namen</a> des Steuerelements. Geben Sie direkt nach dem Buchstaben V den Namen an; das V selbst ist nicht im Namen enthalten. Wenn Sie z.B. <code class="no-highlight"><strong>v</strong>MeinEdit</code> angeben, hat das Steuerelement den Namen "MeinEdit".</p>
  <p id="label"><strong>Ereignisse:</strong> Ereignishandler (z.B. eine Funktion, die automatisch aufgerufen wird, wenn der Benutzer ein Steuerelement anklickt oder ändert) können nicht in den <em>Optionen</em> des Steuerelements angegeben werden. Stattdessen kann <a href="#OnEvent">OnEvent</a> verwendet werden, um eine Rückruffunktion oder -methode für das gewünschte Ereignis zu registrieren.</p>
  
  <p id="OtherOptions"><strong>Häufig verwendete Optionen und Styles für Steuerelemente</strong></p>
  <p>Hinweis: Vorzeichenlose Optionen werden standardmäßig hinzugefügt. Zum Beispiel ist <code class="no-highlight">Wrap</code> dasselbe wie <code class="no-highlight">+Wrap</code>. Mit <code class="no-highlight">-Wrap</code> kann es hingegen wieder entfernt werden.</p>
  <p id="AltSubmit"><strong>AltSubmit:</strong> Verwendet eine alternative Submit-Methode. Bei einer DropDownList, ComboBox oder ListBox bewirkt diese Option, dass <a href="#Submit">Gui.Submit</a> nicht den Text, sondern die Position des ausgewählten Listeneintrags speichert. Wenn kein Listeneintrag ausgewählt ist, wird bei einer ComboBox weiterhin der Text des Eingabefeldes gespeichert.</p>
  <p><strong>C:</strong> Textfarbe (funktioniert nicht bei <a href="GuiControls.htm#Button">Schaltflächen</a> und <a href="GuiControls.htm#StatusBar">Statusleisten</a>). Geben Sie den Buchstaben C an, unmittelbar gefolgt von einem Farbnamen (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder RGB-Wert (mit oder ohne 0x-Präfix). Beispiele: <code class="no-highlight">cRed</code>, <code class="no-highlight">cFF2211</code>, <code class="no-highlight">c0xFF2211</code>, <code class="no-highlight">cDefault</code>.</p>
  <p id="Disabled"><strong>Disabled:</strong> Stellt das Steuerelement in einem deaktivierten Zustand dar und bewirkt, dass es weder fokussiert noch geändert werden kann. Um die Interaktion mit diesem Steuerelement später wieder zu erlauben, verwenden Sie <a href="GuiControl.htm#Enabled">GuiControl.Enabled</a>. Hinweis: Um ein Edit-Steuerelement stattdessen in den schreibgeschützten Zustand zu versetzen, fügen Sie <code class="no-highlight">ReadOnly</code> in dessen Optionen ein. Direkt nach dem Wort Disabled kann optional eine 0 oder 1 angegeben werden, um den Startzustand zu bestimmen (0 für aktiviert, 1 für deaktiviert). Mit anderen Worten, <code class="no-highlight">Disabled</code> ist dasselbe wie <code>"Disabled" VarMitEins</code>.</p>
  <p id="Hidden"><strong>Hidden:</strong> Versteckt zunächst das Steuerelement. Mit <a href="GuiControl.htm#Visible">GuiControl.Visible</a> kann es später wieder sichtbar gemacht werden. Direkt nach dem Wort Hidden kann optional eine 0 oder 1 angegeben werden, um den Startzustand zu bestimmen (0 für sichtbar, 1 für versteckt). Mit anderen Worten, <code class="no-highlight">Hidden</code> ist dasselbe wie <code>"Hidden" VarMitEins</code>.</p>
  <p><strong>Left:</strong> Macht den Text linksbündig innerhalb der verfügbaren Breite des Steuerelements. Diese Option beeinflusst die folgenden Steuerelemente: Text, Edit, Button, CheckBox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime.</p>
  <p><strong>Right:</strong> Macht den Text rechtsbündig innerhalb der verfügbaren Breite des Steuerelements. Bei CheckBox- und Radio-Steuerelementen bewirkt diese Option außerdem, dass das Auswahlfeld auf der rechten statt linken Seite des Steuerelements positioniert wird. Diese Option beeinflusst die folgenden Steuerelemente: Text, Edit, Button, CheckBox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime, Link.</p>
  <p><strong>Center:</strong> Zentriert den Text des Steuerelements horizontal. Diese Option beeinflusst die folgenden Steuerelemente: Text, Edit, Button, CheckBox, Radio, Slider, GroupBox.</p>
  <p id="Section"><strong>Section:</strong> Beginnt eine neue Sektion und speichert die Positionsdaten des Steuerelements, um sie später mit den <a href="#xs">oben</a> beschriebenen Positionierungsoptionen XS und YS zu verwenden.</p>
  <p id="Tabstop"><strong>Tabstop:</strong> Geben Sie <code class="no-highlight">-Tabstop</code> (minus Tabstop) für ein eingabefähiges Steuerelement an, das übersprungen werden soll, wenn der Benutzer <kbd>Tab</kbd> zum Navigieren drückt.</p>
  <p id="Wrap"><strong>Wrap:</strong> Aktiviert den automatischen Zeilenumbruch im Text des Steuerelements. Da der automatische Zeilenumbruch standardmäßig bei fast allen Arten von Steuerelementen aktiv ist, wird in der Regel <code class="no-highlight">-Wrap</code> verwendet, um diese Option zu deaktivieren.</p>
  <p><strong>VScroll:</strong> Stattet das Steuerelement mit einem vertikalen Scrollbalken aus, sofern möglich.</p>
  <p><strong>HScroll:</strong> Stattet das Steuerelement mit einem horizontalen Scrollbalken aus, sofern möglich. Der Rest dieses Absatzes gilt nur für die <a href="GuiControls.htm#ListBox">ListBox</a>. Die horizontale Scrollbreite ist standardmäßig die 3-fache Breite der Listbox. Um eine andere Scrollbreite zu bestimmen, geben Sie direkt nach dem Wort HScroll eine Zahl an. Zum Beispiel ermöglicht <code class="no-highlight">HScroll500</code> einen scrollbaren Bereich von 500 Pixeln innerhalb der ListBox. Wenn die angegebene Scrollbreite allerdings kleiner als die Breite der ListBox ist, wird kein Scrollbalken angezeigt (obwohl das bloße Vorhandensein von <code class="no-highlight">HScroll</code> es überhaupt erst möglich macht, den horizontalen Scrollbalken später via <code>MeinScrollbalken.<a href="GuiControl.htm#Opt">Opt</a>("+HScroll500")</code> hinzuzufügen).</p>
  
  <p><strong>Selten verwendete Optionen und Styles für Steuerelemente</strong></p>
  <p id="BackgroundTrans"><strong>BackgroundTrans:</strong> Verwendet einen transparenten Hintergrund, der jedes Steuerelement, das sich hinter einem Text-, Picture- oder GroupBox-Steuerelement befindet, durchscheinen lässt. Zum Beispiel würde ein transparentes Text-Steuerelement, das über einem Picture-Steuerelement angezeigt wird, die Illusion erzeugen, als gehöre der Text zum Bild. Mit <code>GuiCtrl.<a href="GuiControl.htm#Opt">Opt</a>("+Background")</code> kann diese Option später wieder entfernt werden. Weitere Informationen zu transparenten Bildern finden Sie im <a href="GuiControls.htm#PicAltSubmit">AltSubmit-Abschnitt des Picture-Steuerelements</a>. Bekannte Einschränkung: Es ist möglich, dass BackgroundTrans nicht ordnungsgemäß mit Steuerelementen innerhalb eines <a href="GuiControls.htm#Tab">Tab</a>-Steuerelements funktioniert, das eine <a href="ListView.htm">ListView</a> enthält. Wenn ein Steuerelement diese Option nicht unterstützt, wird ein Fehler ausgelöst.</p>
  <p id="Background"><strong>Background</strong><em>Farbe</em>: Ändert die Hintergrundfarbe des Steuerelements. Geben Sie für <em>Farbe</em> einen Farbnamen (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder RGB-Wert (mit oder ohne 0x-Präfix) an. Beispiele: <code class="no-highlight">BackgroundSilver</code>, <code class="no-highlight">BackgroundFFDD99</code>. Wenn diese Option nicht verwendet wird, oder wenn <code class="no-highlight">+Background</code> ohne Suffix verwendet wird, verwendet ein <a href="GuiControls.htm#Text">Text</a>-, <a href="GuiControls.htm#Picture">Picture</a>-, <a href="GuiControls.htm#GroupBox">GroupBox</a>-, <a href="GuiControls.htm#CheckBox">CheckBox</a>-, <a href="GuiControls.htm#Radio">Radio</a>-, <a href="GuiControls.htm#Slider">Slider</a>-, <a href="GuiControls.htm#Tab">Tab</a>- oder <a href="GuiControls.htm#Link">Link</a>-Steuerelement zu Beginn die via <a href="#BackColor">Gui.BackColor</a> definierte Hintergrundfarbe (wenn keine definiert ist oder handelt es sich um ein anderes Steuerelement, wird die Standardhintergrundfarbe des Systems verwendet). Mit <code class="no-highlight">BackgroundDefault</code> oder <code class="no-highlight">-Background</code> kann die Standardhintergrundfarbe des Systems erzwungen werden. Zum Beispiel kann die Standardfarbe eines Steuerelements via <code>LV.Opt("+BackgroundDefault")</code> wiederhergestellt werden. Wenn ein Steuerelement diese Option nicht unterstützt, wird ein Fehler ausgelöst.</p>
  <p><strong>Border:</strong> Umrahmt das Steuerelement mit einer dünnen Linie. Die meisten Steuerelemente haben bereits einen typspezifischen Rahmen und benötigen daher diese Option nicht. Wird ein <em>bereits existierendes</em> Steuerelement mit einem Rahmen versehen, kann es notwendig sein, die Breite und Höhe des Steuerelements um 1 Pixel zu vergrößern, um eine korrekte Darstellung zu gewährleisten.</p>
  <p id="Redraw"><strong>Redraw:</strong> Wenn diese Option mit <a href="GuiControl.htm#Opt">GuiControl.Opt</a> verwendet wird, aktiviert oder deaktiviert sie das Neuzeichnen (visuelle Aktualisierungen) für ein Steuerelement durch Senden einer <a href="https://learn.microsoft.com/windows/win32/gdi/wm-setredraw">WM_SETREDRAW-Meldung</a>. Weitere Informationen finden Sie unter <a href="GuiControl.htm#redraw-remarks">Neuzeichnung</a>.</p>
  <p><strong>Theme:</strong> Mit dieser Option kann die aktuelle Design-Einstellung des Fensters für das neue Steuerelement überschrieben werden. Bei bereits existierenden Steuerelementen hat diese Option keinen Effekt; allerdings kann sich das in einer zukünftigen Version noch ändern. Weitere Informationen finden Sie unter <a href="#Theme">+/-Theme</a>.</p>
  <p><strong>(Namenloser Style):</strong> Geben Sie ein Plus- oder Minuszeichen und direkt danach eine dezimale oder hexadezimale Zahl an, um einen <a href="../misc/Styles.htm">Style</a> hinzuzufügen oder zu entfernen. Wenn das Vorzeichen weggelassen wird, wird der Style standardmäßig hinzugefügt.</p>
  <p><strong>(Namenloser erweiterter Style):</strong> Geben Sie ein Plus- oder Minuszeichen und direkt danach ein E und eine dezimale oder hexadezimale Zahl an, um einen erweiterten Style hinzuzufügen oder zu entfernen. Wenn das Vorzeichen weggelassen wird, wird der Style standardmäßig hinzugefügt. Zum Beispiel würde <code class="no-highlight">E0x200</code> den WS_EX_CLIENTEDGE-Style hinzufügen, der Steuerelemente wie z.B. Picture mit einem abgesenkten Rahmen ausstattet. Weitere erweiterte Styles, die nur selten verwendet werden und daher hier nicht aufgeführt sind, finden Sie unter <a href="https://learn.microsoft.com/windows/win32/winmsg/extended-window-styles">Extended Window Styles | Microsoft Docs</a>.</p></dd>
  <dt>Text</dt><dd>Eine Zeichenkette, eine Zahl oder ein Array, abhängig vom Steuerelement.</dd>
</dl>
<h4 id="Add_Return_Value">Rückgabewert</h4>
<p>Typ: <a href="../Concepts.htm#objects">Objekt</a></p>
<p>Diese Methode gibt ein <a href="GuiControl.htm">GuiControl-Objekt</a> zurück.</p>
</div>

<div class="methodShort" id="Destroy">
<h3>Destroy</h3>
<p>Entfernt das Fenster und alle darin enthaltenen Steuerelemente und gibt die zugehörigen Speicher- und Systemressourcen frei.</p>
<pre class="Syntax">MeineGui.<span class="func">Destroy</span>()</pre>
<p>Wenn <code>MeineGui.Destroy()</code> nicht verwendet wird, wird das Fenster automatisch zerstört, sobald das Gui-Objekt gelöscht wird (weitere Informationen finden Sie unter <a href="#deleted">Allgemeine Bemerkungen</a>). Alle GUI-Fenster werden automatisch zerstört, sobald das Skript beendet wird.</p>
</div>

<div class="methodShort" id="Flash">
<h3>Flash</h3>
<p>Lässt die Taskleistenschaltfläche des Fensters einmal aufblinken.</p>
<pre class="Syntax">MeineGui.<span class="func">Flash</span>(<span class="optional">Blinken</span>)</pre>
<h4 id="Flash_Parameters">Parameter</h4>
<dl>
  <dt>Blinken</dt><dd>
    <p>Typ: <a href="../Concepts.htm#boolean">Boolesch</a></p>
    <p>Wenn weggelassen, wird standardmäßig true verwendet.</p>
    <p>Wenn <strong>true</strong>, wird die Taskleistenschaltfläche des Fensters aufblinken. Dazu wird die Farbe der Titelleiste und/oder der Taskleistenschaltfläche (falls vorhanden) invertiert.</p>
    <p>Wenn <strong>false</strong>, werden die Originalfarben der Titelleiste und Taskleistenschaltfläche wiederhergestellt (das tatsächliche Verhalten variiert aber je nach OS-Version).</p>
  </dd>
</dl>
<h4 id="Flash_Remarks">Bemerkungen</h4>
<p>Das folgende Beispiel lässt das Fenster dreimal aufblinken, da jedes Paar von "Gui Flash" die Farben des Fensters invertiert und wiederherstellt:</p>
<pre>Loop 6
{
    MeineGui.Flash()
    Sleep 500  <em>; Es reagiert sehr empfindlich auf diesen Wert; Änderungen können zu unerwarteten Ergebnissen führen.</em>
}</pre>
</div>

<div class="methodShort" id="GetClientPos">
<h3>GetClientPos</h3>
<p>Ruft die Position und Größe des Clientbereichs des Fensters ab.</p>
<pre class="Syntax">MeineGui.<span class="func">GetClientPos</span>(<span class="optional">&amp;X, &amp;Y, &amp;Breite, &amp;Höhe</span>)</pre>
<h4 id="GetClientPos_Parameters">Parameter</h4>
<dl>
  <dt>&amp;X, &amp;Y</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>Wenn weggelassen, werden die entsprechenden Werte nicht gespeichert. Andernfalls geben Sie Referenzen an, die auf Ausgabevariablen verweisen, in denen die X- und Y-Koordinate der oberen linken Ecke des Clientbereichs gespeichert werden sollen.</p>
  </dd>
  <dt>&amp;Breite, &amp;Höhe</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>Wenn weggelassen, werden die entsprechenden Werte nicht gespeichert. Andernfalls geben Sie Referenzen an, die auf Ausgabevariablen verweisen, in denen die Breite und Höhe des Clientbereichs gespeichert werden sollen.</p>
    <p>Breite ist der horizontale Abstand zwischen dem linken und rechten Rand des Clientbereichs und Höhe ist der vertikale Abstand zwischen dem oberen und unteren Rand (in Pixel).</p>
  </dd>
</dl>
<h4 id="GetClientPos_Remarks">Bemerkungen</h4>
<p>Der Clientbereich ist der Teil des Fensters, der Steuerelemente enthalten kann. Das ist der Bereich ohne Titelleiste, Standardmenüleiste und Rahmen. Die Position und Größe des Clientbereichs sind weniger abhängig von Version und Design des Betriebssystems als die Werte, die von <a href="#GetPos">Gui.GetPos</a> zurückgegeben werden.</p>
<p>Im Gegensatz zu <a href="WinGetClientPos.htm">WinGetClientPos</a> wendet diese Methode die <a href="#DPIScale">DPI-Skalierung</a> auf <em>Breite</em> und <em>Höhe</em> an (es sei denn, die <code class="no-highlight">-DPIScale</code>-Option wurde verwendet).</p>
</div>

<div class="methodShort" id="GetPos">
<h3>GetPos</h3>
<p>Ruft die Position und Größe des Fensters ab.</p>
<pre class="Syntax">MeineGui.<span class="func">GetPos</span>(<span class="optional">&amp;X, &amp;Y, &amp;Breite, &amp;Höhe</span>)</pre>
<h4 id="GetPos_Parameters">Parameter</h4>
<dl>
  <dt>&amp;X, &amp;Y</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>Wenn weggelassen, werden die entsprechenden Werte nicht gespeichert. Andernfalls geben Sie Referenzen an, die auf Ausgabevariablen verweisen, in denen die X- und Y-Koordinate der oberen linken Ecke des Fensters gespeichert werden sollen, in Bildschirmkoordinaten.</p>
  </dd>
  <dt>&amp;Breite, &amp;Höhe</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>Wenn weggelassen, werden die entsprechenden Werte nicht gespeichert. Andernfalls geben Sie Referenzen an, die auf Ausgabevariablen verweisen, in denen die Breite und Höhe des Fensters gespeichert werden sollen.</p>
    <p>Breite ist der horizontale Abstand zwischen dem linken und rechten Rand des Fensters und Höhe ist der vertikale Abstand zwischen dem oberen und unteren Rand des Fensters (in Pixel).</p>
  </dd>
</dl>
<h4 id="GetPos_Remarks">Bemerkungen</h4>
<p>Da die Koordinaten, die von dieser Methode zurückgegeben werden, auch die Titelleiste, die Menüleiste und den Rahmen des Fensters einbeziehen, können sie je nach Version und Design des Betriebssystems variieren. Um konsistentere Werte auf verschiedenen Systemen zu erhalten, sollten Sie stattdessen <a href="#GetClientPos">Gui.GetClientPos</a> verwenden.</p>
<p>Im Gegensatz zu <a href="WinGetPos.htm">WinGetPos</a> wendet diese Methode die <a href="#DPIScale">DPI-Skalierung</a> auf <em>Breite</em> und <em>Höhe</em> an (es sei denn, die <code class="no-highlight">-DPIScale</code>-Option wurde verwendet).</p>
</div>

<div class="methodShort" id="Hide">
<h3>Hide</h3>
<p>Versteckt das Fenster.</p>
<pre class="Syntax">MeineGui.<span class="func">Hide</span>()</pre>
</div>

<div class="methodShort" id="Maximize">
<h3>Maximize</h3>
<p>Macht das Fenster sichtbar (falls nötig) und maximiert es.</p>
<pre class="Syntax">MeineGui.<span class="func">Maximize</span>()</pre>
</div>

<div class="methodShort" id="Minimize">
<h3>Minimize</h3>
<p>Macht das Fenster sichtbar (falls nötig) und minimiert es.</p>
<pre class="Syntax">MeineGui.<span class="func">Minimize</span>()</pre>
</div>

<div class="methodShort" id="Move">
<h3>Move</h3>
<p>Verschiebt das Fenster und/oder ändert dessen Größe.</p>
<pre class="Syntax">MeineGui.<span class="func">Move</span>(<span class="optional">X, Y, Breite, Höhe</span>)</pre>
<h4 id="Move_Parameters">Parameter</h4>
<dl>
  <dt>X, Y</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn einer der Parameter weggelassen wird, bleibt die Position in dieser Dimension unverändert. Andernfalls geben Sie die X- und Y-Koordinate der oberen linken Ecke der neuen Position des Fensters an, in Bildschirmkoordinaten.</p>
  </dd>
  <dt>Breite, Höhe</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn einer der Parameter weggelassen wird, bleibt die Größe in dieser Dimension unverändert. Andernfalls geben Sie die neue Breite und Höhe des Fensters (in Pixel) an.</p>
  </dd>
</dl>
<h4 id="Move_Remarks">Bemerkungen</h4>
<p>Im Gegensatz zu <a href="WinMove.htm">WinMove</a> wendet diese Methode die <a href="#DPIScale">DPI-Skalierung</a> auf <em>Breite</em> und <em>Höhe</em> an (es sei denn, die <code class="no-highlight">-DPIScale</code>-Option wurde verwendet).</p>
<h4 id="Move_Examples">Beispiele</h4>
<pre>MeineGui.Move(10, 20, 200, 100)
MeineGui.Move(VarX+10, VarY+5, VarW*2, VarH*1.5)

<em>; Linke und rechte Seite um 10 Pixel erweitern.</em>
MeineGui.GetPos(&amp;x,, &amp;w)
MeineGui.Move(x-10,, w+20)</pre>
</div>

<div class="methodShort" id="OnEvent">
<h3>OnEvent</h3>
<p>Registriert eine Funktion oder Methode, die aufgerufen wird, wenn ein bestimmtes Ereignis ausgelöst wird.</p>
<pre class="Syntax">MeineGui.<span class="func">OnEvent</span>(EreignisName, Rückruf <span class="optional">, HinzufügenEntfernen</span>)</pre>
<p>Weitere Informationen finden Sie unter <a href="GuiOnEvent.htm">OnEvent</a>.</p>
</div>

<div class="methodShort" id="Opt">
<h3>Opt</h3>
<p>Setzt verschiedene Optionen und Styles für das Aussehen und Verhalten des Fensters.</p>
<pre class="Syntax">MeineGui.<span class="func">Opt</span>(Optionen)</pre>
<h4 id="Opt_Parameters">Parameter</h4>
<dl>
  <dt>Optionen</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Beliebig viele der folgenden Optionen und Styles, die jeweils durch mindestens ein Leer- oder Tabulatorzeichen voneinander getrennt sind.</p>
  <p>Aus Performanzgründen ist es besser, alle Optionen auf einer Zeile zu setzen, bevor das Fenster erstellt wird (also bevor andere Methoden wie z.B. <a href="#Add">Gui.Add</a> verwendet werden).</p>
  <p>Der Effekt des Parameters ist kumulativ (summierend), d.h. dieser Parameter ändert nur die explizit angegebenen Optionen, alle anderen bleiben unverändert.</p>
  <p>Geben Sie ein Pluszeichen an, um die Option hinzuzufügen, oder ein Minuszeichen, um sie zu entfernen. Zum Beispiel: <code>MeineGui.Opt("+Resize -MaximizeBox")</code>.</p>
  <p><strong>AlwaysOnTop:</strong> Gibt dem Fenster die Eigenschaft, immer im Vordergrund zu sein, also immer vor allen anderen Fenstern sichtbar zu sein, was den gleichen Effekt hat wie <a href="WinSetAlwaysOnTop.htm">WinSetAlwaysOnTop</a>.</p>
  <p><strong>Border:</strong> Stattet das Fenster mit einem dünnen Rahmen aus. Diese Option wird selten verwendet.</p>
  <p><strong>Caption</strong> (standardmäßig vorhanden): Stattet das Fenster mit einer Titelleiste und einem dicken Rahmen aus. Beachten Sie, dass die Titelleiste eines Fensters erst entfernt werden sollte, nachdem eine Farbe mit <a href="WinSetTransColor.htm">WinSetTransColor</a> transparent gemacht wurde.</p>
  <p><strong>Disabled:</strong> Deaktiviert das Fenster, um den Benutzer daran zu hindern, mit den darin enthaltenen Steuerelementen zu interagieren. Diese Option wird oft auf ein Fenster mit Unterfenstern angewendet (siehe <a href="#Owner">Owner</a>).</p>
  <p id="DPIScale"><strong>DPIScale:</strong> Verwenden Sie <code>MeineGui.Opt("-DPIScale")</code>, um die standardmäßig aktive <a href="../misc/DPIScaling.htm">DPI-Skalierung</a> zu deaktivieren. Wenn die DPI-Skalierung aktiviert ist, werden Koordinaten und Größen, die an die Gui- und <a href="GuiControl.htm">GuiControl</a>-Methoden/Eigenschaften übergeben oder von diesen abgerufen werden, automatisch gemäß dem <a href="../Variables.htm#ScreenDPI">Bildschirm-DPI-Wert</a> skaliert. Bei einem DPI-Wert von z.B. 144 (150&nbsp;%) würde <code>MeineGui.Show("w100")</code> die GUI 150 (100 * 1.5) Pixel breit machen, während eine Änderung der Fensterbreite auf 200 Pixel via Maus oder <a href="WinMove.htm">WinMove</a> dazu führen würde, dass <code>MeineGui.GetClientPos(,,&amp;W)</code> <em>W</em> auf 133 (200 // 1.5) setzt. <a href="../Variables.htm#ScreenDPI">A_ScreenDPI</a> enthält den aktuellen DPI-Wert des Systems.</p>
  <p>Die DPI-Skalierung betrifft nur Gui- und <a href="GuiControl.htm">GuiControl</a>-Methoden/Eigenschaften, d.h. Koordinaten aus anderen Quellen wie ControlGetPos oder WinGetPos werden nicht funktionieren. Es gibt eine Reihe von Möglichkeiten, damit umzugehen:</p>
  <ul>
    <li>Vermeiden Sie hartkodierte Koordinaten, wenn möglich. Verwenden Sie z.B. die Optionen <a href="#xp">XP</a>, <a href="#xs">XS</a>, <a href="#xm">XM</a> und <a href="#PosPlusMargin">X+M</a>, um Steuerelemente zu positionieren, und geben Sie die Höhe in <a href="#R">Textzeilen</a> statt in Pixeln an.</li>
    <li>Die Skalierung kann jederzeit ein- (<code>MeineGui.Opt("+DPIScale")</code>) und ausgeschaltet (<code>MeineGui.Opt("-DPIScale")</code>) werden. Die Änderung der Einstellung hat keinen Einfluss auf bereits definierte Positionen oder Größen.</li>
    <li>Passen Sie die Koordinaten manuell an. Zum Beispiel wandelt <code>x*(A_ScreenDPI/96)</code> logische Koordinaten bzw. GUI-Koordinaten (in diesem Fall x) in physische Koordinaten bzw. Nicht-GUI-Koordinaten um.</li>
  </ul>
  <p id="LastFound"><strong>LastFound:</strong> Macht das Fenster zum <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundenen Fenster</a> (geschieht automatisch in einem <a href="GuiOnEvent.htm#Threads">GUI-Thread</a>), damit Funktionen wie <a href="WinGetStyle.htm">WinGetStyle</a> und <a href="WinSetTransparent.htm">WinSetTransparent</a> mit diesem Fenster arbeiten können, sogar wenn es versteckt ist (d.h. <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> ist nicht notwendig). Diese Option ist besonders nützlich, um die Eigenschaften des Fensters vor dem Anzeigen zu ändern. Zum Beispiel:</p>
  <pre>MeineGui.Opt("+LastFound")
WinSetTransColor(BeliebigeFarbe " 150")
MeineGui.Show()</pre>
  <p id="MaximizeBox"><strong>MaximizeBox:</strong> Aktiviert die Titelleistenschaltfläche zum Maximieren des Fensters. Diese Option ist in <em>Resize</em> inbegriffen.</p>
  <p id="MinimizeBox"><strong>MinimizeBox</strong> (standardmäßig vorhanden): Aktiviert die Titelleistenschaltfläche zum Minimieren des Fensters.</p>
  <p id="MinSize"><strong>MinSize</strong> und <strong>MaxSize</strong>: Bestimmt die minimale und/oder maximale Fenstergröße, z.B. wenn der Benutzer an den Rändern des Fensters zieht, um es kleiner/größer zu machen. Geben Sie <code class="no-highlight">+MinSize</code> und/oder <code class="no-highlight">+MaxSize</code> an (also ohne Suffix), um die aktuelle Fenstergröße als Grenzwert zu verwenden (wenn das Fenster keine aktuelle Größe hat, wird die gesetzte Größe des ersten <a href="#Show">Gui.Show</a> verwendet). Alternativ können Sie auch die Breite, ein X und dann die Höhe anfügen, z.B. <code>MeineGui.Opt("+Resize +MinSize640x480")</code>. Diese Dimensionen (in Pixel) spezifizieren die Größe des Clientbereichs des Fensters (das ist der Bereich ohne Rahmen, Titelleiste und <a href="#MenuBar">Menüleiste</a>). Geben Sie jede Zahl als Dezimalzahl an, nicht als Hexadezimalzahl.</p>
  <p>Eine der Dimensionen kann weggelassen werden, um sie unverändert zu lassen (z.B. <code class="no-highlight">+MinSize640x</code> oder <code class="no-highlight">+MinSizex480</code>). Außerdem kann Min/MaxSize mehrfach angegeben werden, um für eine Dimension die aktuelle Fenstergröße und für die andere eine explizite Größe zu verwenden. Zum Beispiel würde <code class="no-highlight">+MinSize +MinSize640x</code> die aktuelle Fenstergröße für die Höhe und 640 Pixel für die Breite verwenden.</p>
  <p>Wenn MinSize und MaxSize nie verwendet werden, werden die Standardwerte des Betriebssystems verwendet. Mit <code>MeineGui.Opt("-MinSize -MaxSize")</code> können die Standardwerte wiederhergestellt werden. Hinweis: Das Fenster muss <a href="#Resize">+Resize</a> haben, damit der Benutzer es kleiner/größer machen kann.</p>
  <p id="OwnDialogs"><strong>OwnDialogs:</strong> <code>MeineGui.Opt("+OwnDialogs")</code> bewirkt, dass alle nachfolgenden <a href="MsgBox.htm">MsgBox</a>-, <a href="InputBox.htm">InputBox</a>-, <a href="FileSelect.htm">FileSelect</a>- oder <a href="DirSelect.htm">DirSelect</a>-Dialogfenster im aktuellen <a href="../misc/Threads.htm">Thread</a> (z.B. eine ereignisbehandelnde Funktion eines Button-Steuerelements) dem aktuellen Fenster untergeordnet werden. Solche Dialogfenster sind modal, d.h. der Benutzer kann erst mit dem GUI-Fenster interagieren, wenn er das Dialogfenster schließt. <a href="ToolTip.htm">ToolTip</a>-Fenster können hingegen nicht modal gemacht werden, selbst wenn sie einem Fenster untergeordnet werden; diese werden immer über ihrem übergeordneten Fenster angezeigt. Untergeordnete Dialogfenster werden automatisch zerstört, sobald ihr übergeordnetes Fenster <a href="#Destroy">zerstört</a> wird.</p>
  <p>Normalerweise ist es nicht notwendig, diese Einstellung wieder auszuschalten, da sie keinen Einfluss auf andere <a href="../misc/Threads.htm">Threads</a> hat. Wenn ein Thread jedoch sowohl untergeordnete als auch nicht-untergeordnete Dialogfenster anzeigen muss, verwenden Sie <code>MeineGui.Opt("-OwnDialogs")</code>, um diese Einstellung auszuschalten.</p>
  <p id="Owner"><strong>Owner:</strong> Mit <code class="no-highlight">+Owner</code> kann das Fenster einem anderen Fenster untergeordnet werden. Untergeordnete Fenster haben standardmäßig keine eigene Taskleistenschaltfläche und werden, sofern sichtbar, immer über ihrem übergeordneten Fenster angezeigt. Außerdem werden sie automatisch zerstört, sobald ihr übergeordnetes Fenster zerstört wird, sofern dieses Fenster von demselben Skript erstellt wurde (also dieselbe <a href="../misc/WinTitle.htm#ahk_pid">Prozess-ID</a> hat). <code class="no-highlight">Owner</code> kann vor oder nach der Erstellung des übergeordneten Fensters verwendet werden. Es gibt zwei Möglichkeiten, wie <code class="no-highlight">+Owner</code> verwendet werden kann:</p>
  <pre>MeineGui.Opt("+Owner" AndereGui.Hwnd)  <em>; Die GUI zum Unterfenster von <i>AndereGui</i> machen.</em>
MeineGui.Opt("+Owner")  <em>; Die GUI zum Unterfenster des <a href="../Variables.htm#ScriptHwnd">Hauptfensters des Skripts</a> machen, um eine Taskleistenschaltfläche zu verhindern.</em></pre>
  <p>Direkt nach <code class="no-highlight">+Owner</code> kann die <a href="#Hwnd">HWND-Nummer (eindeutige ID)</a> eines beliebigen Top-Level-Fensters angegeben werden.</p>
  <p>Mit <code>MeineGui.Opt("+Disabled")</code> kann die Interaktion mit dem übergeordneten Fenster verboten werden, während eines seiner untergeordneten Fenster angezeigt wird. Später (also wenn der Zeitpunkt gekommen ist, das untergeordnete Fenster via Cancel/Destroy zu schließen) kann die Interaktion mit dem übergeordneten Fenster via <code>MeineGui.Opt("-Disabled")</code> wieder erlaubt werden. Machen Sie das vor dem Cancel/Destroy, damit das übergeordnete Fenster automatisch reaktiviert wird.</p>
  <p id="Parent"><strong>Parent:</strong> Geben Sie <code class="no-highlight">+Parent</code> und direkt danach die <a href="#Hwnd">HWND-Nummer (eindeutige ID)</a> eines Fensters oder Steuerelements an, die/das diesem Fenster übergeordnet werden soll. Mit <code class="no-highlight">-Parent</code> kann die GUI wieder in ein Top-Level-Fenster umgewandelt werden. Diese Option kann auch nach der Erstellung des Fensters verwendet werden. Bekannte Einschränkungen:</p>
  <ul>
    <li>Wurde das Skript <a href="../Program.htm#Installer_uiAccess">mit UI-Access gestartet</a>, funktioniert die <code class="no-highlight">+Parent</code>-Option nicht mit einem existierenden Fenster, wenn das neue übergeordnete Fenster immer im Vordergrund ist und das untergeordnete Fenster nicht.</li>
    <li>Die <code class="no-highlight">+Parent</code>-Option kann während der GUI-Erstellung fehlschlagen, wenn das übergeordnete Fenster extern ist, aber nach der GUI-Erstellung funktionieren. Dies liegt an den Unterschieden bei der Zuweisung der Styles.</li>
  </ul>
  <p id="Resize"><strong>Resize:</strong> Ermöglicht das Ändern der Fenstergröße und aktiviert die Titelleistenschaltfläche zum Maximieren des Fensters. Mit <code class="no-highlight">+Resize -MaximizeBox</code> kann die Aktivierung der Schaltfläche zum Maximieren des Fensters verhindert werden.</p>
  <p><strong>SysMenu</strong> (standardmäßig vorhanden): Geben Sie <code class="no-highlight">-SysMenu</code> (minus SysMenu) an, um das Systemmenü und Symbol in der oberen linken Ecke des Fensters zu entfernen. Die Titelleistenschaltflächen zum Minimieren, Maximieren und Schließen des Fensters werden ebenfalls entfernt.</p>
  <p id="Theme"><strong>Theme:</strong> Geben Sie <code class="no-highlight">-Theme</code> an, um alle danach erstellten Steuerelemente im klassischen Design darzustellen. Mit <code class="no-highlight">+Theme</code> kann das neue Design wieder eingeschaltet werden. Hinweis: Diese Option funktioniert nicht, wenn das klassische Design aktiv ist. Um diese Option nur für ein bestimmtes Steuerelement zu ändern, fügen Sie <code class="no-highlight">+Theme</code> oder <code class="no-highlight">-Theme</code> in dessen Optionen ein, während es erstellt wird.</p>
  <p><strong>ToolWindow:</strong> Stattet das Fenster mit einer kleineren Titelleiste aus und versteckt dessen Taskleistenschaltfläche. Diese Option versteckt immer die Schaltflächen zum Maximieren und Minimieren des Fensters, egal ob die Styles <a href="../misc/Styles.htm#WS_MAXIMIZEBOX">WS_MAXIMIZEBOX</a> und <a href="../misc/Styles.htm#WS_MINIMIZEBOX">WS_MINIMIZEBOX</a> vorhanden sind.</p>
  <p><strong>(Namenloser Style):</strong> Geben Sie ein Plus- oder Minuszeichen und direkt danach eine dezimale oder hexadezimale Zahl an, um einen <a href="../misc/Styles.htm">Style</a> hinzuzufügen oder zu entfernen.</p>
  <p><strong>(Namenloser erweiterter Style):</strong> Geben Sie ein Plus- oder Minuszeichen und direkt danach ein E und eine dezimale oder hexadezimale Zahl an, um einen erweiterten Style hinzuzufügen oder zu entfernen. Zum Beispiel würde <code class="no-highlight">+E0x40000</code> den WS_EX_APPWINDOW-Style hinzufügen, der eine Taskleistenschaltfläche für ein Fenster bereitstellt, das sonst keine hätte. Weitere erweiterte Styles, die nur selten verwendet werden und daher hier nicht aufgeführt sind, finden Sie unter <a href="https://learn.microsoft.com/windows/win32/winmsg/extended-window-styles">Extended Window Styles | Microsoft Docs</a>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Restore">
<h3>Restore</h3>
<p>Macht das Fenster sichtbar (falls nötig) und entminimiert oder entmaximiert es.</p>
<pre class="Syntax">MeineGui.<span class="func">Restore</span>()</pre>
</div>

<div class="methodShort" id="SetFont">
<h3>SetFont</h3>
<p>Bestimmt Schriftart, Schriftgröße, Schriftstil und/oder Schriftfarbe für danach erstellte Steuerelemente.</p>
<pre class="Syntax">MeineGui.<span class="func">SetFont</span>(<span class="optional">Optionen, SchriftName</span>)</pre>
<h4 id="SetFont_Parameters">Parameter</h4>
<dl>
  <dt>Optionen</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Beliebig viele Optionen. Jede Option ist entweder ein einzelner Buchstabe gefolgt von einem Wert oder ein einzelnes Wort. Mehrere Optionen müssen mit einem Leerzeichen voneinander getrennt werden. Zum Beispiel: <code class="no-highlight">cBlue s12 bold</code>.</p>
  <p>Die folgenden Wörter werden unterstützt: <strong>bold</strong>, <em>italic</em>, <s>strike</s>, <u>underline</u> und norm (übersetzt: fett, kursiv, durchgestrichen, unterstrichen und normal). <em>Norm</em> stellt die normale Breite/Dicke der Schrift wieder her und schaltet italic, strike und underline aus (Farbe und Größe bleiben unverändert). Es ist möglich, Norm zu verwenden, um alle Attribute auszuschalten und dann selektiv andere einzuschalten. Zum Beispiel bewirkt <code class="no-highlight">norm italic</code>, dass die Schrift normalisiert und anschließend kursiv gemacht wird.</p>
  <p><strong>C:</strong> Der Name einer Farbe (siehe <a href="../misc/Colors.htm">Farbentabelle</a>) oder ein RGB-Wert, oder das Wort Default, um die Standardfarbe des Systems wiederherzustellen (üblicherweise schwarz). Beispielwerte: <code class="no-highlight">cRed</code>, <code class="no-highlight">cFFFFAA</code>, <code class="no-highlight">cDefault</code>. Hinweis: <a href="GuiControls.htm#Button">Button</a>- und <a href="GuiControls.htm#StatusBar">StatusBar</a>-Steuerelemente können nicht mit einer benutzerdefinierten Farbe versehen werden. Alternativ kann auch die C-Option verwendet werden, um die Schriftfarbe für einzelne Steuerelemente bei ihrer Erstellung zu bestimmen. Zum Beispiel: <code>MeineGui.Add("Text", "cRed", "Mein Text")</code>.</p>
  <p><strong>S:</strong> Größe (in Punkten). Zum Beispiel: <code class="no-highlight">s12</code> (Dezimalzahl, nicht Hexadezimalzahl).</p>
  <p><strong>W:</strong> Breite (Dicke). Eine Zahl zwischen 1 und 1000 (400 ist normal und 700 ist fett). Zum Beispiel: <code class="no-highlight">w600</code> (Dezimalzahl, nicht Hexadezimalzahl).</p>
  <p id="fontq"><strong>Q:</strong> Textdarstellungsqualität. Zum Beispiel: <code class="no-highlight">q3</code>. Nach Q muss eine Nummer aus der folgenden Tabelle angegeben werden:</p>
  <table class="info">
    <tr>
      <th>Nummer</th>
      <th abbr="Konstante">Windows-Konstante</th>
      <th abbr="Beschr">Beschreibung</th>
    </tr>
    <tr>
      <td>0</td>
      <td>DEFAULT_QUALITY</td>
      <td>Die Darstellung der Schrift spielt keine Rolle.</td>
    </tr>
    <tr>
      <td>1</td>
      <td>DRAFT_QUALITY</td>
      <td>Die exakte Übereinstimmung mit logischen Schriftattributen (fett, kursiv usw.) ist wichtiger als die Zeichenqualität der Schrift.</td>
    </tr>
    <tr>
      <td>2</td>
      <td>PROOF_QUALITY</td>
      <td>Die Zeichenqualität der Schrift ist wichtiger als die exakte Übereinstimmung mit logischen Schriftattributen (fett, kursiv usw.).</td>
    </tr>
    <tr>
      <td>3</td>
      <td>NONANTIALIASED_QUALITY</td>
      <td>Die Schrift wird nie antialiasiert (geglättet).</td>
    </tr>
    <tr>
      <td>4</td>
      <td>ANTIALIASED_QUALITY</td>
      <td>Die Schrift wird antialiasiert (geglättet), wenn die Schrift dies unterstützt und nicht zu klein oder zu groß ist.</td>
    </tr>
    <tr>
      <td>5</td>
      <td>CLEARTYPE_QUALITY</td>
      <td>Die Schrift wird (wenn möglich) mit der ClearType-Antialiasing-Methode gerendert.</td>
    </tr>
  </table>
  <p>Weitere Informationen zur Bedeutung dieser Werte finden Sie unter <a href="https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-createfonta">Microsoft Docs: CreateFont</a>.</p>
  <p>Standardmäßig wird die höchste Qualitätseinstellung verwendet. Daher wird dieses Feature eher dazu verwendet, die Kantenglättung auszuschalten, um den Text in bestimmten Fällen besser lesbar zu machen.</p></dd>
  <dt>SchriftName</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p><em>SchriftName</em> ist der Name einer beliebigen Schrift, z.B. eine aus der <a href="../misc/FontsStandard.htm">Schriftentabelle</a>. Wenn <em>SchriftName</em> weggelassen wird oder im System nicht vorhanden ist, wird die zuvor gesetzte Schriftart verwendet (wenn es keine gibt, wird die Standard-GUI-Schriftart des Systems verwendet). Dieses Verhalten ist nützlich, um ein GUI-Fenster, das für mehrere Systeme gedacht ist, eine ähnliche Schrift verwenden zu lassen, selbst wenn in einigen dieser Systeme die bevorzugte Schrift fehlt. Das folgende Beispiel bewirkt, dass Verdana gegenüber Arial bevorzugt wird, welches wiederum gegenüber MS Sans Serif bevorzugt wird:</p>
  <pre>MeineGui.SetFont(, "MS Sans Serif")
MeineGui.SetFont(, "Arial")
MeineGui.SetFont(, "Verdana")  <em>; Bevorzugte Schrift.</em></pre></dd>
</dl>
<h4 id="SetFont_Remarks">Bemerkungen</h4>
<p>Die beiden Parameter können weggelassen werden, um die Standard-GUI-Schriftart des Systems, inklusive Größe und Farbe, wiederherzustellen. Andernfalls werden alle nicht angegebenen Schriftattribute von der vorherigen Schrift übernommen.</p>
<p>Das Betriebssystem stellt außerdem Standarddialogfenster bereit, die der Benutzer zum Auswählen einer Schriftart, einer Farbe oder eines Symbols verwenden kann. Solche Dialogfenster können via <a href="DllCall.htm">DllCall</a> in Kombination mit <a href="https://learn.microsoft.com/previous-versions/windows/desktop/legacy/ms646914(v=vs.85)">comdlg32\ChooseFont</a>, <a href="https://learn.microsoft.com/previous-versions/windows/desktop/legacy/ms646912(v=vs.85)">comdlg32\ChooseColor</a> bzw. <a href="https://learn.microsoft.com/windows/win32/api/shlobj_core/nf-shlobj_core-pickicondlg">shell32\PickIconDlg</a> angezeigt werden. Suchen Sie im Forum nach Beispielen.</p>
</div>

<div class="methodShort" id="Show">
<h3>Show</h3>
<p>Standardmäßig bewirkt dies, dass das Fenster sichtbar gemacht, entminimiert (falls nötig) und <a href="WinActivate.htm">aktiviert</a> wird.</p>
<pre class="Syntax">MeineGui.<span class="func">Show</span>(<span class="optional">Optionen</span>)</pre>
<h4 id="Show_Parameters">Parameter</h4>
<dl>
  <dt>Optionen</dt><dd>
    <p>Typ: <a href="../Concepts.htm#strings">Zeichenkette</a></p>
    <p>Die unteren Optionen X, Y, W und H können weggelassen werden, um die zuvor gesetzte Größe und Position des Fensters zu verwenden. Wenn es keine zuvor gesetzte Position gibt, wird das Fenster automatisch auf dem Bildschirm zentriert, je nachdem, ob die unten erwähnten Optionen X und Y fehlen. Wenn es keine zuvor gesetzte Größe gibt, wird die Fenstergröße automatisch an die Größe und Position aller darin enthaltenen Steuerelemente angepasst.</p>
  <p>Für <em>Optionen</em> können beliebig viele der folgenden Zeichenketten angegeben werden (jede Zahl muss dezimal sein, nicht hexadezimal):</p>
  <p><strong>W</strong><em>n</em>: Geben Sie für <em>n</em> die Breite (in Pixel) des Clientbereichs an (das ist der Fensterbereich ohne Rahmen, Titelleiste und <a href="#MenuBar">Menüleiste</a>).</p>
  <p><strong>H</strong><em>n</em>: Geben Sie für <em>n</em> die Höhe (in Pixel) des Clientbereichs an.</p>
  <p><strong>X</strong><em>n</em>: Geben Sie für <em>n</em> die X-Position des Fensters auf dem Bildschirm an (in Pixel). Position 0 ist die erste linke sichtbare Pixelspalte auf dem Bildschirm.</p>
  <p><strong>Y</strong><em>n</em>: Geben Sie für <em>n</em> die Y-Position des Fensters auf dem Bildschirm an (in Pixel). Position 0 ist die erste obere sichtbare Pixelzeile auf dem Bildschirm.</p>
  <p><strong>Center:</strong> Zentriert das Fenster horizontal und vertikal auf dem Bildschirm.</p>
  <p><strong>xCenter:</strong> Zentriert das Fenster horizontal auf dem Bildschirm. Zum Beispiel: <code>MeineGui.Show("xCenter y0")</code>.</p>
  <p><strong>yCenter:</strong> Zentriert das Fenster vertikal auf dem Bildschirm.</p>
  <p id="AutoSize"><strong>AutoSize:</strong> Passt die Fenstergröße automatisch an die Größe und Position aller sichtbaren Steuerelemente im Fenster an. Diese Option ist besonders nützlich, wenn neue Steuerelemente hinzugefügt werden, oder wenn bereits vorhandene Steuerelemente größer/kleiner, sichtbar oder unsichtbar gemacht werden. Zum Beispiel: <code>MeineGui.Show("AutoSize Center")</code>.</p>
  <p><em><strong>Zusätzlich kann eine der folgenden Angaben gemacht werden:</strong></em></p>
  <p><strong>Minimize:</strong> Minimiert das Fenster und aktiviert das darunter liegende Fenster.</p>
  <p><strong>Maximize:</strong> Maximiert und aktiviert das Fenster.</p>
  <p><strong>Restore:</strong> Entminimiert oder entmaximiert das Fenster, falls nötig. Zusätzlich wird das Fenster sichtbar gemacht und aktiviert, falls nötig.</p>
  <p><strong>NoActivate:</strong> Entminimiert oder entmaximiert das Fenster, falls nötig. Zusätzlich wird das Fenster sichtbar gemacht, ohne es zu aktivieren.</p>
  <p><strong>NA:</strong> Macht das Fenster sichtbar, ohne es zu aktivieren. Wenn das Fenster minimiert ist, bleibt es minimiert, kann aber in der Z-Rangfolge aufsteigen (die aktuelle Rangfolge kann im Alt-Tab-Fenster eingesehen werden). Wenn das Fenster zuvor versteckt war, bewirkt diese Option, dass es über dem aktiven Fenster erscheint, obwohl das aktive Fenster nicht deaktiviert ist.</p>
  <p><strong>Hide:</strong> Versteckt das Fenster und aktiviert das darunter liegende Fenster. Funktionsgemäß ist diese Option identisch mit <a href="#Hide">Gui.Hide</a>, ermöglicht es aber, ein verstecktes Fenster zu verschieben oder größer/kleiner zu machen, ohne es sichtbar zu machen. Zum Beispiel: <code>MeineGui.Show("Hide x55 y66 w300 h200")</code>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Submit">
<h3>Submit</h3>
<p>Sammelt die Werte von benannten Steuerelementen und bildet daraus ein <a href="Object.htm">Object</a>. Kann optional das Fenster verstecken.</p>
<pre class="Syntax">BenannteStrlmnteWerte := MeineGui.<span class="func">Submit</span>(<span class="optional">Verstecken</span>)</pre>
<h4 id="Submit_Parameters">Parameter</h4>
<dl>
  <dt>Verstecken</dt><dd>
    <p>Typ: <a href="../Concepts.htm#boolean">Boolesch</a></p>
    <p>Wenn weggelassen, wird standardmäßig true verwendet.</p>
    <p>Wenn <strong>true</strong>, wird das Fenster versteckt.</p>
    <p>Wenn <strong>false</strong>, wird das Fenster nicht versteckt.</p>
  </dd>
</dl>
<h4 id="Submit_Return_Value">Rückgabewert</h4>
<p>Typ: <a href="../Concepts.htm#objects">Objekt</a></p>
<p>Diese Methode gibt ein Objekt zurück, das für jedes benannte Steuerelement eine eigene Eigenschaft hat, gemäß <code>BenannteStrlmnteWerte.%GuiCtrl.<a href="GuiControl.htm#Name">Name</a>% := GuiCtrl.<a href="GuiControl.htm#Value">Value</a></code>, mit den unten genannten Ausnahmen. Es sind nur Steuerelemente enthalten, die eingabefähig sind, <a href="GuiControl.htm#Value">GuiControl.Value</a> unterstützen und einen Namen haben. Mit <code>BenannteStrlmnteWerte.StrlmntName</code> kann ein einzelner Wert abgerufen werden. Mit <a href="Object.htm#OwnProps">OwnProps</a> können alle benannten Steuerelemente enumeriert werden.</p>
<p>Bei <a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a>, <a href="GuiControls.htm#ListBox">ListBox</a> und <a href="GuiControls.htm#Tab">Tab</a> wird nicht die Positionsnummer, sondern der Text des ausgewählten Listeneintrags/Tabs gespeichert, wenn dem Steuerelement die <a href="#AltSubmit">AltSubmit</a>-Option <u>fehlt</u> oder wenn der Text der ComboBox nicht mit einem Listeneintrag übereinstimmt. Andernfalls wird <a href="GuiControl.htm#Value">Value</a> (die Positionsnummer des Elements) gespeichert.</p>
<p id="submit-radio">Wenn nur einem <a href="GuiControls.htm#Radio">Radio</a>-Steuerelement in einer Radio-Gruppe einen Namen zugeordnet wurde, speichert Submit die Nummer des aktuell eingeschalteten Steuerelements, nicht <a href="GuiControl.htm#Value">Value</a>. 1 ist das erste Radio-Steuerelement (entsprechend der ursprünglichen Erstellungsreihenfolge), 2 das zweite und so weiter. Wenn kein Radio-Steuerelement eingeschaltet ist, wird 0 gesetzt.</p>
<p>Folgende sind ausgeschlossen, da sie nicht eingabefähig sind: <a href="GuiControls.htm#Text">Text</a>, <a href="GuiControls.htm#Pic">Pic</a>, <a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#Progress">Progress</a>, <a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#StatusBar">StatusBar</a>.</p>
<p>Ebenfalls ausgeschlossen: <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="GuiControls.htm#ActiveX">ActiveX</a>, <a href="GuiControls.htm#Custom">Custom</a>.</p>
</div>

<div class="methodShort" id="__Enum">
<h3>__Enum</h3>
<p>Enumeriert die Steuerelemente des Fensters.</p>
<pre class="Syntax">For Strlmnt in MeineGui</pre>
<pre class="Syntax">For Hwnd, Strlmnt in MeineGui</pre>
<p>Gibt einen neuen <a href="Enumerator.htm">Enumerator</a> zurück. Diese Methode wird typischerweise nicht direkt aufgerufen. Stattdessen wird das Gui-Objekt direkt an eine <a href="For.htm">For-Schleife</a> übergeben, die __Enum einmal aufruft und dann den Enumerator pro Schleifenwiederholung einmal aufruft. Jeder Aufruf des Enumerators gibt das nächste Steuerelement zurück. Die Variablen der For-Schleife entsprechen den folgenden Parametern des Enumerators:</p>
<dl>
  <dt>Hwnd</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Die HWND-Nummer des Steuerelements. Dies ist nur im 2-Parameter-Modus verfügbar.</p>
  </dd>
  <dt>Strlmnt</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#objects">Objekt</a></p>
    <p>Das <a href="GuiControl.htm">GuiControl-Objekt</a> des Steuerelements.</p>
  </dd>
</dl>
<p>Zum Beispiel:</p>
<pre>For Hwnd, GuiCtrlObj in MeineGui
    MsgBox "Steuerelement Nr. " A_Index " ist " GuiCtrlObj.ClassNN</pre>
</div>

<div class="methodShort" id="__New">
<h3>__New</h3>
<p>Konstruiert eine neue Gui-Instanz.</p>
<pre class="Syntax">MeineGui.<span class="func">__New</span>(<span class="optional">Optionen, Titel, EreignisObj</span>)</pre>
<p>Eine Gui-Unterklasse kann __New überschreiben und <code>super.__New(Optionen, Titel, this)</code> aufrufen, um ihre eigenen Ereignisse zu behandeln. In diesem Fall werden Ereignisse für das Hauptfenster (z.B. Close) keinen expliziten Gui-Parameter übergeben, da <code>this</code> bereits eine Referenz enthält, die auf die Gui verweist.</p>
<p>Die Gui merkt sich eine Referenz zu <em>EreignisObj</em> für den Aufruf von Ereignishandlern und gibt sie wieder frei, wenn das Fenster zerstört wird. Wenn <em>EreignisObj</em> selbst eine Referenz zur Gui enthält, würde dies normalerweise einen Zirkelbezug erzeugen, der verhindert, dass die Gui <a href="#Destroy">automatisch zerstört</a> wird. Eine Ausnahme wird gemacht, wenn <em>EreignisObj</em> die Gui selbst ist, um in diesem Fall einen Zirkelbezug zu vermeiden.</p>
<p>Es wird eine Ausnahme ausgelöst, wenn das Fenster bereits konstruiert oder zerstört wurde.</p>
</div>

<h2 id="Properties">Eigenschaften</h2>
<div class="methodShort" id="BackColor">
<h3>BackColor</h3>
<p>Ermittelt oder setzt die Hintergrundfarbe des Fensters.</p>
<pre class="Syntax">AktuelleFarbe := MeineGui.<span class="func">BackColor</span></pre>
<pre class="Syntax">MeineGui.<span class="func">BackColor</span> := NeueFarbe</pre>
<p><em>AktuelleFarbe</em> ist ein 6-stelliger RGB-Wert der aktuellen Farbe, die zuvor mit dieser Eigenschaft gesetzt wurde, oder eine leere Zeichenkette, wenn die Standardfarbe verwendet wird.</p>
<p><em>NeueFarbe</em> ist entweder einer der 16 primären <a href="../misc/Colors.htm">HTML-Farbnamen</a>, ein hexadezimaler RGB-Farbwert (mit oder ohne 0x-Präfix), ein rein numerischer RGB-Farbwert, oder das Wort Default (oder eine leere Zeichenkette) für dessen Standardfarbe. Beispielwerte: <code>"Silver"</code>, <code>"FFFFAA"</code>, <code>0xFFFFAA</code>, <code>"Default"</code>, <code>""</code>.</p>
<p>Ein Fenster verwendet als Hintergrundfarbe standardmäßig die Standardschaltflächenfarbe des Systems.</p>
<p>Die Farbe der <a href="#MenuBar">Menüleiste</a> und aller darin enthaltenen Untermenüs kann wie folgt geändert werden: <code>MeineMenüleiste.<a href="Menu.htm#SetColor">SetColor</a>("White")</code>.</p>
<p>Mit <a href="WinSetTransColor.htm">WinSetTransColor</a> kann der Hintergrund transparent gemacht werden. Wenn Sie dies jedoch tun, ohne zuvor eine benutzerdefinierte Fensterfarbe via <a href="#BackColor">Gui.BackColor</a> zugewiesen zu haben, werden Button-Steuerelemente ebenfalls transparent. Um das zu verhindern, weisen Sie zuerst eine benutzerdefinierte Farbe zu und machen Sie diese dann transparent. Zum Beispiel:</p>
<pre>MeineGui.BackColor := "EEAA99"
WinSetTransColor("EEAA99", MeineGui)</pre>
<p>Die folgende Zeile kann hinzugefügt werden, um den Rahmen und die Titelleiste eines Fensters zu entfernen: <code>MeineGui.Opt("-Caption")</code></p>
<p>Weiter unten finden Sie ein Beispiel für eine Bildschirmanzeige (OSD), das zeigt, wie diese Methode in der Praxis verwendet werden kann.</p>
</div>

<div class="methodShort" id="FocusedCtrl">
<h3>FocusedCtrl</h3>
<p>Ruft das <a href="GuiControl.htm">GuiControl-Objekt</a> des fokussierten Steuerelements im Fenster ab.</p>
<pre class="Syntax">GuiCtrlObj := MeineGui.<span class="func">FocusedCtrl</span></pre>
<p>Hinweis: Um den gewünschten Effekt zu erzielen, darf das Fenster weder minimiert noch versteckt sein.</p>
</div>

<div class="methodShort" id="Hwnd">
<h3>Hwnd</h3>
<p>Ruft das Fensterhandle (HWND) des Fensters ab.</p>
<pre class="Syntax">AktuelleHwnd := MeineGui.<span class="func">Hwnd</span></pre>
<p>Die HWND-Nummer (eindeutige ID) einer GUI wird oft in Verbindung mit <a href="PostMessage.htm">PostMessage</a>, <a href="SendMessage.htm">SendMessage</a> und <a href="DllCall.htm">DllCall</a> verwendet. Diese Nummer kann auch direkt in einem <a href="../misc/WinTitle.htm#ahk_id">FensterTitel-Parameter</a> verwendet werden.</p></div>

<div class="methodShort" id="MarginX">
<h3>MarginX</h3>
<p>Ermittelt oder setzt die Größe der horizontalen Abstände zwischen den Rändern und danach erstellten Steuerelementen.</p>
<pre class="Syntax">AktuellerWert := MeineGui.<span class="func">MarginX</span></pre>
<pre class="Syntax">MeineGui.<span class="func">MarginX</span> := NeuerWert</pre>
<p><em>AktuellerWert</em> ist die Anzahl der Pixel des aktuellen horizontalen Abstands.</p>
<p><em>NeuerWert</em> ist die Anzahl der Pixel, die auf der linken und rechten Seite des Fensters freigelassen werden sollen, wenn Steuerelemente aufgrund einer fehlenden <a href="#XY">X-Koordinate</a> automatisch positioniert werden. Dieser Abstand wird auch verwendet, um den horizontalen Abstand zwischen automatisch positionierten Steuerelementen zu bestimmen. Außerdem wird dieser Abstand zur Berechnung der Fenstergröße herangezogen, wenn <a href="#Show">Gui.Show</a> zum ersten Mal verwendet wird (wenn keine explizite Größe angegeben ist).</p>
<p>Wenn nicht vom Skript gesetzt, bekommt MarginX einen Standardwert zugewiesen (das 1,25-fache der <a href="#SetFont">aktuellen Schrifthöhe</a>), sobald zum ersten Mal <a href="#Add">Gui.Add</a> oder <a href="#Show">Gui.Show</a> aufgerufen oder <a href="#MarginX">Gui.MarginX</a> oder <a href="#MarginY">Gui.MarginY</a> abgerufen wird (je nachdem, was zuerst kommt).</p>
</div>

<div class="methodShort" id="MarginY">
<h3>MarginY</h3>
<p>Ermittelt oder setzt die Größe der vertikalen Abstände zwischen den Rändern und danach erstellten Steuerelementen.</p>
<pre class="Syntax">AktuellerWert := MeineGui.<span class="func">MarginY</span></pre>
<pre class="Syntax">MeineGui.<span class="func">MarginY</span> := NeuerWert</pre>
<p><em>AktuellerWert</em> ist die Anzahl der Pixel des aktuellen vertikalen Abstands.</p>
<p><em>NeuerWert</em> ist die Anzahl der Pixel, die auf der oberen und unteren Seite des Fensters freigelassen werden sollen, wenn Steuerelemente aufgrund einer fehlenden <a href="#XY">Y-Koordinate</a> automatisch positioniert werden. Dieser Abstand wird auch verwendet, um den vertikalen Abstand zwischen automatisch positionierten Steuerelementen zu bestimmen. Außerdem wird dieser Abstand zur Berechnung der Fenstergröße herangezogen, wenn <a href="#Show">Gui.Show</a> zum ersten Mal verwendet wird (wenn keine explizite Größe angegeben ist).</p>
<p>Wenn nicht vom Skript gesetzt, bekommt MarginY einen Standardwert zugewiesen (das 0,75-fache der <a href="#SetFont">aktuellen Schrifthöhe</a>), sobald zum ersten Mal <a href="#Add">Gui.Add</a> oder <a href="#Show">Gui.Show</a> aufgerufen oder <a href="#MarginX">Gui.MarginX</a> oder <a href="#MarginY">Gui.MarginY</a> abgerufen wird (je nachdem, was zuerst kommt).</p>
</div>

<div class="methodShort" id="MenuBar">
<h3>MenuBar</h3>
<p>Ermittelt oder setzt die Menüleiste des Fensters.</p>
<pre class="Syntax">AktuelleLeiste := MeineGui.<span class="func">MenuBar</span></pre>
<pre class="Syntax">MeineGui.<span class="func">MenuBar</span> := NeueLeiste</pre>
<p><em>AktuelleLeiste</em> und <em>NeueLeiste</em> sind ein <a href="Menu.htm">MenuBar-Objekt</a>, das mit <a href="Menu.htm#Call">MenuBar()</a> erstellt wurde. Zum Beispiel:</p>
<pre>DateiMenü := Menu()
DateiMenü.Add("Ö&amp;ffnen`tCtrl+F", (*) =&gt; FileSelect())  <em>; Siehe untere Bemerkungen zu Ctrl+F.</em>
DateiMenü.Add("&amp;Beenden", (*) =&gt; ExitApp())
HilfeMenü := Menu()
HilfeMenü.Add("Inf&amp;o", (*) =&gt; MsgBox("Nicht implementiert"))
Menüs := MenuBar()
Menüs.Add("&amp;Datei", DateiMenü)  <em>; Die zwei oben erstellten Untermenüs hinzufügen.</em>
Menüs.Add("&amp;?", HilfeMenü)
MeineGui := Gui()
MeineGui.MenuBar := Menüs
MeineGui.Show("w300 h200")</pre>
<p>In der ersten Zeile oben sehen Sie <code class="no-highlight">Ctrl+F</code>, das nach <code class="no-highlight">Ö&amp;ffnen</code> folgt (mit einem Tabulatorzeichen dazwischen). Dabei handelt es sich um ein Tastaturkurzbefehl, den der Benutzer drücken kann, um die Aktion des Menüpunkts auszuführen, ohne dass der Benutzer erst dorthin navigieren muss. Tastaturkurzbefehle mit den regulären Modifikatortasten Ctrl, Alt und Shift werden automatisch als <em>Keyboard Accelerator</em> für die GUI registriert. Keyboard Accelerators ohne Modifikatoren sind Groß-/Kleinschreibung-sensitiv und können nur mit ungewöhnlichen Mitteln wie IME oder <kbd>Alt</kbd>+NNNN ausgelöst werden.</p>
<p>Wenn eine bestimmte Tastenkombination nicht automatisch funktioniert, können Sie ggf. einen <a href="_HotIf.htm">kontextabhängigen Hotkey</a> verwenden. Beachten Sie aber, dass solche Hotkeys üblicherweise nicht durch <a href="Send.htm">Send</a> ausgelöst werden können und dass sie im Gegensatz zu einem typischen Keyboard Accelerator andere Skripte stören können.</p>
<p>Mit <code>MeineGui.MenuBar := ""</code> (d.h. eine leere Zeichenkette zuweisen) können Sie die aktuelle Menüleiste aus dem Fenster entfernen.</p>
</div>

<div class="methodShort" id="Name">
<h3>Name</h3>
<p>Ermittelt oder setzt einen benutzerdefinierten Namen für das Fenster.</p>
<pre class="Syntax">AktuellerName := MeineGui.<span class="func">Name</span></pre>
<pre class="Syntax">MeineGui.<span class="func">Name</span> := NeuerName</pre>
</div>

<div class="methodShort" id="Title">
<h3>Title</h3>
<p>Ermittelt oder setzt den Titel des Fensters.</p>
<pre class="Syntax">AktuellerTitel := MeineGui.<span class="func">Title</span></pre>
<pre class="Syntax">MeineGui.<span class="func">Title</span> := NeuerTitel</pre>
</div>

<div class="methodShort" id="__Item">
<h3>__Item</h3>
<p>Ruft das <a href="GuiControl.htm">GuiControl-Objekt</a> ab, das dem angegebenen Namen, Text, ClassNN oder HWND zugeordnet ist.</p>
<pre class="Syntax">GuiCtrlObj := MeineGui[Name]
GuiCtrlObj := MeineGui.<span class="func">__Item</span>[Name]</pre>
</div>

<h2 id="Navigate">Navigation mit der Tastatur</h2>
<p>Mit <kbd>Tab</kbd> kann der Tastaturfokus jeweils auf das nächste eingabefähige Steuerelement in einem GUI-Fenster gesetzt werden (Steuerelemente mit deaktiviertem <a href="#Tabstop">Tabstop</a>-Style werden übersprungen). Die Reihenfolge der Navigation richtet sich nach der Reihenfolge, in der die Steuerelemente ursprünglich hinzugefügt wurden. Wenn das Fenster zum ersten Mal angezeigt wird, bekommt das erste eingabefähige Steuerelement mit aktiviertem Tabstop-Style (den die meisten standardmäßig haben) den Tastaturfokus, es sei denn, dieses Steuerelement ist eine Schaltfläche (Button) und es existiert eine Standardschaltfläche, dann wird stattdessen die Standardschaltfläche fokussiert.</p>
<p id="ShortcutKey">Bestimmte Steuerelemente können ein Und-Zeichen (&amp;) enthalten, um einen Tastaturkurzbefehl zu erstellen, der im Text des Steuerelements je nach Systemeinstellung als unterstrichenes Zeichen dargestellt wird. Um einen solchen Tastaturkurzbefehl auszulösen, muss der Benutzer <kbd>Alt</kbd> gedrückt halten und dann das entsprechende Zeichen auf der Tastatur drücken. Drückt man den Tastaturkurzbefehl bei Button-, CheckBox- oder Radio-Steuerelementen, ist der Effekt das gleiche wie, als würde man das Steuerelement anklicken. Drückt man den Tastaturkurzbefehl bei GroupBox- oder Text-Steuerelementen, springt der Tastaturfokus auf das erste danach erstellte eingabefähige Steuerelement mit aktivem <a href="#Tabstop">Tabstop</a>-Style. Wenn mehrere Steuerelemente den gleichen Tastaturkurzbefehl verwenden und drückt man diesen, springt der Tastaturfokus zwischen diesen Steuerelementen abwechselnd hin und her.</p>
<p>Um ein direkt geschriebenes Und-Zeichen in einem der oben genannten Steuerelementen anzuzeigen, geben Sie wie folgt zwei aufeinanderfolgende Und-Zeichen an: <code>MeineGui.Add("Button",, "Speichern &amp;&amp; Beenden")</code>.</p>

<h2 id="Appear">Fensterdarstellung</h2>
<p>Ein GUI-Fenster verwendet als Symbol das <a href="../Program.htm#tray-icon">Tray-Symbol</a>, welches zum Zeitpunkt der Erstellung des Fensters wirksam war. Daher muss, wenn ein anderes Symbol angezeigt werden soll, das Tray-Symbol vor der Erstellung des Fensters geändert werden. Zum Beispiel: <code><a href="TraySetIcon.htm">TraySetIcon</a>("MeinSymbol.ico")</code>. Es ist auch möglich, ein Fenster mit einem anderen großen Symbol zu versehen (das große Symbol wird im Alt-Tab-Fenster angezeigt). Zum Beispiel mit <a href="LoadPicture.htm">LoadPicture</a> und <a href="SendMessage.htm">SendMessage</a>:</p>
<pre>SymbolGröße := 32  <em>; Die ideale Größe für Alt-Tab variiert je nach System und Windows-Version.</em>
hIcon := LoadPicture("Mein Symbol.ico", "Icon1 w" SymbolGröße " h" SymbolGröße, &amp;BildTyp)
MeineGui := Gui()
SendMessage(0x0080, 1, hIcon, MeineGui)  <em>; 0x0080 ist WM_SETICON; und 1 bedeutet ICON_BIG (0 wäre ICON_SMALL).</em>
MeineGui.Show()</pre>
<p>Aufgrund von Systemeinschränkungen werden CheckBox-, Radio- und GroupBox-Steuerelemente mit benutzerdefinierter Textfarbe im klassischen Design dargestellt.</p>
<p>Siehe auch: <a href="#MarginX">Margin</a> (Abstände innerhalb eines Fensters).</p>

<h2 id="GenRemarks">Allgemeine Bemerkungen</h2>
<p>Das <a href="GuiControl.htm">GuiControl-Objekt</a> kann verwendet werden, um mit einzelnen Steuerelementen in einem GUI-Fenster zu arbeiten.</p>
<p>Jedes GUI-Fenster kann bis zu 11000 Steuerelemente enthalten. Aber Vorsicht: Bei mehr als 5000 Steuerelementen kann das System instabil werden, abhängig vom Typ des Steuerelements.</p>
<p id="deleted">Das GUI-Fenster wird automatisch <a href="#Destroy">zerstört</a>, sobald das Gui-Objekt gelöscht wird, was geschieht, wenn dessen <a href="../Objects.htm#Reference_Counting">Referenzanzahl</a> 0 erreicht. Dies geschieht jedoch in der Regel nicht, wenn das Fenster sichtbar ist, da <a href="#Show">Show</a> die Referenzanzahl automatisch um 1 erhöht. Während das Fenster sichtbar ist, kann der Benutzer mit dem Fenster interagieren und Ereignisse auslösen, die vom Skript behandelt werden. Wenn das Fenster vom Benutzer geschlossen oder mit <a href="#Hide">Hide</a>, <a href="#Show">Show</a> oder <a href="#Submit">Submit</a> versteckt wird, wird diese zusätzliche Referenz freigegeben.</p>
<p>Um ein GUI-Fenster "künstlich am Leben" zu erhalten, ohne <a href="#Show">Show</a> aufzurufen oder eine Referenz zu seinem Gui-Objekt aufrecht zu erhalten, kann das Skript die Referenzanzahl des Objekts mit <a href="ObjAddRef.htm">ObjAddRef</a> um 1 erhöhen (in diesem Fall muss <a href="ObjAddRef.htm">ObjRelease</a> aufgerufen werden, wenn das Fenster nicht mehr benötigt wird). Dies kann z.B. der Fall sein, wenn ein verstecktes GUI-Fenster für den <a href="OnMessage.htm">Empfang von Meldungen</a> verwendet wird, oder wenn das Fenster mit "externen" Mitteln wie <a href="WinShow.htm">WinShow</a> angezeigt wird (mit diesem Skript oder einem anderen).</p>
<p>Wenn das Skript aus irgendeinem Grund nicht <a href="../Scripts.htm#persistent">persistent</a> ist, wird es nach dem Schließen des letzten sichtbaren GUI-Fensters beendet; entweder nach Abschluss des letzten Threads oder sofort, wenn keine Threads laufen.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="GuiControl.htm">GuiControl-Objekt</a>, <a href="GuiFromHwnd.htm">GuiFromHwnd</a>, <a href="GuiCtrlFromHwnd.htm">GuiCtrlFromHwnd</a>, <a href="GuiControls.htm">Steuerelemente</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="Menu.htm">Menu-Objekt</a>, <a href="Control.htm">Control-Funktionen</a>, <a href="MsgBox.htm">MsgBox</a>, <a href="FileSelect.htm">FileSelect</a>, <a href="DirSelect.htm">DirSelect</a></p>

<h2 id="Examples">Beispiele</h2>

<div class="ex" id="ExPopup">
<p><a class="ex_number" href="#ExPopup"></a> Erstellt ein Popup-Fenster.</p>
<pre>MeineGui := Gui(, "Fenstertitel")
MeineGui.Opt("+AlwaysOnTop +Disabled -SysMenu +Owner")  <em>; +Owner verhindert eine Taskleistenschaltfläche.</em>
MeineGui.Add("Text",, "Beliebiger Anzeigetext.")
MeineGui.Show("NoActivate")  <em>; NoActivate verhindert, dass ein anderes Fenster seinen Aktivzustand verliert.</em></pre>
</div>

<div class="ex" id="ExInputBox">
<p><a class="ex_number" href="#ExInputBox"></a> Erstellt ein einfaches Eingabefenster zum Abfragen des Vor- und Nachnamens.</p>
<pre>MeineGui := Gui(, "Einfaches Eingabebeispiel")
MeineGui.Add("Text",, "Vorname:")
MeineGui.Add("Text",, "Nachname:")
MeineGui.Add("Edit", "vVorname ym")  <em>; Die ym-Option beginnt eine neue Spalte für Steuerelemente.</em>
MeineGui.Add("Edit", "vNachname")
MeineGui.Add("Button", "default", "OK").OnEvent("Click", BenutzereingabeVerarbeiten)
MeineGui.OnEvent("Close", BenutzereingabeVerarbeiten)
MeineGui.Show()

BenutzereingabeVerarbeiten(*)
{
    Gespeichert := MeineGui.Submit()  <em>; Inhalt benannter Steuerelemente in ein Objekt speichern.</em>
    MsgBox("Sie haben '" Gespeichert.Vorname " " Gespeichert.Nachname "' eingegeben.")
}</pre>
</div>

<div class="ex" id="ExTab">
<p><a class="ex_number" href="#ExTab"></a> Erstellt ein Tab-Steuerelement mit mehreren Tabs, die jeweils verschiedene Steuerelemente für Interaktionszwecke enthalten.</p>
<pre>MeineGui := Gui()
Tab := MeineGui.Add("Tab3",, ["Erster Tab", "Zweiter Tab", "Dritter Tab"])
MeineGui.Add("CheckBox", "vMeineCheckBox", "Kontrollkästchen") 
Tab.UseTab(2)
MeineGui.Add("Radio", "vMeinRadio", "Optionsfeld 1")
MeineGui.Add("Radio",, "Optionsfeld 2")
Tab.UseTab(3)
MeineGui.Add("Edit", "vMeinEdit r5")  <em>; r5 bedeutet 5 Zeilen hoch.</em>
Tab.UseTab()  <em>; d.h. danach hinzugefügte Steuerelemente gehören nicht zum Tab-Steuerelement.</em>
Btn := MeineGui.Add("Button", "default xm", "OK")  <em>; xm positioniert die Schaltfläche in die untere linke Ecke.</em>
Btn.OnEvent("Click", BenutzereingabeVerarbeiten)
MeineGui.OnEvent("Close", BenutzereingabeVerarbeiten)
MeineGui.OnEvent("Escape", BenutzereingabeVerarbeiten)
MeineGui.Show()

BenutzereingabeVerarbeiten(*)
{
    Gespeichert := MeineGui.Submit()  <em>; Inhalt benannter Steuerelemente in ein Objekt speichern.</em>
    MsgBox("Ihre Eingabe:`n" Gespeichert.MeineCheckBox "`n" Gespeichert.MeinRadio "`n" Gespeichert.MeinEdit)
}</pre>
</div>

<div class="ex" id="ExListBox">
<p><a class="ex_number" href="#ExListBox"></a> Erstellt eine ListBox mit Dateien aus einem Verzeichnis.</p>
<pre>MeineGui := Gui()
MeineGui.Add("Text",, "Eine Datei zum Ausführen auswählen.")
LB := MeineGui.Add("ListBox", "w640 r10")
LB.OnEvent("DoubleClick", DateiÖffnen)
Loop Files, "C:\*.*"  <em>; Ordner und Platzhaltermuster je nach Bedarf anpassen.</em>
    LB.Add([A_LoopFilePath])
MeineGui.Add("Button", "Default", "OK").OnEvent("Click", DateiÖffnen)
MeineGui.Show()

DateiÖffnen(*)
{
    if MsgBox("Wollen Sie wirklich die folgende Datei öffnen?`n`n" LB.Text,, 4) = "No"
        return
    <em>; Andernfalls versuchen zu starten:</em>
    try Run(LB.Text)
    if A_LastError
        MsgBox("Die angegebene Datei konnte nicht gestartet werden. Scheinbar fehlt das entsprechende Programm.")
}</pre>
</div>

<div class="ex" id="ExToolTip">
<p><a class="ex_number" href="#ExToolTip"></a> Zeigt jedes Mal eine kontextabhängige Hilfe via Tooltip an, wenn der Benutzer den Mauszeiger über ein bestimmtes Steuerelement bewegt.</p>
<pre>
MeineGui := Gui()
MeinEdit := MeineGui.Add("Edit")
<em>; Tooltiptext in eine benutzerdefinierte Eigenschaft speichern:</em>
MeinEdit.ToolTip := "Der Tooltip für das Steuerelement mit dem Namen MeinEdit."
MeineDDL := MeineGui.Add("DropDownList",, ["Rot", "Grün", "Blau"])
MeineDDL.ToolTip := "Wählen Sie eine Farbe aus."
MeineGui.Add("CheckBox",, "Dieses Steuerelement hat keinen Tooltip.")
MeineGui.Show()
OnMessage(0x0200, On_WM_MOUSEMOVE)

On_WM_MOUSEMOVE(wParam, lParam, msg, Hwnd)
{
    static AltesHwnd := 0
    if (Hwnd != AltesHwnd)
    {
        Text := "", ToolTip() <em>; Vorherigen Tooltip verstecken.</em>
        AktStrlmnt := GuiCtrlFromHwnd(Hwnd)
        if AktStrlmnt
        {
            if !AktStrlmnt.HasProp("ToolTip")
                return <em>; Kein Tooltip für dieses Steuerelement.</em>
            Text := AktStrlmnt.ToolTip
            SetTimer () =&gt; ToolTip(Text), -1000
            SetTimer () =&gt; ToolTip(), -4000 <em>; ToolTip verstecken.</em>
        }
        AltesHwnd := Hwnd
    }
}</pre>
</div>

<div class="ex" id="ExOSD">
<p><a class="ex_number" href="#ExOSD"></a> Erstellt eine Bildschirmanzeige (OSD) via transparentem Fenster.</p>
<pre>MeineGui := Gui()
MeineGui.Opt("+AlwaysOnTop -Caption +ToolWindow")  <em>; +ToolWindow verhindert Taskleistenschaltfläche und Alt-Tab-Zugriff.</em>
MeineGui.BackColor := "EEAA99"  <em>; Kann eine beliebige RGB-Farbe sein (wird weiter unten transparent gemacht).</em>
MeineGui.SetFont("s32")  <em>; Große Schriftgröße setzen (32 Punkte).</em>
KoordText := MeineGui.Add("Text", "cLime", "XXXXX YYYYY")  <em>; XX &amp; YY dienen zum automatischen Anpassen der Fenstergröße.
; Macht alle Pixel dieser Farbe unsichtbar und den Text selbst transparent (150):</em>
WinSetTransColor(MeineGui.BackColor " 150", MeineGui)
SetTimer(OSDAktualisieren, 200)
OSDAktualisieren()  <em>; Erste Aktualisierung sofort machen, anstatt auf den Timer zu warten.</em>
MeineGui.Show("x0 y400 NoActivate")  <em>; NoActivate verhindert, dass ein anderes Fenster seinen Aktivzustand verliert.</em>

OSDAktualisieren(*)
{
    MouseGetPos &amp;MausX, &amp;MausY
    KoordText.Value := "X" MausX ", Y" MausY
}</pre>
</div>

<div class="ex" id="ExProgressBar">
<p><a class="ex_number" href="#ExProgressBar"></a> Erstellt einen animierten Fortschrittsbalken auf einem Hintergrundbild.</p>
<pre>MeineGui := Gui()
MeineGui.BackColor := "White"
MeineGui.Add("Picture", "x0 y0 h350 w450", A_WinDir "\Web\Wallpaper\Windows\img0.jpg")
MeinBtn := MeineGui.Add("Button", "Default xp+20 yp+250", "Animation starten")
MeinBtn.OnEvent("Click", LeisteAnimieren)
MeinProgress := MeineGui.Add("Progress", "w416")
MeinText := MeineGui.Add("Text", "wp")  <em>; wp bedeutet "vorherige Breite verwenden".</em>
MeineGui.Show()

LeisteAnimieren(*)
{
    Loop Files, A_WinDir "\*.*", "R"
    {
        if (A_Index &gt; 100)
            break
        MeinProgress.Value := A_Index
        MeinText.Value := A_LoopFileName
        Sleep 50
    }
    MeinText.Value := "Animation beendet."
}</pre>
</div>

<div class="ex" id="ExImageViewer">
<p><a class="ex_number" href="#ExImageViewer"></a> Erstellt einen einfachen Bildbetrachter.</p>
<pre>MeineGui := Gui("+Resize")
MeinBtn := MeineGui.Add("Button", "default", "Neues Bild &amp;laden")
MeinBtn.OnEvent("Click", NeuesBildLaden)
MeinRadio := MeineGui.Add("Radio", "ym+5 x+10 checked", "&amp;Originalgröße")
MeineGui.Add("Radio", "ym+5 x+10", "&amp;Kompletter Bildschirm")
MeinPic := MeineGui.Add("Pic", "xm")
MeineGui.Show()

NeuesBildLaden(*)
{
    Bild := FileSelect(,, "Bild auswählen:", "Bilder (*.gif; *.jpg; *.bmp; *.png; *.tif; *.ico; *.cur; *.ani; *.exe; *.dll)")
    if Bild = ""
        return
    if (MeinRadio.Value)  <em>; Bild mit aktueller Größe anzeigen.</em>
    {
        Breite := 0
        Höhe := 0
    }
    else <em>; Zweites Optionsfeld ausgewählt: Bildgröße an Bildschirmgröße anpassen.</em>
    {
        Breite := A_ScreenWidth - 28  <em>; Minus 28, um Platz für Rahmen und Innenabstand zu schaffen.</em>
        Höhe := -1  <em>; "Seitenverhältnis beibehalten" erscheint sinnvoll.</em>
    }
    MeinPic.Value := Format("*w{1} *h{2} {3}", Breite, Höhe, Bild)  <em>; Bild laden.</em>
    MeineGui.Title := Bild
    MeineGui.Show("xCenter y0 AutoSize")  <em>; Fenstergröße an Bildgröße anpassen.</em>
}</pre>
</div>

<div class="ex" id="ExEditor">
<p><a class="ex_number" href="#ExEditor"></a> Erstellt einen einfachen Texteditor mit Menüleiste.</p>
<pre>
<em>; MeineGui-Fenster erstellen:</em>
MeineGui := Gui("+Resize", "Unbenannt")  <em>; Größe des Fensters veränderbar machen.</em>

<em>; Untermenüs für die Menüleiste erstellen:</em>
DateiMenü := Menu()
DateiMenü.Add("&amp;Neu", MenüDateiNeu)
DateiMenü.Add("Ö&amp;ffnen...", MenüDateiÖffnen)
DateiMenü.Add("&amp;Speichern", MenüDateiSpeichern)
DateiMenü.Add("Speichern &amp;unter...", MenüDateiSpeichernUnter)
DateiMenü.Add() <em>; Trennlinie.</em>
DateiMenü.Add("&amp;Beenden", MenüDateiBeenden)
HilfeMenü := Menu()
HilfeMenü.Add("Inf&amp;o", MenüHilfeInfo)

<em>; Untermenüs in die Menüleiste einfügen:</em>
MeineMenüleiste := MenuBar()
MeineMenüleiste.Add("&amp;Datei", DateiMenü)
MeineMenüleiste.Add("&amp;?", HilfeMenü)

<em>; Fenster mit der Menüleiste ausstatten:</em>
MeineGui.MenuBar := MeineMenüleiste

<em>; Haupt-Eingabefeld erstellen:</em>
HauptEdit := MeineGui.Add("Edit", "WantTab W600 R20")

<em>; Ereignisse hinzufügen:</em>
MeineGui.OnEvent("DropFiles", Gui_DropFiles)
MeineGui.OnEvent("Size", Gui_Size)

MenüDateiNeu()  <em>; Standardeinstellungen anwenden.</em>
MeineGui.Show()  <em>; Fenster anzeigen.</em>

MenüDateiNeu(*)
{
    HauptEdit.Value := ""  <em>; Eingabefeld leeren.</em>
    DateiMenü.Disable("3&amp;")  <em>; &amp;Speichern grau machen.</em>
    MeineGui.Title := "Unbenannt"
}

MenüDateiÖffnen(*)
{
    MeineGui.Opt("+OwnDialogs")  <em>; Benutzer zwingen, das FileSelect-Dialogfenster zu schließen, bevor er zum Hauptfenster zurückkehren kann.</em>
    AusgewählteDateiName := FileSelect(3,, "Datei öffnen", "Text-Dokumente (*.txt)")
    if AusgewählteDateiName = "" <em>; Keine Datei ausgewählt.</em>
        return
    global AktuelleDateiName := InhaltLesen(AusgewählteDateiName)
}

MenüDateiSpeichern(*)
{
    InhaltSpeichern(AktuelleDateiName)
}

MenüDateiSpeichernUnter(*)
{
    MeineGui.Opt("+OwnDialogs")  <em>; Benutzer zwingen, das FileSelect-Dialogfenster zu schließen, bevor er zum Hauptfenster zurückkehren kann.</em>
    AusgewählteDateiName := FileSelect("S16",, "Datei speichern", "Text-Dokumente (*.txt)")
    if AusgewählteDateiName = "" <em>; Keine Datei ausgewählt.</em>
        return
    global AktuelleDateiName := InhaltSpeichern(AusgewählteDateiName)
}

MenüDateiBeenden(*)  <em>; Benutzer hat "Beenden" in DateiMenü ausgewählt.</em>
{
    WinClose()
}

MenüHilfeInfo(*)
{
    Info := Gui("+owner" MeineGui.Hwnd)  <em>; Hauptfenster zum Elternfenster des Info-Fensters machen.</em>
    MeineGui.Opt("+Disabled")  <em>; Interaktion mit dem Hauptfenster verbieten.</em>
    Info.Add("Text",, "Beliebiger Text.")
    Info.Add("Button", "Default", "OK").OnEvent("Click", Info_Close)
    Info.OnEvent("Close", Info_Close)
    Info.OnEvent("Escape", Info_Close)
    Info.Show()

    Info_Close(*)
    {
        MeineGui.Opt("-Disabled")  <em>; Interaktion mit dem Hauptfenster erlauben (muss vor dem nächsten Schritt erfolgen).</em>
        Info.Destroy()  <em>; Info-Fenster zerstören.</em>
    }
}

InhaltLesen(DateiName)
{
    try
        DateiInhalt := FileRead(DateiName)  <em>; Inhalt der Datei lesen und in die Variable speichern.</em>
    catch
    {
        MsgBox("'" DateiName "' konnte nicht geöffnet werden.")
        return
    }
    HauptEdit.Value := DateiInhalt  <em>; Text in das Steuerelement einfügen.</em>
    DateiMenü.Enable("3&amp;")  <em>; &amp;Speichern entgrauen.</em>
    MeineGui.Title := DateiName  <em>; Dateinamen in der Titelleiste anzeigen.</em>
    return DateiName
}

InhaltSpeichern(DateiName)
{
    try
    {
        if FileExist(DateiName)
            FileDelete(DateiName)
        FileAppend(HauptEdit.Value, DateiName)  <em>; Inhalt in eine Datei speichern.</em>
    }
    catch
    {
        MsgBox("Überschreiben der Datei '" DateiName "' fehlgeschlagen.")
        return
    }
    <em>; Bei Erfolg den Dateinamen in der Titelleiste anzeigen (falls es mit MenüDateiSpeichernUnter aufgerufen wurde):</em>
    MeineGui.Title := DateiName
    return DateiName
}

Gui_DropFiles(thisGui, Ctrl, DateiArray, *)  <em>; Ziehen &amp; Ablegen unterstützen.</em>
{
    AktuelleDateiName := InhaltLesen(DateiArray[1])  <em>; Nur die erste Datei lesen (sofern mehrere Dateien vorhanden sind).</em>
}

Gui_Size(thisGui, MinMax, Breite, Höhe)
{
    if MinMax = -1  <em>; Das Fenster wurde minimiert. Keine Aktion notwendig.</em>
        return
    <em>; Andernfalls wurde das Fenster maximiert oder dessen Größe geändert. Größe des Eingabefeldes entsprechend anpassen.</em>
    HauptEdit.Move(,, Breite-20, Höhe-20)
}</pre>
</div>

<div class="ex" id="ExRefCycle">
<p><a class="ex_number" href="#ExRefCycle"></a> Zeigt <a href="../Objects.htm#refs-problems">durch Referenzzyklen verursachte Probleme</a> auf.</p>
<pre>
<em>; Klicken Sie auf Open oder doppelklicken Sie auf das Tray-Symbol, um eine
; andere GUI anzuzeigen. Verwenden Sie die Menüpunkte, die ESC-Taste oder die
; Schließen-Schaltfläche, um zu sehen, wie es reagiert.</em>
A_TrayMenu.Add("&amp;Open", RefZyklusGuiZeigen)
Persistent

RefZyklusGuiZeigen(*) {
    static n := 0
    g := Gui(, "GUI Nr. " (++n)), g.n := n
    g.MenuBar := mb := MenuBar()   <em>; g -&gt; mb</em>
    mb.Add("Gui", m := Menu())     <em>; mb -&gt; m</em>
    m.Add("Hide", (*) =&gt; g.Hide()) <em>; (*) -&gt; g</em>
    m.Add("Destroy", (*) =&gt; g.Destroy())
    <em>; Für ein GUI-Ereignis kann der Rückruf-Parameter verwendet werden, um
    ; einen Referenzzyklus zu vermeiden (die Verwendung desselben Namens
    ; verhindert eine versehentliche Erfassung).
    ; Allerdings unterbricht Hide() nicht die *anderen* Referenzzyklen.</em>
    g.OnEvent("Escape", (g, *) =&gt; g.Hide())
    <em>; Die Erfassung der Variablen kann zu unseren Gunsten ausfallen.</em>
    g.OnEvent("Close", (*) =&gt; g := unset)
    g.Show("w300 h200")
    <em>; __Delete wird nicht aufgerufen aufgrund des Referenzzyklus:
    ;   g -&gt; mb -&gt; m -&gt; (*) -&gt; g
    ; es sei denn, g wird durch Auslösen des Close-Ereignisses ungesetzt gemacht
    ; oder MenuBar und Ereignishandler werden durch Destroy freigegeben.</em>
    g.__Delete := this =&gt; MsgBox("GUI Nr. " this.n " gelöscht")
}
</pre>
</div>

</body>
</html>
