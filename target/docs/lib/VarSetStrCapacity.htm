<!DOCTYPE HTML>
<html lang="de">
<head>
<title>VarSetStrCapacity - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die VarSetStrCapacity-Funktion erhöht die Speicherkapazität einer Variable oder gibt ihren Speicher frei. Normalerweise nicht erforderlich, kann aber für DllCall oder SendMessage oder zur Optimierung einer Mehrfachverkettung verwendet werden." />
<meta name="ahk:equiv-v1" content="lib/VarSetCapacity.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>VarSetStrCapacity</h1>

<p>Erhöht die Speicherkapazität einer Variable oder gibt ihren Speicher frei. Normalerweise nicht erforderlich, kann aber für <a href="DllCall.htm">DllCall</a> oder <a href="SendMessage.htm">SendMessage</a> oder zur Optimierung einer Mehrfachverkettung verwendet werden.</p>
<pre class="Syntax">GewährteKapazität := <span class="func">VarSetStrCapacity</span>(&amp;ZielVar <span class="optional">, GewünschteKapazität</span>)</pre>

<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>&amp;ZielVar</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#variable-references">VarRef</a></p>
    <p>Eine Variablenreferenz. Zum Beispiel: <code>VarSetStrCapacity(&amp;MeineVar, 1000)</code>. Dies kann auch eine dynamische Variable wie <code>MeinArray%i%</code> oder ein <a href="../Functions.htm#ByRef">ByRef-Parameter einer Funktion</a> sein.</p>
  </dd>

  <dt>GewünschteKapazität</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>Wenn weggelassen, wird die aktuelle Kapazität der Variable zurückgegeben und ihr Inhalt bleibt unverändert. Andernfalls geht der gesamte Inhalt der Variable verloren (die Variable wird leer gemacht).</p>
    <p>Geben Sie für <em>GewünschteKapazität</em> die Anzahl der Zeichen an, die die Variable nach der Anpassung enthalten soll. <em>GewünschteKapazität</em> ist unabhängig vom internen Nullterminator. Zum Beispiel bewirkt die Angabe von 1, dass die Variable bis zu einem Zeichen zusätzlich zu ihrem internen Terminator enthalten kann. Hinweis: Die Variable wird automatisch erweitert, wenn ihr später vom Skript ein größerer Wert zugewiesen wird.</p>
    <p>Da diese Funktion oft nur aufgerufen wird, um eine bestimmte Mindestkapazität für die Variable sicherzustellen, wird die Funktion die Variable aus Performanzgründen nur dann verkleinern, wenn <em>GewünschteKapazität</em> 0 ist. Mit anderen Worten: Wenn die Variablenkapazität bereits größer als <em>GewünschteKapazität</em> ist, wird sie nicht reduziert (wobei die Variable aus Konsistenzgründen weiterhin leer gemacht wird).</p>
    <p>Um eine Variable explizit zu verkleinern, ist es daher notwendig, zuerst ihren Speicher mit <code>VarSetStrCapacity(&amp;Var, 0)</code> freizugeben und dann <code>VarSetStrCapacity(&amp;Var, NeueKapazität)</code> zu verwenden -- oder lassen Sie die Variable einfach bei Bedarf automatisch von Null aus erweitern.</p>
    <p>Aus Performanzgründen wird eine Variable mit einer ursprünglichen Kapazität von weniger als 64 Zeichen in der Regel nicht freigegeben, da ihr Speicher permanenter Natur ist. In diesem Fall wird statt 0 die aktuelle Kapazität zurückgegeben.</p>
    <p>Aus Performanzgründen kann der Speicher einer Variable mit einer Kapazität von weniger als 4096 Bytes nicht durch Zuweisung einer leeren Zeichenkette (z.B. <code>Var := ""</code>) freigegeben werden. Allerdings kann <code>VarSetStrCapacity(&amp;Var, 0)</code> den Speicher freigeben.</p>
    <p id="neg1">Geben Sie -1 für <em>GewünschteKapazität</em> an, um die intern-gespeicherte Zeichenkettenlänge der Variable auf die Länge des aktuellen Inhalts zu aktualisieren. Dies ist in Situationen nützlich, wo die Zeichenkette indirekt geändert wurde, z.B. durch Übergabe ihrer <a href="StrPtr.htm">Adresse</a> via <a href="DllCall.htm">DllCall</a> oder <a href="SendMessage.htm">SendMessage</a>. In diesem Modus gibt VarSetStrCapacity die Länge zurück, nicht die Kapazität.</p>
  </dd>

</dl>

<h2 id="Return_Value">Rückgabewert</h2>
<p>Typ: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Diese Funktion gibt die Anzahl der Zeichen zurück, die <em>ZielVar</em> nun enthalten kann und größer gleich <em>GewünschteKapazität</em> sein wird.</p>

<h2 id="Failure">Misserfolg</h2>
<p>Es wird in folgenden Fällen eine Ausnahme ausgelöst:</p>
<ul>
  <li><em>ZielVar</em> ist keine gültige Variablenreferenz. Es ist nicht möglich, eine <a href="../Objects.htm#Usage_Objects">Objekteigenschaft</a> oder <a href="../Variables.htm#BuiltIn">interne Variable</a> via Referenz zu übergeben, daher ist es ungültig, diese an diese Funktion zu übergeben.</li>
  <li>Die gewünschte Kapazität ist zu groß, um in einen einzelnen angrenzenden Speicherblock zu passen, der dem Skript zur Verfügung steht. In seltenen Fällen kann dies daran liegen, dass dem System der Speicher ausgeht.</li>
  <li><em>GewünschteKapazität</em> ist kleiner als -1 oder größer als die Kapazität, die die aktuelle Plattform theoretisch unterstützt.</li>
</ul>

<h2 id="Remarks">Bemerkungen</h2>
<p>Das <a href="Buffer.htm">Buffer</a>-Objekt ist übersichtlicher und flexibler im Umgang mit Binärdaten, Strukturen, DllCall und ähnlichem. Zum Beispiel kann ein Buffer-Objekt einer Eigenschaft oder einem Array-Element zugewiesen werden, oder an eine Funktion übergeben oder von ihr zurückgegeben werden, ohne den Inhalt zu kopieren.</p>
<p>Diese Funktion kann verwendet werden, um die Performanz beim Zusammensetzen durch schrittweise Verkettung zu verbessern, indem mehrfache automatische Größenanpassungen vermieden werden, wenn die endgültige Länge der Zeichenkette bereits bekannt ist. In diesem Fall muss <em>GewünschteKapazität</em> nicht exakt sein: Der Performanzgewinn gilt auch dann noch, wenn die Kapazität zu klein ist, außerdem beginnt die Variable sich automatisch zu erweitern, wenn die Kapazität erschöpft ist. Bei zu hoher Kapazität wird ein Teil des Speichers verschwendet, aber nur vorübergehend, da der gesamte Speicher nach der Operation mit <code>VarSetStrCapacity(&amp;Var, 0)</code> oder <code>Var := ""</code> wieder freigegeben werden kann.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="Buffer.htm">Buffer-Objekt</a>, <a href="DllCall.htm">DllCall</a>, <a href="NumPut.htm">NumPut</a>, <a href="NumGet.htm">NumGet</a></p>
<h2 id="Examples">Beispiele</h2>
<div class="ex" id="ExConcat">
<p><a class="ex_number" href="#ExConcat"></a> Stellt sicher, dass <em>MeineVar</em> genügend Speicher hat.</p>
<pre>VarSetStrCapacity(&amp;MeineVar, 5120000)  <em>; ~10 MB</em>
Loop
{
    <em>; ...</em>
    MeineVar .= ZuVerkettendeZkette
    <em>; ...</em>
}</pre>
</div>

<div class="ex" id="ExDllCall">
<p><a class="ex_number" href="#ExDllCall"></a> Verwenden Sie eine Variable, um eine Zeichenkette von einer externen Funktion über <a href="DllCall.htm">DllCall</a> zu empfangen. (Beachten Sie, dass es besser ist, ein <a href="Buffer.htm#ExString">Buffer-Objekt</a> zu verwenden, insbesondere im Umgang mit Unicode-fremden Zeichenketten.)</p>
<pre>max_chars := 10

Loop 2
{
    <em>; Speicher für die Verwendung mit DllCall reservieren.</em>
    VarSetStrCapacity(&amp;buf, max_chars)

    if (A_Index = 1)
        <em>; Variable indirekt via DllCall ändern.</em>
        DllCall("wsprintf", <span class="red">"Ptr", StrPtr(buf)</span>, "Str", "0x%08x", "UInt", 4919, "CDecl")
    else
        <em>; "str" verwenden, um die Länge automatisch zu aktualisieren:</em>
        DllCall("wsprintf", <span class="blue">"Str", buf</span>, "Str", "0x%08x", "UInt", 4919, "CDecl")

    <em>; Verkettung, um zu zeigen, warum die Länge aktualisiert werden muss:</em>
    wrong_str := buf . "&lt;end&gt;"
    wrong_len := StrLen(buf)

    <em>; Länge der Variable aktualisieren.</em>
    VarSetStrCapacity(&amp;buf, -1)

    right_str := buf . "&lt;end&gt;"
    right_len := StrLen(buf)

    MsgBox
    (
    "Vor der Aktualisierung
      Zeichenkette: " wrong_str "
      Länge: " wrong_len "

    Nach der Aktualisierung
      Zeichenkette: " right_str "
      Länge: " right_len
    )
}
</pre>
</div>

</body>
</html>
