<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Catch - Syntax &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Die Catch-Anweisung bestimmt eine oder mehrere Anweisungen, die ausgeführt werden, wenn während einer Try-Anweisung ein Wert oder Fehler geworfen (ausgelöst) wird." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Catch</h1>

<p>Bestimmt eine oder mehrere <a href="../Concepts.htm#statement">Anweisungen</a>, die ausgeführt werden, wenn während einer <a href="Try.htm">Try</a>-Anweisung ein Wert oder Fehler geworfen (ausgelöst) wird.</p>

<pre class="Syntax" style="line-height: 120%"><span class="func">Catch</span> <span class="optional">ErrorKlasse</span> <span class="optional"><span class="func">as</span> AusgabeVar</span>
{
    <i>Anweisungen</i>
}</pre>
<h2 id="Parameters">Parameter</h2>
<dl>

  <dt>ErrorKlasse</dt>
  <dd>
    <p>Typ: <a href="Class.htm">Klasse</a></p>
    <p>Die Wertklasse, die abgefangen werden soll, z.B. <code>Error</code>, <code>TimeoutError</code> oder <code>MeinEigenerError</code>. Dies kann auch eine kommagetrennte Liste von Klassen sein. Klassen müssen mit ihrem exakten vollständigen Namen angegeben werden (also keine Ausdrücke), da der <a href="Class.htm#Prototype">Prototyp</a> jeder Klasse während der Skriptausführung aufgelöst wird. Es können sowohl <a href="../ObjList.htm">interne</a> als auch <a href="../Objects.htm#Custom_Classes">benutzerdefinierte</a> Klassen verwendet werden, auch solche, die nicht von <a href="Error.htm">Error</a> abgeleitet sind.</p>
    <p>Wenn keine Klassen angegeben sind, wird standardmäßig <code>Error</code> verwendet.</p>
    <p>Mit <code>catch Any</code> kann alles abgefangen werden.</p>
    <p>Es wird ein Ladezeitfehler angezeigt, wenn ein ungültiger Klassenname verwendet wird oder wenn der Zugriff auf eine Klasse nicht möglich ist, weil eine lokale Variable mit demselben Namen existiert.</p>
  </dd>

  <dt>AusgabeVar</dt>
  <dd>
    <p>Typ: <a href="../Concepts.htm#variables">Variable</a></p>
    <p>Die Ausgabevariable, in der der geworfene Wert gespeichert werden soll, was typischerweise ein <a href="Error.htm">Error-Objekt</a> ist. Dies darf keine <a href="../Language.htm#dynamic-variables">dynamische Variable</a> sein.</p>
    <p>Wenn weggelassen, ist es nicht möglich, direkt auf den geworfenen Wert zuzugreifen, aber er kann mittels <a href="Throw.htm">Throw</a> ohne Parameter erneut geworfen werden.</p>
  </dd>

  <dt><i>Anweisungen</i></dt>
  <dd>
    <p><a href="../Concepts.htm#statement">Anweisungen</a>, die ausgeführt werden sollen, wenn ein Wert oder Fehler geworfen wird.</p>
    <p>Geschweifte Klammern sind in der Regel nicht erforderlich, wenn nur eine einzige Anweisung verwendet wird. Weitere Informationen finden Sie unter <a href="Block.htm">{...} (Block)</a>.</p>
  </dd>

</dl>

<h2 id="Remarks">Bemerkungen</h2>
<p>Es können mehrere <em>Catch</em>-Anweisungen hintereinander verwendet werden, die jeweils eine andere Klasse (oder mehrere Klassen) angeben. Wenn der Wert keine Instanz einer der aufgelisteten Klassen ist, wird er nicht von diesem <em>Try-Catch</em> abgefangen, aber möglicherweise von einem weiter oben im Aufrufstapel.</p>
<p>Jedes <em>Catch</em> muss zu einem darüber liegenden <a href="Try.htm">Try</a> gehören (mit ihm verbunden sein). Ein <em>Catch</em> bezieht sich immer auf das nächstmögliche unbeanspruchte <em>Try</em> über ihm, es sei denn, ein <a href="Block.htm">Block</a> wurde verwendet, um dieses Verhalten zu ändern.</p>
<p>Die Parameterliste kann optional in runde Klammern gesetzt werden – in diesem Fall ist das Leer- oder Tabulatorzeichen nach <code>catch</code> optional.</p>
<p>Nach <em>Catch</em> kann optional ein <a href="Else.htm">Else</a> folgen, das ausgeführt wird, wenn im zugehörigen <em>Try</em>-Block keine Ausnahme ausgelöst wurde.</p>
<p>Je nach Bedarf kann der <a href="Block.htm#otb">One True Brace (OTB) Style</a> verwendet werden. Zum Beispiel:</p>
<pre>try {
    ...
} catch Error {
    ...
}</pre>
<p>Ladezeitfehler können nicht abgefangen werden, da sie bereits vor der Ausführung der <em>Try</em>-Anweisung auftreten.</p>

<h2 id="Related">Siehe auch</h2>
<p><a href="Try.htm">Try</a>, <a href="Throw.htm">Throw</a>, <a href="Error.htm">Error-Objekt</a>, <a href="Else.htm">Else</a>, <a href="Finally.htm">Finally</a>, <a href="Block.htm">Blöcke</a>, <a href="OnError.htm">OnError</a></p>

<h2 id="Examples">Beispiele</h2>
<p>Siehe <a href="Try.htm#Examples">Try</a>.</p>

</body>
</html>
