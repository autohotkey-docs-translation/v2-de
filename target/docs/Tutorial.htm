<!DOCTYPE html>
<html lang="de">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="author" content="tidbit" />
<meta name="description" content="Erfahren Sie, wie Sie AutoHotkey herunterladen und installieren, ein Skript erstellen, Hotkeys und Hotstrings verwenden, Tastendrücke senden, Programme starten und vieles mehr." />
<meta name="keywords" content="ahk, autohotkey, tutorial, anfänger guide" />
<title>Anfänger-Tutorial | AutoHotkey v2</title>
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script src="static/ga4.js" type="text/javascript"></script>
</head>
<body>
<h1>AutoHotkey Anfänger-Tutorial <span style="opacity: 0.4">von tidbit</span></h1>
<h2 id="s0">Inhaltsverzeichnis</h2>
<ol>
    <li><a href="#s1">Die Grundlagen</a>
    <ol type="a">
        <li><a href="#s11">AutoHotkey herunterladen und installieren</a></li>
        <li><a href="#s12">Wie man ein Skript erstellt</a></li>
        <li><a href="#s14">Wie man die englische Hilfedatei auf dem Computer findet</a></li>
    </ol>
    </li>
    <li><a href="#s2">Hotkeys &amp; Hotstrings</a>
    <ol type="a">
        <li><a href="#s21">Tasten und ihre mysteriösen Symbole</a></li>
        <li><a href="#s22">Fensterspezifische Hotkeys/Hotstrings</a></li>
        <li><a href="#s23">Mehrere Hotkeys/Hotstrings pro Datei</a></li>
        <li><a href="#s24">Beispiele</a></li>
    </ol>
    </li>
    <li><a href="#s3">Tastendrücke senden</a>
    <ol type="a">
        <li><a href="#s31">Videospiele</a></li>
    </ol>
    </li>
    <li><a href="#s4">Programme &amp; Webseiten starten</a></li>
    <li><a href="#s5">Funktionsaufrufe mit oder ohne runde Klammern</a>
    <ol type="a">
        <li><a href="#s51">Codeblöcke</a></li>
    </ol>
    </li>
    <li><a href="#s6">Variablen</a>
    <ol type="a">
        <li><a href="#s62">Benutzereingaben abrufen</a></li>
        <li><a href="#s63">Weitere Beispiele</a></li>
    </ol>
    </li>
    <li><a href="#s7">Objekte</a>
    <ol type="a">
        <li><a href="#s71">Objekte erstellen</a></li>
        <li><a href="#s72">Objekte verwenden</a></li>
    </ol>
    </li>
    <li><a href="#s8">Andere hilfreiche Goodies</a>
    <ol type="a">
        <li><a href="#s81">Die mysteriösen eckigen Klammern</a></li>
        <li><a href="#s82">Die AHK-Version herausfinden</a></li>
        <li><a href="#s83">Trial-and-Error-Prinzip</a></li>
        <li><a href="#s84">Einrückung</a></li>
        <li><a href="#s85">Um Hilfe bitten</a></li>
        <li><a href="#s86">Andere Links</a></li>
    </ol>
    </li>
</ol>

<h2 id="s1">1 - Die Grundlagen</h2>
<p class="note">Bevor wir mit unserer Reise beginnen, habe ich ein paar Ratschläge für dich. Während dieses Tutorials wirst du viel Text und Code sehen. Um AutoHotkey optimal zu lernen, ist es ratsam, den Text zu lesen und die Beispielcodes <u>auszuprobieren</u>. Erst danach solltest du versuchen, die Codes zu analysieren. Die meisten Beispiele auf dieser Seite kannst du kopieren und in deinen Texteditor einfügen. Wenn du einen Abschnitt nicht auf Anhieb verstehst, empfehle ich dir, ihn noch einmal zu lesen.</p>

<h3 id="s11">a. AutoHotkey herunterladen und installieren</h3>
<p id="local_note" class="note" style="display: none">Da du diese Dokumentation lokal betrachtest, hast du AutoHotkey wahrscheinlich schon installiert und kannst mit Abschnitt b. weitermachen.</p>
<script type="text/javascript">
  if ('file:mk:ms-its:'.indexOf(location.protocol) != -1)
    document.getElementById("local_note").removeAttribute("style");
</script>
<p>Bevor du lernst, wie man AutoHotkey (AHK) benutzt, musst du es herunterladen. Danach musst du AHK eventuell installieren, abhängig von der Version, die du heruntergeladen hast. In diesem Guide verwenden wir den Installer, da er am einfachsten zu bedienen ist.</p>

<p>Anleitung:</p>
<ol>
    <li>Öffne die Homepage von AutoHotkey: <a href="https://www.autohotkey.com/">https://www.autohotkey.com/</a></li>
    <li>Klicke auf Download. Du solltest nun eine Option für jede Hauptversion von AutoHotkey sehen. Diese Dokumentation ist für v2, also wähle diese Option aus oder wechsle zur v1-Dokumentation.</li>
    <li>Die heruntergeladene Datei sollte AutoHotkey_*_setup.exe oder ähnlich heißen. Führe sie aus und klicke auf Install.</li>
    <li>Wenn das erledigt ist, super! Weiter mit Abschnitt b.</li>
</ol>

<h3 id="s12">b. Wie man ein Skript erstellt</h3>
<p>Die folgende Anleitung zeigt dir, wie du AutoHotkey dazu bringst, etwas zu tun. AutoHotkey ist keine Zauberei - wir alle wünschen uns, dass es so wäre, aber es ist nicht so. Wir müssen AutoHotkey also sagen, was zu tun ist. Dieser Vorgang wird "Scripting" genannt.</p>

<p>Anleitung:</p>
<ol>
    <li>Rechtsklicke auf deinen Desktop.</li>
    <li>Suche den Menüpunkt "Neu".</li>
    <li>Klicke auf "AutoHotkey Script" im Menü "Neu".</li>
    <li>Gib dem Skript einen neuen Namen. Der Name muss auf .ahk enden. Zum Beispiel: MeinSkript.ahk</li>
    <li>Suche die neue Datei auf deinem Desktop und rechtsklicke darauf.</li>
    <li>Klicke auf "Edit Script".</li>
    <li>Es sollte sich ein Fenster öffnen, wahrscheinlich Notepad. Wenn dies der Fall ist, ERFOLG!
    <p>Nun, da du ein Skript erstellt hast, müssen wir noch etwas in die Datei einfügen. Eine Liste aller internen Funktionen und Variablen findest du unter <a href="#s5">Abschnitt 5</a>.</p>
    <p>Hier ein sehr einfaches Skript mit einem Hotkey. Wenn der Hotkey gedrückt wird, wird Text mithilfe der <a href="lib/Send.htm">Send</a>-Funktion gesendet:</p>
    <pre>
^j::
{
    Send "Mein erstes Skript"
}</pre>
    <p>Später werden wir uns noch etwas genauer damit beschäftigen. Bis dahin erkläre ich dir, was der obige Code macht:</p>
    <ul>
        <li><code>^j::</code> ist der Hotkey. <code class="no-highlight">^</code> symbolisiert <kbd>Strg</kbd>, <code class="no-highlight">j</code> ist die Taste <kbd>J</kbd>. Alles <u>links</u> von <code class="no-highlight">::</code> sind die Tasten, die du drücken musst.</li>
        <li><code>Send "Mein erstes Skript"</code> ist der Vorgang zum <u>Senden</u> von Tastendrücken. <code>Send</code> ist die Funktion, alles nach dem Leerzeichen und innerhalb der Anführungszeichen wird gesendet.</li>
        <li>Die Zeilen mit <code>{</code> und <code>}</code> markieren den Anfang und das Ende des <a href="Hotkeys.htm">Hotkeys</a>.</li>
    </ul>
    </li>
    <li>Speichere die Datei.</li>
    <li>Doppelklicke auf die Datei bzw. auf das Symbol im Desktop, um das Skript auszuführen. Öffne Notepad (oder wo auch immer du etwas schreiben kannst) und drücke <kbd>Strg</kbd> und <kbd>J</kbd>.</li>
    <li>Unglaublich! Dein erstes Skript ist fertig. Hol dir zur Belohnung ein paar Snacks und lies dir den Rest des Tutorials durch.</li>
</ol><p class="note">Eine Videoanleitung findest du unter <a href="https://youtu.be/HcgQlGeaPHw">Install and Hello World</a> auf YouTube.</p>

<h3 id="s14">c. Wie man die englische Hilfedatei auf dem Computer findet</h3>
<p>Downloads für v2.0-a076 und höher enthalten eine Hilfedatei in derselben ZIP-Datei wie das Hauptprogramm. Wenn du die Dateien manuell entpackt hast, solltest du die Hilfedatei dort finden, wo du sie abgelegt hast.</p>
<p>v2.0-beta.4 und höher enthalten ein Installationsskript. Wenn du AutoHotkey auf diese Weise installiert hast, sollte sich die Hilfedatei für jede Version in einem Unterverzeichnis des Installationsverzeichnisses von AutoHotkey befinden, z.B. in "C:\Programme\AutoHotkey\v2.0-beta.7". Dort sollte sich auch eine symbolische Verknüpfung namens "v2" befinden, die auf das Unterverzeichnis der zuletzt installierten Version verweist. Wenn v1.x installiert ist, kannst du auch eine Hilfedatei für diese Version im Hauptverzeichnis finden.</p>
<p>Halte Ausschau nach <b>AutoHotkey.chm</b> oder einer Datei mit dem Namen "AutoHotkey" und einem gelben Fragezeichen.</p>
<p>Wenn du nicht danach suchen willst, gibt es auch Möglichkeiten, die Datei direkt zu starten:</p>
<ul>
    <li>Über den Menüpunkt "Help" im <a href="Program.htm#tray-icon">Tray-Menü</a> eines laufenden Skripts.</li>
    <li>Über das Menü "Help" im <a href="Program.htm#main-window">Hauptfenster</a> eines laufenden Skripts oder durch Drücken von F1, während das Hauptfenster aktiv ist.</li>
    <li>Über die Option "Help files (F1)" im <a href="Program.htm#dash">Dash</a>, die mit der Maus oder durch Drücken von F1 bei aktivem Dash aktiviert werden kann. Dash kann über die Verknüpfung "AutoHotkey" im Startmenü geöffnet werden.</li>
</ul>

<h2 id="s2">2 - Hotkeys &amp; Hotstrings</h2>

<p>Was ist ein Hotkey? Ein Hotkey ist eine Taste, die sich heiß anfühlt. ... kleiner Scherz. Ein Hotkey ist eine Taste oder Tastenkombination, die der Benutzer auf der Tastatur drücken kann, um bestimmte Aktionen auszulösen. Zum Beispiel:</p>
<pre>^j::
{
    Send "Mein erstes Skript"
}</pre>
<p>Was ist ein Hotstring? Hotstrings werden hauptsächlich verwendet, um geschriebene Abkürzungen in lange Texte umzuwandeln (kurz Auto-Ersetzen), aber auch, um eine geskriptete Aktion zu starten. Zum Beispiel:</p>
<pre>::ftw::Free the whales</pre>
<p>Der Unterschied zwischen den beiden Beispielen besteht darin, dass der Hotkey durch Drücken von <kbd>Strg</kbd>+<kbd>J</kbd> ausgelöst wird, während der Hotstring dein geschriebenes "ftw" in "Free the whales" umwandelt.</p>
<p><i>"Also, wie genau erstellt jemand wie ich einen Hotkey?"</i> Gute Frage. Ein Hotkey wird mit einem einzelnen Doppelpunktpaar erstellt. Die Taste oder Tastenkombination wird <u>links</u> von <code class="no-highlight">::</code> geschrieben. Und der Inhalt muss darunter in geschweiften Klammern stehen.</p>
<p class="note"><strong>Hinweis:</strong> Es gibt Ausnahmen, aber diese sind eher verwirrend als nützlich. Daher werden sie im Tutorial nicht weiter behandelt, zumindest nicht im Moment.</p>
<pre>Esc::
{
    MsgBox "Escape!!!!"
}</pre>
<p>Ein Hotstring hat auf jeder Seite des zu ersetzenden Textes ein Doppelpunktpaar. Der Text, der deinen geschriebenen Text ersetzen soll, muss auf der <u>rechten</u> Seite des zweiten Doppelpunktpaares stehen.</p>
<p>Hotstrings können, wie bereits erwähnt, auch geskriptete Aktionen starten. Das ist eine ausgefallene Bezeichnung für <i>"tu so ziemlich alles"</i>. Dasselbe gilt für Hotkeys.</p>
<pre>::bzw::
{
    MsgBox "Du hast bzw geschrieben."
}</pre>
<p>Außerdem solltest du wissen, dass du jedem Hotkey, Hotstring, Label und jedem anderen Element, das wir noch nicht besprochen haben, mehr als eine Codezeile zuweisen kannst.</p>
<pre>^j::
{
    MsgBox "Wow!"
    MsgBox "Das sind"
    Run "notepad.exe"
    WinActivate "Unbenannt - Editor"
    WinWaitActive "Unbenannt - Editor"
    Send "7 Zeilen{!}{Enter}"
    SendInput "innerhalb des STRG{+}J-Hotkeys."
}</pre>

<h3 id="s21">a. Tasten und ihre mysteriösen Symbole</h3>
<p>Du fragst dich vielleicht: <i>"Woher soll ich wissen, dass das Zirkumflex (^) die <kbd>Strg</kbd>-Taste symbolisiert?!"</i>. Nun, gute Frage. Um dir beizubringen, was ^ und andere Symbole bedeuten, hilft dir die folgende Tabelle weiter:</p>
<table class="info">
    <tr>
        <th class="center">Symbol</th>
        <th abbr="Beschr">Beschreibung</th>
    </tr>
    <tr>
        <td class="center bold">#</td>
        <td><kbd>Win</kbd> (Windows-Logo-Taste)</td>
    </tr>
    <tr>
        <td class="center bold">!</td>
        <td><kbd>Alt</kbd></td>
    </tr>
    <tr>
        <td class="center bold">^</td>
        <td><kbd>Strg</kbd></td>
    </tr>
    <tr>
        <td class="center bold">+</td>
        <td><kbd>Umschalt</kbd></td>
    </tr>
    <tr>
        <td class="center bold">&amp;</td>
        <td>Mit einem Und-Zeichen können zwei beliebige Tasten oder Maustasten zu einem benutzerdefinierten Hotkey kombiniert werden.</td>
    </tr>
</table>
<p><strong>(Die vollständige Liste der Symbole findest du auf der <a href="Hotkeys.htm">Hotkey</a>-Seite)</strong></p>
<p>Eine Liste aller Hotkey-Namen, die auf der <u>linken</u> Seite des Doppelpunktpaares eines Hotkeys verwendet werden können, findest du unter <a href="KeyList.htm">Tastenliste (Tastatur, Maus und Controller)</a>.</p>
<p>Mit <code> &amp; </code> kann eine benutzerdefinierte Kombination von zwei (und nur zwei) Tasten (außer Controllertasten) definiert werden. Das folgende Beispiel zeigt, wie einer der Hotkeys ausgelöst werden kann, wenn Numpad0 gedrückt gehalten und dann Numpad1 oder Numpad2 gedrückt wird:</p>

<pre>Numpad0 &amp; Numpad1::
{
    MsgBox "Du hast Numpad1 gedrückt, während du Numpad0 gedrückt hieltst."
}

Numpad0 &amp; Numpad2::
{
    Run "notepad.exe"
}</pre>

<p>Du fragst dich jetzt sicher, ob Hotstrings auch coole Modifikatoren haben. Ja, die haben sie! Hotstring-Modifikatoren gehören in das erste Doppelpunktpaar. Zum Beispiel:</p>
<pre>:*:ftw::Free the whales</pre>

<p class="note">Weitere Hotkey- und Hotstring-Modifikatoren, Informationen und Beispiele findest du unter <a href="Hotkeys.htm">Hotkeys</a> und <a href="Hotstrings.htm">Hotstrings</a>.</p>
<h3 id="s22">b. Fensterspezifische Hotkeys/Hotstrings</h3>

<p>Du hast die Möglichkeit, einen Hotkey oder Hotstring nur für ein bestimmtes Fenster zu aktivieren (oder zu deaktivieren). Dazu musst du einen der Befehle verwenden, denen ein #-Zeichen vorangestellt ist, genauer gesagt <a href="lib/_HotIf.htm">#HotIf</a> in Kombination mit der internen Funktion <a href="lib/WinActive.htm">WinActive</a> oder <a href="lib/WinExist.htm">WinExist</a>:</p>
<pre>#HotIf WinActive(FensterTitel)
#HotIf WinExist(FensterTitel)</pre>
<p>Dieser spezielle Befehl (auch "Direktive" genannt) erstellt kontextabhängige Hotkeys und Hotstrings. Gib einfach einen Fenstertitel für <var>FensterTitel</var> an. In einigen Fällen kann es jedoch sinnvoll sein, Kriterien wie HWND, Gruppe oder Klasse anzugeben. Solche Kriterien erfordern fortgeschrittene Kenntnisse und werden auf der folgenden Seite ausführlicher behandelt: <a href="misc/WinTitle.htm">FensterTitel-Parameter &amp; Zuletzt Gefundenes Fenster</a>.</p>
<pre>#HotIf WinActive("Unbenannt - Editor")
#Space::
{
    MsgBox "Du hast WIN+LEER in Notepad gedrückt."
}</pre>
<p>Um die Kontextabhängigkeit für nachfolgende Hotkeys oder Hotstrings auszuschalten, gib #HotIf ohne Parameter an. Zum Beispiel:</p><pre><em>; Unbenannt - Editor</em>
#HotIf WinActive("Unbenannt - Editor")
!q::
{
    MsgBox "Du hast ALT+Q in Notepad gedrückt."
}

<em>; Jedes andere Fenster außer "Unbenannt - Editor"</em>
#HotIf
!q::
{
    MsgBox "Du hast ALT+Q in einem beliebigen Fenster gedrückt."
}
</pre>
<p>Wenn #HotIf-Direktiven nie in einem Skript verwendet werden, sind Hotkeys und Hotstrings für alle Fenster wirksam.</p>
<p>Die #HotIf-Direktive ist positionsabhängig, d.h. sie beeinflusst nur Hotkeys und Hotstrings, die sich im Skript physisch darunter befinden, bis zur nächsten #HotIf-Direktive.</p>
<pre><em>; Notepad</em>
#HotIf WinActive("ahk_class Notepad")
#Space::
{
    MsgBox "Du hast WIN+LEER in Notepad gedrückt."
}
::msg::Du hast msg in Notepad geschrieben

<em>; MSPaint</em>
#HotIf WinActive("Unbenannt - Paint")
#Space::
{
    MsgBox "Du hast WIN+LEER im Paint-Programm gedrückt!"
}
::msg::Du hast msg im Paint-Programm geschrieben!</pre>
<p class="note">Weitere Informationen findest du auf der <a href="lib/_HotIf.htm">#HotIf</a>-Seite.</p>
<h3 id="s23">c. Mehrere Hotkeys/Hotstrings pro Datei</h3>
<p>Aus irgendeinem Grund haben einige Leute Probleme damit. Also werde ich es klarstellen: AutoHotkey bietet dir die Möglichkeit, <u>beliebig viele</u> Hotkeys und Hotstrings in einer Datei zu definieren. Ob es nun 1, 3253 oder mehr sind, spielt keine Rolle.</p>
<pre>#i::
{
    Run "https://www.google.com/"
}

^p::
{
    Run "notepad.exe"
}

~j::
{
    Send "ack"
}

:*:acheiv::achiev
::achievment::achievement
::acquaintence::acquaintance
:*:adquir::acquir
::aquisition::acquisition
:*:agravat::aggravat
:*:allign::align
::ameria::America</pre>
<p>Das obige Beispiel ist völlig in Ordnung. Mehrere Hotkeys, mehrere Hotstrings. Alles in einer großen, glücklichen Skriptdatei.</p>

<h3 id="s24">d. Beispiele</h3>
<pre class="NoIndent">::bzw::beziehungsweise  <em>; Ersetzt "bzw" mit "beziehungsweise", sobald du ein <a href="Hotstrings.htm#EndChars">vordefiniertes Endungszeichen</a> drückst.</em></pre>
<pre class="NoIndent">:*:bzw::beziehungsweise  <em>; Ersetzt "bzw" mit "beziehungsweise", ohne dass ein Endungszeichen notwendig ist.</em></pre>
<pre class="NoIndent">^n::  <em>; STRG+N-Hotkey</em>
{
    Run "notepad.exe"  <em>; Startet Notepad, sobald du STRG+N drückst.</em>
}  <em>; Dies ist das Ende des Hotkeys. Der Code darunter wird beim Drücken des Hotkeys nicht ausgeführt.</em></pre>
<pre class="NoIndent">^b::  <em>; STRG+B-Hotkey</em>
{
    Send "{Ctrl down}c{Ctrl up}"  <em>; Kopiert den markierten Text. Man könnte auch ^c verwenden, aber diese Methode ist sicherer.</em>
    SendInput "[b]{Ctrl down}v{Ctrl up}[/b]" <em>; Umschließt den markierten Text mit BBCode-Tags, um ihn in einem Forum fett darzustellen.</em>
}  <em>; Dies ist das Ende des Hotkeys. Der Code darunter wird beim Drücken des Hotkeys nicht ausgeführt.</em></pre>

<h2 id="s3">3 - Tastendrücke senden</h2>
<p>Du hast also vor, Tasten zu senden (virtuell zu drücken). Das können wir tun. Benutze die <a href="lib/Send.htm">Send</a>-Funktion. Diese Funktion sendet wortwörtlich Tastendrücke, um das Schreiben oder Drücken von Tasten zu simulieren.</p>
<p>Doch bevor wir uns damit befassen, sollten wir über einige häufig auftretende Probleme sprechen.</p>
<p>Genau wie Hotkeys hat auch die Send-Funktion spezielle Tasten. <a href="lib/Send.htm">Sehr, sehr viele davon</a>. Hier die vier bekanntesten Symbole:</p>
<table class="info">
    <tr>
        <th class="center">Symbol</th>
        <th abbr="Beschr">Beschreibung</th>
    </tr>
    <tr>
        <td class="center bold">!</td>
        <td>Sendet <kbd>Alt</kbd>. Zum Beispiel würde <code>Send "Dies ist ein Text!a"</code> die Tasten "Dies ist ein Text" senden und dann <kbd>Alt</kbd>+<kbd>A</kbd> drücken. <strong>Hinweis:</strong> <code class="no-highlight">!A</code> hat in manchen Programmen eine andere Wirkung als <code class="no-highlight">!a</code>. Der Grund dafür ist, dass <code class="no-highlight">!A</code> die Tastenkombination <kbd>Alt</kbd>+<kbd>Umschalt</kbd>+<kbd>A</kbd> und <code class="no-highlight">!a</code> die Tastenkombination <kbd>Alt</kbd>+<kbd>A</kbd> drückt. Im Zweifelsfall immer Kleinbuchstaben verwenden.</td>
    </tr>
    <tr>
        <td class="center bold">+</td>
        <td>Sendet <kbd>Umschalt</kbd>. Zum Beispiel bewirkt <code>Send "+abC"</code>, dass der Text "AbC" gesendet wird, und <code>Send "!+a"</code>, dass <kbd>Alt</kbd>+<kbd>Umschalt</kbd>+<kbd>A</kbd> gedrückt wird.</td>
    </tr>
    <tr>
        <td class="center bold">^</td>
        <td>Sendet <kbd>Strg</kbd>. Zum Beispiel bewirkt <code>Send "^!a"</code>, dass <kbd>Strg</kbd>+<kbd>Alt</kbd>+<kbd>A</kbd> gedrückt wird, und <code>Send "^{Home}"</code>, dass <kbd>Strg</kbd>+<kbd>Pos1</kbd> gesendet wird. <strong>Hinweis:</strong> <code class="no-highlight">^A</code> hat in manchen Programmen eine andere Wirkung als <code class="no-highlight">^a</code>. Der Grund dafür ist, dass <code class="no-highlight">^A</code> die Tastenkombination <kbd>Strg</kbd>+<kbd>Umschalt</kbd>+<kbd>A</kbd> und <code class="no-highlight">^a</code> die Tastenkombination <kbd>Strg</kbd>+<kbd>A</kbd> drückt. Im Zweifelsfall immer Kleinbuchstaben verwenden.</td>
    </tr>
    <tr>
        <td class="center bold">#</td>
        <td>Sendet <kbd>Win</kbd> (die Taste mit dem Windows-Logo), also würde <code>Send "#e"</code> <kbd>Win</kbd> gedrückt halten und dann <kbd>E</kbd> drücken.</td>
    </tr>
</table>
<p>Die <a href="lib/Send.htm">riesige Tabelle auf der Send-Seite</a> zeigt so ziemlich jede spezielle Taste, die in AHK integriert ist. Zum Beispiel: <code class="no-highlight">{Enter}</code> und <code class="no-highlight">{Space}</code>.</p>
<p class="warning"><strong>Achtung:</strong> Diese Tabelle gilt <u>nicht</u> für <a href="Hotkeys.htm">Hotkeys</a>. Das heißt, dass du Tasten wie <kbd>Strg</kbd> oder <kbd>Enter</kbd> nicht mit geschweiften Klammern umschließen solltest, wenn du einen Hotkey erstellst.</p>
<p>Das folgende Beispiel zeigt, was mit einem Hotkey nicht gemacht werden sollte:</p>
<pre><em>; Beim Erstellen eines Hotkeys...
; FALSCH</em>
{LCtrl}::
{
    Send "AutoHotkey"
}

<em>; RICHTIG</em>
LCtrl::
{
    Send "AutoHotkey"
}
</pre>
<p>Ein häufiges Problem, das viele Leute haben, ist, dass sie denken, dass geschweifte Klammern nur zum Spaß gesetzt werden. Aber tatsächlich <u>sind sie notwendig</u>. Nur so weiß AHK, dass z.B. <code class="no-highlight">{!}</code> "Ausrufezeichen" bedeutet, nicht "drücke <kbd>Alt</kbd>". Vergiss nicht, dass du die Tabelle auf der <a href="lib/Send.htm">Send</a>-Seite verwenden kannst, um zu prüfen, ob alle Klammern richtig gesetzt sind. Zum Beispiel:</p>
<pre>Send "Dieser Text wurde geschrieben{!}" <em>; Ist dir aufgefallen, dass das ! in geschweiften Klammern steht? Wäre dies nicht der Fall, würde AHK die ALT-Taste drücken.</em>
</pre>
<pre><em>; Wie oben, aber mit der ENTER-Taste. AHK würde "Enter" ausschreiben, wenn
; es nicht in geschweiften Klammern gesetzt wäre.</em>
Send "Mehrere Enter Zeilen wurden Enter gesendet." <em>; FALSCH</em>
Send "Mehrere{Enter}Zeilen wurden{Enter}gesendet." <em>; RICHTIG</em>
</pre>
<p>Ein weiteres Problem, das viele Leute haben, ist, dass sie glauben, dass <u>jedes einzelne Zeichen</u> bei der Send-Funktion in geschweifte Klammern gesetzt werden muss. Das ist FALSCH. Wenn es nicht in der Tabelle steht, braucht es keine Klammern. Normale Buchstaben, Zahlen und sogar einige Symbole wie <code class="no-highlight">.</code> müssen <u>nicht</u> in geschweifte Klammern gesetzt werden. Außerdem kannst du mehr als einen Buchstaben, eine Zahl oder ein Symbol pro Send-Funktion senden. Send-Funktionen, die nur einen Buchstaben senden, sind unnötig. Zum Beispiel:</p>
<pre>Send "{a}"       <em>; FALSCH</em>
Send "{b}"       <em>; FALSCH</em>
Send "{c}"       <em>; FALSCH</em>
Send "{a}{b}{c}" <em>; FALSCH</em>
Send "{abc}"     <em>; FALSCH</em>
Send "abc"       <em>; RICHTIG</em></pre>

<p>Um eine Taste gedrückt zu halten oder loszulassen, setze den Tastennamen in geschweifte Klammern und füge das Wort UP oder DOWN hinzu. Zum Beispiel:</p>
<pre><em>; So hältst du eine Taste gedrückt, während du eine weitere Taste (oder Tasten) drückst.
; Sollte eine Methode nicht funktionieren, probiere eine andere aus.</em>
Send "^s"                     <em>; Beide senden STRG+S</em>
Send "{Ctrl down}s{Ctrl up}"  <em>; Beide senden STRG+S</em>
Send "{Ctrl down}c{Ctrl up}"
Send "{b down}{b up}"
Send "{Tab down}{Tab up}"
Send "{Up down}"  <em>; Die NACH-OBEN-Taste nach unten drücken.</em>
Sleep 1000        <em>; 1 Sekunde gedrückt halten.</em>
Send "{Up up}"    <em>; Die NACH-OBEN-Taste loslassen.</em></pre>

<p>Jetzt fragst du dich vielleicht: <i>"Wie kann ich meine wirklich langen Send-Funktionen besser lesbar machen?"</i>. Ganz einfach. Verwende den sogenannten Fortsetzungsbereich. Schreibe einfach eine runde Startklammer auf eine neue Zeile, dann deinen Inhalt und anschließend eine runde Endklammer. Weitere Informationen findest du unter <a href="Scripts.htm#continuation">Fortsetzungsbereiche</a>.</p>
<pre>Send "
(
Zeile 1
Zeile 2
Äpfel sind Früchte.
)"</pre>
<p class="note"><strong>Hinweis:</strong> Es gibt verschiedene Varianten von Send. Jede hat ihre eigenen Besonderheiten. Wenn eine nicht wie gewünscht funktioniert, probiere eine andere aus. Ersetze einfach den Funktionsnamen "Send" mit einem der folgenden: SendText, SendInput, SendPlay, SendEvent. Weitere Informationen zu den einzelnen Varianten findest du <a href="lib/Send.htm">hier</a>.</p>

<h3 id="s31">a. Videospiele </h3>
<p class="warning"><strong>Das ist wichtig:</strong> Einige Spiele, insbesondere Multiplayer-Spiele, verwenden Anti-Cheat-Programme. Zum Beispiel GameGuard, Hackshield oder PunkBuster. Das Umgehen solcher Systeme ist nicht nur kompliziert, sondern verstößt auch gegen die Videospielregeln, was zu einem dauerhaften Bann führen kann.</p>
<p>Wenn ein Videospiel ein solches System hat und deine Hotkeys, Hotstrings und Send-Funktionen nicht funktionieren, hast du Pech gehabt. Es gibt jedoch Methoden, um die Erfolgschancen bei einigen Videospielen zu erhöhen, aber erwarte nicht, dass sie auf <i>wundersame</i> Weise sofort funktionieren werden. Ich empfehle dir, <u>jede</u> Methode auszuprobieren, bevor du aufgibst.</p>

<p>Es ist allgemein bekannt, dass DirectX die Ursache vieler Probleme ist. Wenn du Probleme mit einem DirectX-Videospiel hast, probiere die auf der <a href="FAQ.htm#games">FAQ</a>-Seite beschriebenen Lösungsansätze aus. Weitere DirectX-Probleme können bei der Verwendung von <a href="lib/PixelSearch.htm">PixelSearch</a>, <a href="lib/PixelGetColor.htm">PixelGetColor</a> oder <a href="lib/ImageSearch.htm">ImageSearch</a> auftreten. Farben werden als schwarz (0x000000) erkannt, egal welche Farbe du versuchst abzurufen. Du solltest auch versuchen, das Videospiel im Fenstermodus zu starten, wenn möglich. Dies könnte einige DirectX-Probleme lösen.</p>
<p>Es gibt keine einheitliche Lösung, um AutoHotkey für alle Programme funktionsfähig zu machen. Wenn alle Versuche fehlschlagen, ist AutoHotkey möglicherweise nicht für deine Zwecke geeignet.</p>

<h2 id="s4">4 - Programme &amp; Webseiten starten</h2>
<p>Um ein Programm wie <i>mspaint.exe, calc.exe oder script.ahk</i> zu starten oder einen Ordner zu öffnen, verwende die <a href="lib/Run.htm">Run</a>-Funktion. Run kann sogar zum Öffnen von URLs wie <a href="https://www.autohotkey.com/">https://www.autohotkey.com/</a> verwendet werden. Wenn dein Computer so eingerichtet ist, dass er das gewünschte Programm ausführen kann, ist das ganz einfach:</p>
<pre><em>; Ein Programm starten. Beachte, dass die meisten Programme einen VOLLSTÄNDIGEN Dateipfad benötigen:</em>
Run A_ProgramFiles "\Beliebiges_Programm\Programm.exe"

<em>; Eine Webseite öffnen:</em>
Run "https://www.autohotkey.com"</pre>
<p>Run unterstützt noch andere Features wie z.B. Befehlszeilenparameter und CLSID. Wenn du mehr darüber erfahren möchtest, solltest du einen Blick auf die <a href="lib/Run.htm">Run</a>-Seite werfen. </p>
<p>Hier ein paar weitere Beispiele:</p>
<pre><em>; Einige Programme wie die von Windows benötigen keinen vollständigen Pfad:</em>
Run "notepad.exe"
Run "mspaint.exe"

<em>; Den Ordner "Dokumente" mit einer <a href="Variables.htm#BuiltIn">internen AHK-Variable</a> öffnen:</em>
Run A_MyDocuments

<em>; Einige Webseiten öffnen:</em>
Run "https://www.autohotkey.com"
Run "https://www.google.com"</pre>
<p class="note">Weitere Informationen und Beispiele findest du auf der <a href="lib/Run.htm">Run</a>-Seite.</p>

<h2 id="s5">5 - Funktionsaufrufe mit oder ohne runde Klammern</h2>
<p>In AutoHotkey können Funktionsaufrufe mit oder ohne runde Klammern angegeben werden. Die runden Klammern sind in der Regel nur notwendig, wenn der Rückgabewert der Funktion benötigt wird oder der Funktionsname nicht am Anfang der Zeile geschrieben steht.</p>
<p class="note">Eine Liste aller internen Funktionen findest du <a href="lib/index.htm">hier</a>.</p>
<p>Ein typischer Funktionsaufruf sieht wie folgt aus:</p>
<pre>Funktion(Parameter1, Parameter2, Parameter3) <em>; mit runden Klammern</em>
Funktion Parameter1, Parameter2, Parameter3  <em>; ohne runde Klammern</em></pre>
<p>Die Parameter unterstützen jede Art von Ausdruck; das bedeutet zum Beispiel:</p>
<ol>
    <li>Du kannst in ihnen Berechnungen durchführen:
        <pre>SubStr(37 * 12, 1, 2)
SubStr(A_Hour - 12, 2)</pre>
    </li>
    <li>Du kannst in ihnen andere Funktionen aufrufen (beachte, dass solche Funktionsaufrufe mit runden Klammern angegeben werden müssen, da sie nicht am Anfang der Zeile stehen):
        <pre>SubStr(A_AhkPath, InStr(A_AhkPath, "AutoHotkey"))</pre>
    </li>
    <li>Texte müssen in Anführungszeichen gesetzt werden:
        <pre>SubStr("Ich programmiere, genial!", 16)</pre>
    </li>
</ol>

<p>Der übliche Weg, den Rückgabewert einer Funktion einer Variable zuzuweisen, sieht wie folgt aus:</p>
<pre>MeineVar := SubStr("Ich programmiere, genial!", 16)</pre>
<p class="note">Das ist nicht der einzige Weg, aber der am häufigsten verwendete. Man verwendet den <code>:=</code>-Operator, um den Rückgabewert der Funktion in <code>MeineVar</code> zu speichern. Weitere Informationen findest du unter <a href="Functions.htm">Funktionen</a>.</p>
<p>Kurz gesagt:</p>
<pre><em>; Das sind Funktionsaufrufe ohne runde Klammern:</em>
MsgBox "Dies ist ein Text."
StrReplace Eingabe, "AutoHotKey", "AutoHotkey"
SendInput "Das ist genial{!}{!}{!}"

<em>; Das sind Funktionsaufrufe mit runden Klammern:</em>
SubStr("Ich programmiere, genial!", 16)
FileExist(VariableMitPfad)
Ausgabe := SubStr("Ich programmiere, genial!", 16)</pre>

<h3 id="s51">a. Codeblöcke</h3>
<p><a href="lib/Block.htm">Codeblöcke</a> sind Codezeilen, die von kleinen geschweiften Klammern (<code>{</code> und <code>}</code>) umschlossen sind. Dadurch weiß AutoHotkey, dass es sich um eine große Familie handelt und die Zeilen zusammen ausgeführt werden sollen. Codeblöcke werden häufig bei Funktionen und Kontrollanweisungen wie <a href="lib/If.htm">If</a> und <a href="lib/Loop.htm">Loop</a> verwendet. Ohne die Klammern wird nur die erste Zeile des Blocks ausgeführt.</p>
<p>Im folgenden Code werden beide Zeilen nur ausgeführt, wenn <em>MeineVar</em> gleich 5 ist:</p>
<pre>if (MeineVar = 5)
{
    MsgBox "MeineVar ist gleich " MeineVar "!!"
    ExitApp
}</pre>
<p>Im folgenden Code wird das Mitteilungsfenster nur angezeigt, wenn <em>MeineVar</em> gleich 5 ist. Das Skript wird immer beendet, auch dann, wenn <em>MeineVar</em> <u>nicht</u> 5 ist:</p>
<pre>if (MeineVar = 5)
    MsgBox "MeineVar ist gleich " MeineVar "!!"
    ExitApp</pre>
<p>Dies ist völlig in Ordnung, da der if-Anweisung nur eine Codezeile zugeordnet ist. Es ist genau dasselbe wie oben, aber ich habe die zweite Zeile nicht eingerückt, um zu zeigen, dass sie nicht zur if-Anweisung gehört:</p>
<pre>if (MeineVar = 5)
    MsgBox "MeineVar ist gleich " MeineVar "!!"
MsgBox "Wir sind nun 'außerhalb' der if-Anweisung. Geschweifte Klammern waren nicht nötig, da nur eine Zeile darunter war."</pre>

<h2 id="s6">6 - Variablen</h2>
<p><a href="Variables.htm">Variablen</a> sind vergleichbar mit Klebezetteln, die Informationen enthalten. Sie können verwendet werden, um Text, Zahlen, Daten von Funktionen oder mathematischen Gleichungen zu speichern. Ohne Variablen wäre das Programmieren und Skripten sehr viel mühsamer.</p>
<p>Es gibt mehrere Wege, einer Variable etwas zuzuweisen. Wir werden uns aber nur mit den bekanntesten beschäftigen. Bitte achte auf den Doppelpunkt-Gleich-Operator (<code>:=</code>).</p>
<dl>
    <dt>Textzuweisung</dt>
    <dd>
        <pre class="NoIndent">MeineVar := "Text"</pre>
        <p>Dies ist der einfachste Weg, einer Variable etwas zuzuweisen. Einfach den Text hinschreiben und fertig. Texte müssen in Anführungszeichen gesetzt werden.</p>
    </dd>
    <dt>Variablenzuweisung</dt>
    <dd>
        <pre class="NoIndent">MeineVar := MeineVar2</pre>
        <p>Wie oben, nur dass einer Variable der Wert einer anderen Variable zugewiesen wird.</p>
    </dd>
    <dt>Zahlenzuweisung</dt>
    <dd>
        <pre class="NoIndent">MeineVar := 6 + 8 / 3 * 2 - Sqrt(9)</pre>
        <p>Dank der Ausdrücke kannst du auch rechnen!</p>
    </dd>
    <dt>Gemischte Zuweisung</dt>
    <dd>
        <pre class="NoIndent">MeineVar := "Das Ergebnis von 5 + " MeineVar2 " ist: " 5 + MeineVar2</pre>
        <p>Eine Kombination der drei obigen Zuweisungen.</p>
    </dd>
</dl>
<p class="note">Gleichheitszeichen (<b>=</b>) mit vorangestelltem Symbol wie z.B. <code>:=</code>, <code>+=</code>, <code>-=</code> und <code>.=</code> nennen sich <b>Zuweisungsoperatoren</b>.</p>

<h3 id="s62">a. Benutzereingaben abrufen</h3>
<p>Manchmal ist es notwendig, Informationen vom Benutzer abzufragen. Es gibt mehrere Wege, dies zu tun, aber der einfachste ist die <a href="lib/InputBox.htm">InputBox</a>. Hier ein einfaches Beispiel, das zeigt, wie man dem Benutzer einige Fragen stellt und die gesammelten Daten verarbeitet:</p>
<pre>IB1 := InputBox("Wie lautet dein Vorname?", "Frage 1")
if IB1.Value = "Bill"
    MsgBox "Du hast einen tollen Namen, " IB1.Value "."

IB2 := InputBox("Magst du AutoHotkey?", "Frage 2")
if IB2.Value = "ja"
    MsgBox "Danke, dass du mit " IB2.Value " geantwortet hast, " IB1.Value "! Wir werden gute Freunde."
else
    MsgBox IB1.Value ", das macht mich traurig."</pre>

<h3 id="s63">b. Weitere Beispiele</h3>
<pre class="NoIndent">Ergebnis := <a href="lib/MsgBox.htm">MsgBox</a>("Willst du weitermachen?",, 4)
if <a href="lib/MsgBox.htm#Result">Ergebnis</a> = "No"
    return  <em>; Wenn Nein, stoppt der Code genau hier.</em>
MsgBox "Du hast JA gedrückt."  <em>; Andernfalls hat der Benutzer Ja ausgewählt.</em></pre>
<pre class="NoIndent">Var := "text"  <em>; Einer Variable etwas Text zuweisen.</em>
Num := 6  <em>; Einer Variable eine Zahl zuweisen.</em>
Var2 := Var  <em>; Einer Variable eine andere zuweisen.</em>
Var3 .= Var  <em>; Eine Variable ans Ende einer anderen anfügen.</em>
Var4 += Num  <em>; Den Wert einer Variable mit einem anderen addieren.</em>
Var4 -= Num  <em>; Den Wert einer Variable von einem anderen subtrahieren.</em>
Var5 := SubStr(Var, 2, 2)  <em>; Variable innerhalb einer Funktion.</em>
Var6 := Var "Text"  <em>; Einer Variable eine andere plus etwas Text zuweisen.</em>
MsgBox(Var)  <em>; Variable innerhalb einer Funktion.</em>
MsgBox Var  <em>; Dasselbe wie oben.</em>
Var := StrSplit(Var, "x")  <em>; Variable in einer Funktion mit EingabeVar und AusgabeVar.</em>
if (Num = 6)  <em>; Prüfen, ob eine Variable gleich einer Zahl ist.</em>
if Num = 6  <em>; Dasselbe wie oben.</em>
if (Var != Num)  <em>; Prüfen, ob eine Variable ungleich einer anderen ist.</em>
if Var1 &lt; Var2  <em>; Prüfen, ob eine Variable kleiner als eine andere ist.</em></pre>
<h2 id="s7">7 - Objekte</h2>
<p><a href="Objects.htm">Objekte</a> sind eine Möglichkeit, deine Daten effizienter zu organisieren. Ein Objekt ist im Grunde eine Sammlung von Variablen. Eine Variable, die zu einem Objekt gehört, wird als "Eigenschaft" bezeichnet. Ein Objekt kann auch Elemente enthalten, z.B. Array-Elemente.</p>
<p>Es gibt zahlreiche Gründe, warum man ein Objekt für etwas verwenden möchte. Einige Beispiele:</p>
<ul>
    <li>Du brauchst eine nummerierte Liste von Dingen, z.B. eine Einkaufsliste (dies wäre ein indiziertes Array)</li>
    <li>Du möchtest etwas gitterförmig darstellen, z.B. für ein Brettspiel (dies würde man mit mehrdimensionalen Objekten machen)</li>
    <li>Du hast eine Liste von Dingen, in der jedes Ding einen Namen hat, wie z.B. die Eigenschaften einer Frucht (dies wäre ein assoziatives Array)</li>
</ul>

<h3 id="s71">a. Objekte erstellen</h3>
<p>Es gibt viele Wege, ein Objekt zu erstellen. Hier die gängigsten:</p>
<dl>
    <dt>Syntax mit eckigen Klammern (Array)</dt>
    <dd>
        <pre class="NoIndent">MeinArray := ["eins", "zwei", "drei", 17]</pre>
        <p>Erstellt ein <a href="lib/Array.htm">Array</a>, das eine Liste von Elementen repräsentiert, die mit 1 und höher nummeriert sind. In diesem Beispiel wird der Wert <code>"eins"</code> auf Index 1 und der Wert <code>17</code> auf Index 4 gespeichert.</p>
    </dd>
    <dt>Syntax mit geschweiften Klammern</dt>
    <dd>
        <pre class="NoIndent">Banane := {Farbe: "Gelb", Geschmack: "Köstlich", Preis: 3}</pre>
        <p>Erstellt ein <i>Ad-hoc</i>-<a href="lib/Object.htm">Objekt</a>. Auf diese Weise lässt sich schnell ein Objekt mit einigen bekannten Eigenschaften erstellen. In diesem Beispiel wird der Wert <code>"Gelb"</code> in die <em>Farbe</em>-Eigenschaft und der Wert <code>3</code> in die <em>Preis</em>-Eigenschaft gespeichert.</p>
    </dd>
    <dt>Array-Konstruktor</dt>
    <dd>
        <pre class="NoIndent">MeinArray := Array("eins", "zwei", "drei", 17)</pre>
        <p>Identisch zur Syntax mit eckigen Klammern. Es ruft eigentlich die Array-Klasse auf, nicht eine Funktion.</p>
    </dd>
    <dt>Map-Konstruktor</dt>
    <dd>
        <pre class="NoIndent">MeinMap := Map("^", "Strg", "!", "Alt")</pre>
        <p>Erstellt ein <a href="lib/Map.htm">Map</a> bzw. <em>assoziatives Array</em>. In diesem Beispiel wird der Wert <code>"Strg"</code> mit dem Schlüssel <code>"^"</code> und der Wert <code>"Alt"</code> mit dem Schlüssel <code>"!"</code> verknüpft. Maps werden oft leer erstellt - mittels <code>Map()</code> - und später mit Elementen gefüllt.</p>
    </dd>
    <dt>Anderer Konstruktor</dt>
    <dd>
        <pre class="NoIndent">Banane := Frucht()</pre>
        <p>Erstellt ein Objekt der angegebenen Klasse (in diesem Fall Frucht).</p>
    </dd>
</dl>

<h3 id="s72">b. Objekte verwenden</h3>
<p>Objekte können auf verschiedene Weise verwendet werden. Sie können Werte abrufen, Werte setzen, neue Werte hinzufügen usw.</p>

<h4 id="To_set_values">Setzen von Werten</h4>
<dl>
    <dt>Klammerschreibweise</dt>
    <dd>
        <pre class="NoIndent">MeinArray[2] := "ZWEI"
MeinMap["#"] := "Win"</pre>
        <p>Das Setzen von Array- oder Map-Elementen ähnelt dem Zuweisen eines Variablenwertes. Verwende einfach die Klammerschreibweise bei der Variable, die das Objekt enthält (Array, Map oder was auch immer). Der Index oder Schlüssel zwischen den eckigen Klammern ist ein Ausdruck, folglich müssen Anführungszeichen für alle nicht-numerischen, direkt geschriebenen Werte verwendet werden.</p>
    </dd>
    <dt>Punktschreibweise</dt>
    <dd>
        <pre class="NoIndent">Banane.Konsistenz := "Matschig"</pre>
        <p>In diesem Beispiel bekommt eine Eigenschaft, die im <em>Banane</em>-Objekt enthalten ist, einen neuen Wert zugewiesen. Wenn die Eigenschaft noch nicht existiert, wird sie erstellt.</p>
    </dd>
</dl>

<h4 id="To_retrieve_values">Abrufen von Werten</h4>
<dl>
    <dt>Klammerschreibweise</dt>
    <dd>
        <pre class="NoIndent">Wert := MeinMap["^"]</pre>
        <p>In diesem Beispiel wird der Wert abgerufen, der zuvor dem Schlüssel <code>"^"</code> verknüpft wurde. Oft ist der Schlüssel in einer Variable enthalten, z.B. <code>MeinMap[ModifikatorZeichen]</code>.</p>
    </dd>
    <dt>Punktschreibweise</dt>
    <dd>
        <pre class="NoIndent">Wert := Banane.Farbe</pre>
        <p>In diesem Beispiel wird die <em>Farbe</em>-Eigenschaft des <em>Banane</em>-Objekts abgerufen.</p>
    </dd>
</dl>

<h4 id="To_add_new_keys_and_values">Hinzufügen neuer Schlüssel und Werte</h4>
<dl>
    <dt>Klammerschreibweise</dt>
    <dd>
        <pre class="NoIndent">MeinMap["NeuererSchlüssel"] := 3.1415</pre>
        <p>Um einen Wert oder Schlüssel direkt hinzuzufügen, setze einfach einen Schlüssel, der noch nicht existiert. Beachte aber, dass beim Zuweisen eines Wertes an ein <a href="lib/Array.htm">Array</a> der Index im Bereich von 1 bis zur aktuellen Länge des Arrays liegen muss. Verschiedene Objekte können unterschiedliche Anforderungen haben.</p>
    </dd>
    <dt>Punktschreibweise</dt>
    <dd>
        <pre class="NoIndent">MeinObjekt.NeueEigenschaft := "Glänzend"</pre>
        <p>Wie bereits oben erwähnt, wird beim Zuweisen eines Wertes an eine undefinierte Eigenschaft eine neue Eigenschaft erstellt.</p>
    </dd>
    <dt>InsertAt-Methode</dt>
    <dd>
        <pre class="NoIndent">MeinArray.InsertAt(Index, Wert1, Wert2, Wert3...)</pre>
        <p><a href="lib/Array.htm#InsertAt">InsertAt</a> ist eine Methode zum Einfügen neuer Werte an einer bestimmten Position innerhalb eines <a href="lib/Array.htm">Arrays</a>, allerdings können auch andere Objekttypen eine Methode mit diesem Namen definieren.</p>
    </dd>
    <dt>Push-Methode</dt>
    <dd>
        <pre class="NoIndent">MeinArray.Push(Wert1, Wert2, Wert3...)</pre>
        <p><a href="lib/Array.htm#Push">Push</a> "hängt" die Werte an das Ende des <a href="lib/Array.htm">Arrays</a> <i>MeinArray</i> an. Diese Methode wird für das Hinzufügen neuer Array-Elemente bevorzugt, da die Klammerschreibweise nicht verwendet werden kann, um etwas außerhalb des aktuellen Wertebereichs zuzuweisen.</p>
    </dd>
</dl>

<h4 id="To_remove_keys_and_values">Entfernen von Eigenschaften und Elementen</h4>
<dl>
    <dt>Delete-Methode</dt>
    <dd>
        <pre class="NoIndent">EntfernterWert := MeinObjekt.Delete(BeliebigerSchlüssel)</pre>
        <p><a href="lib/Array.htm">Array</a> und <a href="lib/Map.htm">Map</a> haben eine Delete-Methode, mit der der Wert aus dem Array oder Map entfernt werden kann. Der vorherige Wert von <code>MeinObjekt[BeliebigerSchlüssel]</code> wird in <i>EntfernterWert</i> gespeichert. Bei einem Array bewirkt dies, dass das Element keinen Wert mehr hat; es hat keinen Einfluss auf die anderen Elemente des Arrays.</p>
    </dd>
    <dt>Pop-Methode</dt>
    <dd>
        <pre class="NoIndent">MeinArray.Pop()</pre>
        <p>Diese <a href="lib/Array.htm">Array</a>-Methode entfernt das letzte Element eines Arrays und gibt dessen Wert zurück. Die Länge des Arrays wird um 1 verringert.</p>
    </dd>
    <dt>RemoveAt-Methode</dt>
    <dd>
        <pre class="NoIndent">EntfernterWert := MeinArray.RemoveAt(Index)</pre>
        <pre class="NoIndent">MeinArray.RemoveAt(Index, Länge)</pre>
        <p><a href="lib/Array.htm">Array</a> hat die <a href="lib/Array.htm#RemoveAt">RemoveAt</a>-Methode, mit der ein Element oder ein Bereich von Elementen entfernt werden kann. Elemente (falls vorhanden) rechts von den entfernten Elementen werden nach links verschoben, um den freigewordenen Platz zu füllen.</p>
    </dd>
</dl>

<h2 id="s8">8 - Andere hilfreiche Goodies</h2>
<p>Wir sind am Ende unserer Reise angelangt, werter Freund. Ich hoffe, du hast etwas gelernt. Aber bevor wir gehen, zeige ich dir noch ein paar Dinge, die du wissen solltest. Hab Spaß!</p>

<h3 id="s81">a. Die mysteriösen eckigen Klammern</h3>
<p>Auf vielen Seiten wirst du zwei Symbole (<code>[</code> und <code>]</code>) innerhalb einer gelben Syntaxbox sehen, die etwas Bestimmtes umschließen. Alles innerhalb dieser eckigen Klammern ist <u>optional</u>. Das bedeutet, dass du alles dort drinnen weglassen kannst, wenn du es nicht brauchst. Beim Schreiben deines Codes ist es sehr wichtig, die eckigen Klammern <u>nicht</u> in deinem Code zu verwenden.</p>
<p>Auf der <a href="lib/ControlGetText.htm">ControlGetText</a>-Seite wirst du folgendes sehen:</p>
<pre class="Syntax">Text := <span class="func">ControlGetText</span>(Steuerelement <span class="optional">, FensterTitel, FensterText, AusnahmeTitel, AusnahmeText</span>)</pre>
<p>Du könntest also folgendes machen:</p>
<pre>Text := ControlGetText(Steuerelement)</pre>
<p>Oder mehr Details hinzufügen:</p>
<pre>Text := ControlGetText(Steuerelement, FensterTitel)</pre>
<p>Was ist, wenn du <em>AusnahmeTitel</em> verwenden möchtest, aber nicht <em>FensterText</em> oder <em>FensterTitel</em>? Ganz einfach!</p>
<pre>Text := ControlGetText(Steuerelement,,, AusnahmeTitel)</pre>
<p>Beachte, dass du die Parameter nicht IGNORIEREN kannst, aber du kannst sie leer lassen. Würde man <code>FensterTitel, FensterText</code> ignorieren, sähe das wie folgt aus und würde zu Problemen führen:</p>
<pre>Text := ControlGetText(Steuerelement, AusnahmeTitel)</pre>

<h3 id="s82">b. Die AHK-Version herausfinden</h3>
<p>Führe den folgenden Code aus, um deine aktuelle AHK-Version anzuzeigen:</p>
<pre>MsgBox A_AhkVersion</pre>
<p>Oder suche im Startmenü oder Installationsverzeichnis nach "AutoHotkey Help File" oder "AutoHotkey.chm".</p>

<h3 id="s83">c. Trial-and-Error-Prinzip</h3>
<p>Trial-and-Error (Versuch und Irrtum) ist eine weit verbreitete und effektive Art des Lernens. Anstatt wegen jeder Kleinigkeit nachzufragen, kann es manchmal hilfreich sein, sich etwas Zeit zu nehmen (manchmal Stunden oder Tage) und die Lösung selbst zu finden. So lernst du schneller.</p>
<p>Wenn du etwas ausprobierst und eine Fehlermeldung erhältst, analysiere den Fehler. Versuche dann, deinen Code zu korrigieren. Führe ihn erneut aus. Wenn du immer noch eine Fehlermeldung erhältst, passe deinen Code weiter an. Fahre auf diese Weise fort, bis dein Code funktioniert. Auf diese Weise wirst du viel lernen, indem du die Dokumentation liest, die Fehler analysierst und herausfindest, was funktioniert und was nicht. Versuchen, scheitern, versuchen, scheitern, versuchen, versuchen, versuchen, scheitern, scheitern, <b>Erfolg!</b></p>
<p>So haben viele "Profis" angefangen. Aber zögere nicht, uns um Hilfe zu bitten, wir beißen nicht. Lernen ist ein langwieriger Prozess, auch die "Profis" haben AutoHotkey nicht an einem Tag gemeistert.</p>
<p class="note">"Wenn es beim ersten Mal nicht klappt, versuchen, versuchen Sie es erneut." - William E. Hickson</p>
<h3 id="s84">d. Einrückung</h3>
<p>Diese Sache (Einrücken) ist sehr wichtig! Dein Code läuft auch ohne Einrückung, aber es hilft dir und anderen, deinen Code zu lesen. Ein kleines Skript (25 Zeilen oder weniger) ohne eingerückten Code kann vermutlich ohne Probleme gelesen werden, aber je größer es wird, desto unübersichtlicher wird es. Am besten lernst du so schnell wie möglich, wie du deinen Code einrückst. Es spielt keine Rolle, wie du deinen Code einrückst, aber achte darauf, dass es gleichmäßig aussieht.</p>
<p>"<b>Was ist Einrücken?</b>", fragst du dich? Es geht einfach darum, den Code mithilfe von Leerräumen in überschaubare Bestandteile zu gliedern, um sehen zu können, was zu was gehört. Normalerweise werden 3 oder 4 Leerzeichen oder ein Tabulatorzeichen pro "Stufe" verwendet.</p>
<p>Nicht eingerückt:</p>
<pre>if (Auto = "alt")
{
MsgBox "Das Auto ist wirklich alt."
if (Räder = "platt")
{
MsgBox "Dieses Auto ist nicht fahrtüchtig."
return
}
else
{
MsgBox "Sei vorsichtig! Dieses alte Auto könnte zu einer Gefahr werden."
}
}
else
{
MsgBox "Meine Güte, dein neues Auto glänzt ja richtig."
}</pre>
<p>Eingerückt:</p>

<pre>if (Auto = "alt")
{
    MsgBox "Das Auto ist wirklich alt."
    if (Räder = "platt")
    {
        MsgBox "Dieses Auto ist nicht fahrtüchtig."
        return
    }
    else
    {
        MsgBox "Sei vorsichtig! Dieses alte Auto könnte zu einer Gefahr werden."
    }
}
else
{
    MsgBox "Meine Güte, dein neues Auto glänzt ja richtig."
}</pre>
<p>Schau dir den Wikipedia-Artikel <a href="https://en.wikipedia.org/wiki/Indentation_style">Einrückungsstil</a> an, um verschiedene Stile und Beispiele in Erfahrung zu bringen. Entscheide selbst, was oder wie du einrücken willst bzw. wie dein Code am einfachsten zu lesen ist.</p>

<h3 id="s85">e. Um Hilfe bitten</h3>
<p>Zuerst solltest du versuchen, selbst zu recherchieren oder den Code zu schreiben. Wenn du mit den Ergebnissen nicht zufrieden bist, kannst du die Community fragen, aber beachte dabei folgende Punkte:</p>
<ul>
    <li>Habe keine Angst, um Hilfe zu bitten, selbst die klügsten Leute tun das.</li>
    <li>Zeige uns deine Versuche, auch wenn du sie für lächerlich hältst.</li>
    <li>Poste all deine Versuche.</li>
    <li>Tu so, als wären <u>alle außer dir</u> dumm wie Brot und wüssten von nichts. Gib uns so viele Informationen wie möglich, damit wir wissen, was du vorhast. Hilf uns, dir zu helfen.</li>
    <li>Sei geduldig.</li>
    <li>Sei höflich.</li>
    <li>Sei offen.</li>
    <li>Sei nett.</li>
    <li>Hab Spaß!</li>
</ul>
<p>Erwarte nicht, dass sofort geantwortet wird - warte wenigstens 1 Tag (24 Stunden), bevor du nachfragst. Wir helfen gerne, aber bedenke, dass wir unsere Hilfe kostenlos anbieten und unsere Freizeit dafür opfern. Wir könnten gerade arbeiten, schlafen, spielen, Zeit mit der Familie verbringen, oder einfach zu beschäftigt sein, um zu helfen.</p>
<p>Während du auf Hilfe wartest, kannst du versuchen, das Problem selbst zu lösen. Es ist ein tolles Gefühl, etwas ohne Hilfe geschafft zu haben.</p>

<h3 id="s86">f. Andere Links</h3>
<p><a href="FAQ.htm">Häufig gestellte Fragen (FAQ)</a></p>
</body>
</html>
