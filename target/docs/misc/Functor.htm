<!DOCTYPE HTML>
<html lang="de">
<head>
<title>Funktionsobjekte - Definition &amp; Verwendung | AutoHotkey v2</title>
<meta name="description" content="Funktionsobjekte sind entweder Referenzen zu Func-Objekten, die tatsächliche Funktionen repräsentieren, oder Objekte, die wie Funktionen aufgerufen werden können." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script src="../static/ga4.js" type="text/javascript"></script>
</head>
<body>

<h1>Funktionsobjekte</h1>

<p>"Funktionsobjekt" bedeutet in der Regel folgendes:</p>
<ul>
  <li>Ein <a href="../lib/Func.htm">Func</a>- oder <a href="../Functions.htm">Closure</a>-Objekt, das eine tatsächliche <a href="../Functions.htm#closures">Funktion</a> repräsentiert; entweder eine interne Funktion oder im Skript definierte Funktion.</li>
  <li>Ein benutzerdefiniertes Objekt, das wie eine Funktion aufgerufen werden kann. Dies wird manchmal als "Funktor" bezeichnet.</li>
  <li>Jedes andere Objekt, das wie eine Funktion aufgerufen werden kann, wie z.B. ein <a href="#BoundFunc">BoundFunc-Objekt</a> oder ein JavaScript-Funktionsobjekt, zurückgegeben von einer COM-Methode.</li>
</ul>
<p>Funktionsobjekte können mit folgenden Dingen verwendet werden:</p>
<ul>
  <li><a href="../lib/CallbackCreate.htm">CallbackCreate</a></li>
  <li><a href="../lib/GuiOnEvent.htm">Gui-Ereignisse</a></li>
  <li><a href="../lib/For.htm">For ... in</a></li>
  <li><a href="../lib/HotIf.htm">HotIf</a></li>
  <li><a href="../lib/Hotkey.htm">Hotkey</a></li>
  <li><a href="../lib/Hotstring.htm">Hotstring</a></li>
  <li><a href="../lib/InputHook.htm">InputHook</a> (OnEnd, OnChar, OnKeyDown, OnKeyUp)</li>
  <li><a href="../lib/Menu.htm#Add">Menu.Add</a></li>
  <li><a href="../lib/OnClipboardChange.htm">OnClipboardChange</a></li>
  <li><a href="../lib/OnError.htm">OnError</a></li>
  <li><a href="../lib/OnExit.htm">OnExit</a></li>
  <li><a href="../lib/OnMessage.htm">OnMessage</a></li>
  <li><a href="RegExCallout.htm">RegEx-Callouts</a></li>
  <li><a href="../lib/SetTimer.htm">SetTimer</a></li>
  <li><a href="../lib/Sort.htm">Sort</a></li>
</ul>
<p id="HasCall">Um zu prüfen, ob ein Objekt potenziell aufrufbar ist, verwenden Sie eine der folgenden Möglichkeiten:</p>
<ul>
  <li><code>Wert.HasMethod()</code> funktioniert standardmäßig mit allen AutoHotkey-Werten und -Objekten, lässt aber zu, dass HasMethod bei einigen Objekten oder Klassen überschrieben werden kann. Bei COM-Objekten wird dies in der Regel fehlschlagen (eine Ausnahme auslösen oder das falsche Ergebnis erzeugen), es sei denn, das COM-Objekt ist tatsächlich ein AutoHotkey-Objekt aus einem anderen Prozess.</li>
  <li><code>HasMethod(Wert)</code> funktioniert mit allen AutoHotkey-Werten und -Objekten und kann nicht überschrieben werden, gibt aber False zurück, wenn die Existenz einer <em>Call</em>-Methode nicht ermittelt werden kann. Es wird eine Ausnahme ausgelöst, wenn <em>Wert</em> ein <a href="../lib/ComObject.htm">ComObject</a> ist.</li>
</ul>

<h2 id="User-Defined">Benutzerdefiniert</h2>
<!-- TODO: Explain how a user-defined object could be useful -->
<p>Benutzerdefinierte Funktionsobjekte müssen eine <em>Call</em>-Methode definieren, die die Implementierung von der "Funktion" enthält.</p>
<pre>class MeineKlasseName {
    Call(a, b) {  <em>; Parameter je nach Bedarf deklarieren, oder ein <a href="../Functions.htm#Variadic">Array*</a>.</em>
        <em>;...</em>
        return c
    }
    <em>;...</em>
}
</pre>
<p>Dies gilt für <em>Instanzen</em> von <em>MeineKlasseName</em>, wie z.B. das von <code>MeineKlasseName()</code> zurückgegebene Objekt. Das Ersetzen von <code class="no-highlight">Call</code> mit <code class="no-highlight">static Call</code> würde stattdessen überschreiben, was passiert, wenn <em>MeineKlasseName</em> selbst aufgerufen wird.</p>
<p>Wenn Sie das Funktionsobjekt einer Eigenschaft zuweisen, denken Sie daran, dass die <a href="../Variables.htm#method-call">Methodenaufrufsyntax</a> (<code>Ziel.Funk()</code>) implizit das Zielobjekt als ersten Parameter übergibt. Bei <em>MeineKlasseName</em> oben wäre <code>this</code> das Funktionsobjekt und <code>a</code> das Zielobjekt. Um das zu verhindern, setzen Sie den Ausdruck zum Abrufen des Funktionsobjekts in runden Klammern, wie in den folgenden Beispielen gezeigt.</p>
<h3 id="User-Defined-Examples">Beispiele</h3>
<p>Das folgende Beispiel definiert ein aufrufbares Funktionsarray, das beim Aufruf jedes seiner Elemente der Reihe nach aufruft.</p>
<pre>class FunkArrayTyp extends Array {
    Call(params*) {
        <em>; Eine Liste von Funktionen aufrufen.</em>
        for fn in this
            fn(params*)
    }
}

<em>; Ein Array von Funktionen erstellen.</em>
FunkArray := FunkArrayTyp()
<em>; Einige Funktionen in das Array einfügen (kann jederzeit gemacht werden).</em>
FunkArray.Push(Eins)
FunkArray.Push(Zwei)
<em>; Ein Objekt erstellen, das das Array als Methode verwendet.</em>
obj := {Methode: FunkArray}
<em>; Methode aufrufen (und folglich sowohl Eins als auch Zwei).</em>
obj.Methode("2.")
<em>; Als Funktion aufrufen.</em>
(obj.Methode)("1.", "2.")

Eins(param1, param2) {
    ListVars
    MsgBox
}
Zwei(param1, param2) {
    ListVars
    MsgBox
}</pre>

<h2 id="BoundFunc">BoundFunc-Objekt</h2>
<p>Verhält sich wie eine Funktion, übergibt aber nur vordefinierte Parameter an eine andere Funktion.</p>
<p>BoundFunc-Objekte können auf zwei Arten erzeugt werden:</p>
<ul>
  <li>Durch Aufruf der <a href="../lib/Func.htm#Bind">Func.Bind</a>-Methode, die Parameterwerte an eine Funktion bindet.</li>
  <li>Durch Aufruf der <a href="../lib/ObjBindMethod.htm">ObjBindMethod</a>-Funktion, die Parameterwerte und einen Methodennamen an ein Zielobjekt bindet.</li>
</ul>
<p>Das folgende Beispiel zeigt, wie BoundFunc-Objekte aufgerufen werden können. Wenn das BoundFunc-Objekt aufgerufen wird, ruft es die Funktion oder Methode auf, an die es gebunden wurde, und übergibt eine Kombination aus gebundenen Parametern und Parametern des Aufrufers. Ungebundene Parameterpositionen werden Positionen aus der Parameterliste des Aufrufers zugewiesen, von links nach rechts. Zum Beispiel:</p>
<pre>fn := EchteFn.Bind(1)  <em>; Nur ersten Parameter binden</em>
fn(2)      <em>; Zeigt "1, 2"</em>
fn.Call(3) <em>; Zeigt "1, 3"</em>

fn := EchteFn.Bind( , 1)  <em>; Nur zweiten Parameter binden</em>
fn(2, 0)   <em>; Zeigt "2, 1, 0"</em>
fn.Call(3) <em>; Zeigt "3, 1"</em>
fn(, 4)    <em>; Fehler: 'a' wurde weggelassen</em>

EchteFn(a, b, c?) {
    MsgBox a ", " b (IsSet(c) ? ", " c : "")
}</pre>
<p>Mit <a href="../lib/ObjBindMethod.htm">ObjBindMethod</a> kann eine Methode gebunden werden, auch dann, wenn der Abruf einer Referenz zur Methode selbst nicht möglich ist. Zum Beispiel:</p>
<pre>Shell := ComObject("Shell.Application")
RunBox := ObjBindMethod(Shell, "FileRun")
<em>; Ausführen-Dialogfenster öffnen.</em>
RunBox</pre>
<p>Ein komplexeres Beispiel finden Sie unter <a href="../lib/SetTimer.htm#ExampleClass">SetTimer</a>.</p>
<p>Andere Eigenschaften und Methoden werden von <a href="../lib/Func.htm">Func</a> geerbt, spiegeln aber nicht die Eigenschaften der Zielfunktion oder -methode wider (die nicht als Funktion implementiert sein muss). Das BoundFunc-Objekt fungiert als anonyme variadische Funktion ohne weitere formale Parameter, ähnlich der <a href="../Variables.htm#fat-arrow">Fat-Arrow-Funktion</a> unten:</p>
<pre>Func_Bind(fn, bound_args*) {
    return (args*) =&gt; (args.InsertAt(1, bound_args*), fn(args*))
}</pre>

</body>
</html>
